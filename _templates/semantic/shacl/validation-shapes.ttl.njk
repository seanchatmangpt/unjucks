---
to: "{{ shapesPath | default('shapes') }}/{{ domain | slug }}-shapes.ttl"
inject: false
skipIf: false
chmod: 644
---
{%- set baseIRI = baseIRI | default('http://example.org/shapes/' + domain | slug) -%}
{%- set ontologyIRI = ontologyIRI | default('http://example.org/ontology/' + domain | slug) -%}
{%- set prefixes = prefixes | default({}) | merge({
  "": baseIRI + '#',
  "ont": ontologyIRI + '#',
  "sh": "http://www.w3.org/ns/shacl#",
  "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
  "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
  "xsd": "http://www.w3.org/2001/XMLSchema#",
  "dc": "http://purl.org/dc/elements/1.1/",
  "dcterms": "http://purl.org/dc/terms/",
  "dash": "http://datashapes.org/dash#"
}) -%}
# {{ domain | title }} SHACL Validation Shapes
# Generated by Unjucks Semantic SHACL Generator
# Base IRI: {{ baseIRI }}
# Target Ontology: {{ ontologyIRI }}
# Validation Level: {{ validationLevel | default('strict') }}
# Generated: {{ moment().format('YYYY-MM-DD HH:mm:ss') }}

{% for prefix, uri in prefixes -%}
@prefix {{ prefix }}{% if prefix %}: {% endif %}<{{ uri }}> .
{% endfor %}

# Shapes Graph Declaration
<{{ baseIRI }}> a sh:ShapesGraph ;
    rdfs:label "{{ shapesTitle | default(domain | title + ' Validation Shapes') }}"@en ;
    rdfs:comment "{{ shapesDescription | default('SHACL validation shapes for ' + domain + ' domain data quality assurance') }}"@en ;
    dc:creator "{{ creator | default('Unjucks Generator') }}" ;
    dcterms:created "{{ createdDate | default(moment().format('YYYY-MM-DD')) }}"^^xsd:date ;
    dcterms:modified "{{ modifiedDate | default(moment().format('YYYY-MM-DD')) }}"^^xsd:date ;
    sh:declare [
        sh:prefix "ont" ;
        sh:namespace "{{ ontologyIRI }}#" ;
    ] .

{% if nodeShapes -%}
#################################################################
#    Node Shapes - Class-based Validation
#################################################################

{% for shape in nodeShapes -%}
:{{ shape.name | camelize }}Shape a sh:NodeShape ;
    sh:targetClass ont:{{ shape.targetClass | camelize }} ;
    rdfs:label "{{ shape.label | default(shape.name | humanize + ' Shape') }}"@en ;
    {%- if shape.description %}
    rdfs:comment "{{ shape.description }}"@en ;
    {%- endif %}
    {%- if shape.severity %}
    sh:severity sh:{{ shape.severity | camelize }} ;
    {%- endif %}
    {%- if shape.deactivated %}
    sh:deactivated {{ shape.deactivated }} ;
    {%- endif %}
    {%- if shape.message %}
    sh:message "{{ shape.message }}"@en ;
    {%- endif %}
    
    {%- if shape.properties %}
    # Property Constraints
    {%- for prop in shape.properties %}
    sh:property [
        sh:path ont:{{ prop.path | camelize }} ;
        {%- if prop.name %}
        sh:name "{{ prop.name }}"@en ;
        {%- endif %}
        {%- if prop.description %}
        sh:description "{{ prop.description }}"@en ;
        {%- endif %}
        {%- if prop.datatype %}
        sh:datatype {{ prop.datatype | prefixedName(prefixes) }} ;
        {%- endif %}
        {%- if prop.nodeKind %}
        sh:nodeKind sh:{{ prop.nodeKind | camelize }} ;
        {%- endif %}
        {%- if prop.class %}
        sh:class ont:{{ prop.class | camelize }} ;
        {%- endif %}
        {%- if prop.minCount is defined %}
        sh:minCount {{ prop.minCount }}^^xsd:integer ;
        {%- endif %}
        {%- if prop.maxCount is defined %}
        sh:maxCount {{ prop.maxCount }}^^xsd:integer ;
        {%- endif %}
        {%- if prop.minLength is defined %}
        sh:minLength {{ prop.minLength }}^^xsd:integer ;
        {%- endif %}
        {%- if prop.maxLength is defined %}
        sh:maxLength {{ prop.maxLength }}^^xsd:integer ;
        {%- endif %}
        {%- if prop.pattern %}
        sh:pattern "{{ prop.pattern }}" ;
        {%- if prop.flags %}
        sh:flags "{{ prop.flags }}" ;
        {%- endif %}
        {%- endif %}
        {%- if prop.minInclusive is defined %}
        sh:minInclusive {{ prop.minInclusive | semanticValue(prefixes, prop.datatype | default('xsd:decimal')) }} ;
        {%- endif %}
        {%- if prop.maxInclusive is defined %}
        sh:maxInclusive {{ prop.maxInclusive | semanticValue(prefixes, prop.datatype | default('xsd:decimal')) }} ;
        {%- endif %}
        {%- if prop.minExclusive is defined %}
        sh:minExclusive {{ prop.minExclusive | semanticValue(prefixes, prop.datatype | default('xsd:decimal')) }} ;
        {%- endif %}
        {%- if prop.maxExclusive is defined %}
        sh:maxExclusive {{ prop.maxExclusive | semanticValue(prefixes, prop.datatype | default('xsd:decimal')) }} ;
        {%- endif %}
        {%- if prop.in %}
        sh:in ( {% for val in prop.in %}{{ val | semanticValue(prefixes, prop.datatype | default('auto')) }}{% if not loop.last %} {% endif %}{% endfor %} ) ;
        {%- endif %}
        {%- if prop.hasValue is defined %}
        sh:hasValue {{ prop.hasValue | semanticValue(prefixes, prop.datatype | default('auto')) }} ;
        {%- endif %}
        {%- if prop.languageIn %}
        sh:languageIn ( {% for lang in prop.languageIn %}"{{ lang }}"{% if not loop.last %} {% endif %}{% endfor %} ) ;
        {%- endif %}
        {%- if prop.uniqueLang %}
        sh:uniqueLang {{ prop.uniqueLang }} ;
        {%- endif %}
        {%- if prop.equals %}
        sh:equals ont:{{ prop.equals | camelize }} ;
        {%- endif %}
        {%- if prop.disjoint %}
        sh:disjoint ont:{{ prop.disjoint | camelize }} ;
        {%- endif %}
        {%- if prop.lessThan %}
        sh:lessThan ont:{{ prop.lessThan | camelize }} ;
        {%- endif %}
        {%- if prop.lessThanOrEquals %}
        sh:lessThanOrEquals ont:{{ prop.lessThanOrEquals | camelize }} ;
        {%- endif %}
        {%- if prop.qualifiedValueShape %}
        sh:qualifiedValueShape :{{ prop.qualifiedValueShape | camelize }}Shape ;
        {%- if prop.qualifiedMinCount is defined %}
        sh:qualifiedMinCount {{ prop.qualifiedMinCount }}^^xsd:integer ;
        {%- endif %}
        {%- if prop.qualifiedMaxCount is defined %}
        sh:qualifiedMaxCount {{ prop.qualifiedMaxCount }}^^xsd:integer ;
        {%- endif %}
        {%- endif %}
        {%- if prop.severity %}
        sh:severity sh:{{ prop.severity | camelize }} ;
        {%- endif %}
        {%- if prop.message %}
        sh:message "{{ prop.message }}"@en ;
        {%- endif %}
        {%- if prop.order is defined %}
        sh:order {{ prop.order }}^^xsd:integer ;
        {%- endif %}
        {%- if prop.group %}
        sh:group :{{ prop.group | camelize }}Group ;
        {%- endif %}
    ] ;
    {%- endfor %}
    {%- endif %}
    
    {%- if shape.closed %}
    sh:closed {{ shape.closed }} ;
    {%- if shape.ignoredProperties %}
    sh:ignoredProperties ( {% for prop in shape.ignoredProperties %}{{ prop | prefixedName(prefixes) }}{% if not loop.last %} {% endif %}{% endfor %} ) ;
    {%- endif %}
    {%- endif %}
    
    {%- if shape.sparql %}
    {%- for sparqlConstraint in shape.sparql %}
    sh:sparql [
        {%- if sparqlConstraint.message %}
        sh:message "{{ sparqlConstraint.message }}"@en ;
        {%- endif %}
        {%- if sparqlConstraint.severity %}
        sh:severity sh:{{ sparqlConstraint.severity | camelize }} ;
        {%- endif %}
        sh:select """{{ sparqlConstraint.select | safe }}""" ;
        {%- if sparqlConstraint.prefixes %}
        {%- for prefix, ns in sparqlConstraint.prefixes %}
        sh:prefix "{{ prefix }}" ;
        sh:namespace "{{ ns }}" ;
        {%- endfor %}
        {%- endif %}
    ] ;
    {%- endfor %}
    {%- endif %}
    
    {%- if shape.or %}
    sh:or ( {% for orShape in shape.or %}:{{ orShape | camelize }}Shape{% if not loop.last %} {% endif %}{% endfor %} ) ;
    {%- endif %}
    {%- if shape.and %}
    sh:and ( {% for andShape in shape.and %}:{{ andShape | camelize }}Shape{% if not loop.last %} {% endif %}{% endfor %} ) ;
    {%- endif %}
    {%- if shape.not %}
    sh:not :{{ shape.not | camelize }}Shape ;
    {%- endif %}
    
    .

{% endfor %}
{%- endif %}

{% if propertyShapes -%}
#################################################################
#    Property Shapes - Path-based Validation
#################################################################

{% for shape in propertyShapes -%}
:{{ shape.name | camelize }}PropertyShape a sh:PropertyShape ;
    sh:path {{ shape.path | pathExpression(prefixes) }} ;
    {%- if shape.targetNode %}
    sh:targetNode {% if shape.targetNode.startsWith('http') %}<{{ shape.targetNode }}>{% else %}:{{ shape.targetNode | camelize }}{% endif %} ;
    {%- endif %}
    {%- if shape.targetSubjectsOf %}
    sh:targetSubjectsOf ont:{{ shape.targetSubjectsOf | camelize }} ;
    {%- endif %}
    {%- if shape.targetObjectsOf %}
    sh:targetObjectsOf ont:{{ shape.targetObjectsOf | camelize }} ;
    {%- endif %}
    rdfs:label "{{ shape.label | default(shape.name | humanize + ' Property Shape') }}"@en ;
    {%- if shape.description %}
    rdfs:comment "{{ shape.description }}"@en ;
    {%- endif %}
    # [Similar property constraints as in nodeShapes]
    {%- if shape.datatype %}
    sh:datatype {{ shape.datatype | prefixedName(prefixes) }} ;
    {%- endif %}
    {%- if shape.nodeKind %}
    sh:nodeKind sh:{{ shape.nodeKind | camelize }} ;
    {%- endif %}
    {%- if shape.class %}
    sh:class ont:{{ shape.class | camelize }} ;
    {%- endif %}
    {%- if shape.minCount is defined %}
    sh:minCount {{ shape.minCount }}^^xsd:integer ;
    {%- endif %}
    {%- if shape.maxCount is defined %}
    sh:maxCount {{ shape.maxCount }}^^xsd:integer ;
    {%- endif %}
    {%- if shape.severity %}
    sh:severity sh:{{ shape.severity | camelize }} ;
    {%- endif %}
    {%- if shape.message %}
    sh:message "{{ shape.message }}"@en ;
    {%- endif %}
    .

{% endfor %}
{%- endif %}

{% if groups -%}
#################################################################
#    Property Groups - UI Organization
#################################################################

{% for group in groups -%}
:{{ group.name | camelize }}Group a sh:PropertyGroup ;
    rdfs:label "{{ group.label | default(group.name | humanize) }}"@en ;
    {%- if group.description %}
    rdfs:comment "{{ group.description }}"@en ;
    {%- endif %}
    {%- if group.order is defined %}
    sh:order {{ group.order }}^^xsd:integer ;
    {%- endif %}
    .

{% endfor %}
{%- endif %}

{% if functions -%}
#################################################################
#    SHACL Functions - Custom Validation Logic
#################################################################

{% for func in functions -%}
:{{ func.name | camelize }} a sh:SPARQLFunction ;
    rdfs:label "{{ func.label | default(func.name | humanize) }}"@en ;
    {%- if func.description %}
    rdfs:comment "{{ func.description }}"@en ;
    {%- endif %}
    {%- if func.parameters %}
    {%- for param in func.parameters %}
    sh:parameter [
        sh:path :{{ param.path | camelize }} ;
        {%- if param.datatype %}
        sh:datatype {{ param.datatype | prefixedName(prefixes) }} ;
        {%- endif %}
        {%- if param.optional %}
        sh:optional {{ param.optional }} ;
        {%- endif %}
        {%- if param.description %}
        sh:description "{{ param.description }}"@en ;
        {%- endif %}
    ] ;
    {%- endfor %}
    {%- endif %}
    {%- if func.returnType %}
    sh:returnType {{ func.returnType | prefixedName(prefixes) }} ;
    {%- endif %}
    sh:select """{{ func.select | safe }}""" .

{% endfor %}
{%- endif %}

{% if rules -%}
#################################################################
#    SHACL Rules - Data Transformation
#################################################################

{% for rule in rules -%}
:{{ rule.name | camelize }}Rule a sh:SPARQLRule ;
    rdfs:label "{{ rule.label | default(rule.name | humanize) }}"@en ;
    {%- if rule.description %}
    rdfs:comment "{{ rule.description }}"@en ;
    {%- endif %}
    {%- if rule.order is defined %}
    sh:order {{ rule.order }}^^xsd:integer ;
    {%- endif %}
    sh:construct """{{ rule.construct | safe }}""" ;
    {%- if rule.condition %}
    sh:condition [
        sh:sparql [
            sh:select """{{ rule.condition | safe }}""" ;
        ]
    ] ;
    {%- endif %}
    .

{% endfor %}
{%- endif %}

{% if tests -%}
#################################################################
#    Validation Test Cases
#################################################################

{% for test in tests -%}
:{{ test.name | camelize }}Test a dash:GraphValidationTestCase ;
    rdfs:label "{{ test.label | default(test.name | humanize + ' Test') }}"@en ;
    {%- if test.description %}
    rdfs:comment "{{ test.description }}"@en ;
    {%- endif %}
    dash:expectedResult [
        a sh:ValidationReport ;
        sh:conforms {{ test.expectedConforms | default('true') }} ;
        {%- if test.expectedViolations %}
        {%- for violation in test.expectedViolations %}
        sh:result [
            a sh:ValidationResult ;
            sh:focusNode :{{ violation.focusNode | camelize }} ;
            {%- if violation.resultPath %}
            sh:resultPath ont:{{ violation.resultPath | camelize }} ;
            {%- endif %}
            {%- if violation.sourceShape %}
            sh:sourceShape :{{ violation.sourceShape | camelize }}Shape ;
            {%- endif %}
            {%- if violation.severity %}
            sh:resultSeverity sh:{{ violation.severity | camelize }} ;
            {%- endif %}
            {%- if violation.message %}
            sh:resultMessage "{{ violation.message }}"@en ;
            {%- endif %}
        ] ;
        {%- endfor %}
        {%- endif %}
    ] ;
    dash:dataGraph """
{{ test.dataGraph | safe }}
    """ .

{% endfor %}
{%- endif %}

{% if configuration -%}
#################################################################
#    Validation Configuration
#################################################################

:ValidationConfiguration a sh:ValidationConfiguration ;
    rdfs:label "{{ domain | title }} Validation Configuration"@en ;
    rdfs:comment "Configuration settings for {{ domain }} domain validation"@en ;
    {%- if configuration.validateShapes %}
    sh:validateShapes {{ configuration.validateShapes }} ;
    {%- endif %}
    {%- if configuration.severity %}
    sh:severity sh:{{ configuration.severity | camelize }} ;
    {%- endif %}
    {%- if configuration.ignoreConstraints %}
    {%- for constraint in configuration.ignoreConstraints %}
    sh:ignoreConstraint {{ constraint | prefixedName(prefixes) }} ;
    {%- endfor %}
    {%- endif %}
    {%- if configuration.maxEvaluationDepth %}
    sh:maxEvaluationDepth {{ configuration.maxEvaluationDepth }}^^xsd:integer ;
    {%- endif %}
    .
{%- endif %}

# End of {{ domain | title }} SHACL Shapes
# Generated on {{ moment().format('YYYY-MM-DD HH:mm:ss') }} by Unjucks
# Total shapes: {{ (nodeShapes | length if nodeShapes else 0) + (propertyShapes | length if propertyShapes else 0) }}
# Validation level: {{ validationLevel | default('strict') }}
# Template: {{ templateFile | default('validation-shapes.ttl.njk') }}