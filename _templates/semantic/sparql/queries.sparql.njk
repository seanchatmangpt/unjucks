---
to: "{{ queriesPath | default('queries') }}/{{ querySetName | slug }}-queries.sparql"
inject: false
skipIf: false
chmod: 644
---
{%- set ontologyIRI = ontologyIRI | default('http://example.org/ontology/' + domain | slug) -%}
{%- set dataIRI = dataIRI | default('http://example.org/data/' + domain | slug) -%}
{%- set prefixes = prefixes | default({}) | merge({
  "ont": ontologyIRI + '#',
  "data": dataIRI + '#',
  "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
  "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
  "owl": "http://www.w3.org/2002/07/owl#",
  "xsd": "http://www.w3.org/2001/XMLSchema#",
  "dc": "http://purl.org/dc/elements/1.1/",
  "dcterms": "http://purl.org/dc/terms/",
  "foaf": "http://xmlns.com/foaf/0.1/",
  "prov": "http://www.w3.org/ns/prov#",
  "skos": "http://www.w3.org/2004/02/skos/core#"
}) -%}
# {{ querySetName | title }} SPARQL Queries
# Generated by Unjucks Semantic Query Generator
# Domain: {{ domain | title }}
# Ontology: {{ ontologyIRI }}
# Data: {{ dataIRI }}
# Generated: {{ moment().format('YYYY-MM-DD HH:mm:ss') }}
#
# Usage:
# - Copy individual queries below for use in SPARQL endpoints
# - Modify variables and filters as needed for your specific use case
# - Queries are optimized for {{ optimizationTarget | default('performance') }}

{% for prefix, uri in prefixes -%}
PREFIX {{ prefix }}: <{{ uri }}>
{% endfor %}

{% if queries -%}
{% for query in queries -%}
#################################################################
# Query: {{ query.name | humanize }}
# Purpose: {{ query.description | default('No description provided') }}
# Type: {{ query.type | upper }}
{%- if query.complexity %}
# Complexity: {{ query.complexity }}
{%- endif %}
{%- if query.performance %}
# Expected performance: {{ query.performance }}
{%- endif %}
{%- if query.useCase %}
# Use case: {{ query.useCase }}
{%- endif %}
{%- if query.parameters %}
# Parameters: {{ query.parameters | join(', ') }}
{%- endif %}
#################################################################

{{ query.type | upper }} {% if query.distinct %}DISTINCT {% endif %}{% if query.reduced %}REDUCED {% endif %}{%- if query.select %}{% for var in query.select %}?{{ var }}{% if not loop.last %} {% endif %}{% endfor %}{% elif query.construct %}
{%- for triple in query.construct %}
    {{ triple.subject | sparqlTerm(prefixes) }} {{ triple.predicate | sparqlTerm(prefixes) }} {{ triple.object | sparqlTerm(prefixes) }} .
{%- endfor %}
{% elif query.describe %}
{% for resource in query.describe %}{{ resource | sparqlTerm(prefixes) }}{% if not loop.last %} {% endif %}{% endfor %}
{% else %}*{% endif %}
{%- if query.from %}
{%- for graph in query.from %}
FROM <{{ graph }}>
{%- endfor %}
{%- endif %}
{%- if query.fromNamed %}
{%- for graph in query.fromNamed %}
FROM NAMED <{{ graph }}>
{%- endfor %}
{%- endif %}
WHERE {
{%- if query.where %}
{%- if query.where is string %}
    {{ query.where | safe }}
{%- else %}
{%- for pattern in query.where %}
{%- if pattern.type == 'triple' %}
    {{ pattern.subject | sparqlTerm(prefixes) }} {{ pattern.predicate | sparqlTerm(prefixes) }} {{ pattern.object | sparqlTerm(prefixes) }} .
{%- elif pattern.type == 'optional' %}
    OPTIONAL {
{%- for optPattern in pattern.patterns %}
        {{ optPattern.subject | sparqlTerm(prefixes) }} {{ optPattern.predicate | sparqlTerm(prefixes) }} {{ optPattern.object | sparqlTerm(prefixes) }} .
{%- endfor %}
    }
{%- elif pattern.type == 'union' %}
    {
{%- for unionGroup in pattern.groups %}
        {
{%- for unionPattern in unionGroup %}
            {{ unionPattern.subject | sparqlTerm(prefixes) }} {{ unionPattern.predicate | sparqlTerm(prefixes) }} {{ unionPattern.object | sparqlTerm(prefixes) }} .
{%- endfor %}
        }
        {%- if not loop.last %} UNION {%- endif %}
{%- endfor %}
    }
{%- elif pattern.type == 'filter' %}
    FILTER({{ pattern.expression | safe }})
{%- elif pattern.type == 'bind' %}
    BIND({{ pattern.expression | safe }} AS ?{{ pattern.variable }})
{%- elif pattern.type == 'subquery' %}
    {
        {{ pattern.query | safe }}
    }
{%- elif pattern.type == 'service' %}
    SERVICE <{{ pattern.endpoint }}> {
{%- for servicePattern in pattern.patterns %}
        {{ servicePattern.subject | sparqlTerm(prefixes) }} {{ servicePattern.predicate | sparqlTerm(prefixes) }} {{ servicePattern.object | sparqlTerm(prefixes) }} .
{%- endfor %}
    }
{%- elif pattern.type == 'graph' %}
    GRAPH {{ pattern.graph | sparqlTerm(prefixes) }} {
{%- for graphPattern in pattern.patterns %}
        {{ graphPattern.subject | sparqlTerm(prefixes) }} {{ graphPattern.predicate | sparqlTerm(prefixes) }} {{ graphPattern.object | sparqlTerm(prefixes) }} .
{%- endfor %}
    }
{%- elif pattern.type == 'exists' %}
    FILTER EXISTS {
{%- for existsPattern in pattern.patterns %}
        {{ existsPattern.subject | sparqlTerm(prefixes) }} {{ existsPattern.predicate | sparqlTerm(prefixes) }} {{ existsPattern.object | sparqlTerm(prefixes) }} .
{%- endfor %}
    }
{%- elif pattern.type == 'notExists' %}
    FILTER NOT EXISTS {
{%- for notExistsPattern in pattern.patterns %}
        {{ notExistsPattern.subject | sparqlTerm(prefixes) }} {{ notExistsPattern.predicate | sparqlTerm(prefixes) }} {{ notExistsPattern.object | sparqlTerm(prefixes) }} .
{%- endfor %}
    }
{%- elif pattern.type == 'minus' %}
    MINUS {
{%- for minusPattern in pattern.patterns %}
        {{ minusPattern.subject | sparqlTerm(prefixes) }} {{ minusPattern.predicate | sparqlTerm(prefixes) }} {{ minusPattern.object | sparqlTerm(prefixes) }} .
{%- endfor %}
    }
{%- elif pattern.type == 'values' %}
    VALUES {{ pattern.variables | map('prepend', '?') | join(' ') }} {
{%- for valueSet in pattern.values %}
        ( {{ valueSet | join(' ') }} )
{%- endfor %}
    }
{%- endif %}
{%- endfor %}
{%- endif %}
{%- else %}
    # Basic pattern - modify as needed
    ?s ?p ?o .
{%- endif %}
}
{%- if query.groupBy %}
GROUP BY {% for var in query.groupBy %}?{{ var }}{% if not loop.last %} {% endif %}{% endfor %}
{%- endif %}
{%- if query.having %}
HAVING ({{ query.having | safe }})
{%- endif %}
{%- if query.orderBy %}
ORDER BY {% for order in query.orderBy %}{% if order.desc %}DESC({% endif %}?{{ order.var | default(order) }}{% if order.desc %}){% endif %}{% if not loop.last %} {% endif %}{% endfor %}
{%- endif %}
{%- if query.limit %}
LIMIT {{ query.limit }}
{%- endif %}
{%- if query.offset %}
OFFSET {{ query.offset }}
{%- endif %}

{% if not loop.last %}

{% endif %}
{% endfor -%}
{%- endif %}

{% if analytics -%}
#################################################################
# ANALYTICS QUERIES
# Advanced analytical queries for business intelligence
#################################################################

{% for analytic in analytics -%}
# {{ analytic.name | humanize }}
# {{ analytic.description | default('Advanced analytics query') }}
# Metric: {{ analytic.metric | default('Custom') }}
# Aggregation: {{ analytic.aggregation | default('COUNT') }}

SELECT {% if analytic.distinct %}DISTINCT {% endif %}{% for field in analytic.select %}?{{ field }}{% if not loop.last %} {% endif %}{% endfor %}
       ({{ analytic.aggregation | upper }}({% if analytic.aggregateField %}?{{ analytic.aggregateField }}{% else %}*{% endif %}) AS ?{{ analytic.resultVariable | default('result') }})
WHERE {
{% for pattern in analytic.patterns -%}
    {{ pattern.subject | sparqlTerm(prefixes) }} {{ pattern.predicate | sparqlTerm(prefixes) }} {{ pattern.object | sparqlTerm(prefixes) }} .
{% endfor %}
{%- if analytic.filters %}
{%- for filter in analytic.filters %}
    FILTER({{ filter | safe }})
{%- endfor %}
{%- endif %}
{%- if analytic.timeRange %}
    FILTER(?date >= "{{ analytic.timeRange.start }}"^^xsd:dateTime && ?date <= "{{ analytic.timeRange.end }}"^^xsd:dateTime)
{%- endif %}
}
{%- if analytic.groupBy %}
GROUP BY {% for var in analytic.groupBy %}?{{ var }}{% if not loop.last %} {% endif %}{% endfor %}
{%- endif %}
{%- if analytic.having %}
HAVING ({{ analytic.having | safe }})
{%- endif %}
ORDER BY {% if analytic.orderDesc %}DESC({% endif %}?{{ analytic.resultVariable | default('result') }}{% if analytic.orderDesc %}){% endif %}
{%- if analytic.limit %}
LIMIT {{ analytic.limit }}
{%- endif %}

{% if not loop.last %}

{% endif %}
{% endfor -%}
{%- endif %}

{% if federatedQueries -%}
#################################################################
# FEDERATED QUERIES
# Cross-dataset and cross-endpoint queries
#################################################################

{% for fedQuery in federatedQueries -%}
# {{ fedQuery.name | humanize }}
# {{ fedQuery.description | default('Federated query across multiple endpoints') }}
# Endpoints: {{ fedQuery.endpoints | join(', ') }}

SELECT {% if fedQuery.distinct %}DISTINCT {% endif %}{% for var in fedQuery.select %}?{{ var }}{% if not loop.last %} {% endif %}{% endfor %}
WHERE {
{%- for service in fedQuery.services %}
    SERVICE <{{ service.endpoint }}> {
{%- for pattern in service.patterns %}
        {{ pattern.subject | sparqlTerm(prefixes) }} {{ pattern.predicate | sparqlTerm(prefixes) }} {{ pattern.object | sparqlTerm(prefixes) }} .
{%- endfor %}
{%- if service.filters %}
{%- for filter in service.filters %}
        FILTER({{ filter | safe }})
{%- endfor %}
{%- endif %}
    }
{%- endfor %}
{%- if fedQuery.localPatterns %}
{%- for pattern in fedQuery.localPatterns %}
    {{ pattern.subject | sparqlTerm(prefixes) }} {{ pattern.predicate | sparqlTerm(prefixes) }} {{ pattern.object | sparqlTerm(prefixes) }} .
{%- endfor %}
{%- endif %}
{%- if fedQuery.filters %}
{%- for filter in fedQuery.filters %}
    FILTER({{ filter | safe }})
{%- endfor %}
{%- endif %}
}
{%- if fedQuery.orderBy %}
ORDER BY {% for order in fedQuery.orderBy %}{% if order.desc %}DESC({% endif %}?{{ order.var }}{% if order.desc %}){% endif %}{% if not loop.last %} {% endif %}{% endfor %}
{%- endif %}
{%- if fedQuery.limit %}
LIMIT {{ fedQuery.limit }}
{%- endif %}

{% if not loop.last %}

{% endif %}
{% endfor -%}
{%- endif %}

{% if reasoning -%}
#################################################################
# REASONING QUERIES
# Queries that leverage ontological reasoning
#################################################################

{% for reasonQuery in reasoning -%}
# {{ reasonQuery.name | humanize }}
# {{ reasonQuery.description | default('Reasoning-enabled query') }}
# Reasoning type: {{ reasonQuery.reasoningType | default('RDFS') }}

SELECT {% if reasonQuery.distinct %}DISTINCT {% endif %}{% for var in reasonQuery.select %}?{{ var }}{% if not loop.last %} {% endif %}{% endfor %}
WHERE {
{%- if reasonQuery.reasoningType == 'RDFS' %}
    # RDFS reasoning patterns
    {
        {{ reasonQuery.directPattern.subject | sparqlTerm(prefixes) }} {{ reasonQuery.directPattern.predicate | sparqlTerm(prefixes) }} {{ reasonQuery.directPattern.object | sparqlTerm(prefixes) }} .
    } UNION {
        {{ reasonQuery.directPattern.subject | sparqlTerm(prefixes) }} {{ reasonQuery.directPattern.predicate | sparqlTerm(prefixes) }}/rdfs:subPropertyOf* {{ reasonQuery.directPattern.object | sparqlTerm(prefixes) }} .
    } UNION {
        {{ reasonQuery.directPattern.subject | sparqlTerm(prefixes) }} a ?type .
        ?type rdfs:subClassOf* {{ reasonQuery.targetClass | sparqlTerm(prefixes) }} .
    }
{%- elif reasonQuery.reasoningType == 'OWL' %}
    # OWL reasoning patterns
    {%- for pattern in reasonQuery.patterns %}
    {{ pattern.subject | sparqlTerm(prefixes) }} {{ pattern.predicate | sparqlTerm(prefixes) }} {{ pattern.object | sparqlTerm(prefixes) }} .
    {%- endfor %}
    # Inferred relationships
    {%- for inference in reasonQuery.inferences %}
    OPTIONAL {
        {{ inference.condition | safe }}
        BIND({{ inference.conclusion | safe }} AS ?{{ inference.variable }})
    }
    {%- endfor %}
{%- else %}
    # Custom reasoning patterns
{%- for pattern in reasonQuery.patterns %}
    {{ pattern.subject | sparqlTerm(prefixes) }} {{ pattern.predicate | sparqlTerm(prefixes) }} {{ pattern.object | sparqlTerm(prefixes) }} .
{%- endfor %}
{%- endif %}
{%- if reasonQuery.filters %}
{%- for filter in reasonQuery.filters %}
    FILTER({{ filter | safe }})
{%- endfor %}
{%- endif %}
}
{%- if reasonQuery.orderBy %}
ORDER BY {% for var in reasonQuery.orderBy %}?{{ var }}{% if not loop.last %} {% endif %}{% endfor %}
{%- endif %}
{%- if reasonQuery.limit %}
LIMIT {{ reasonQuery.limit }}
{%- endif %}

{% if not loop.last %}

{% endif %}
{% endfor -%}
{%- endif %}

{% if updates -%}
#################################################################
# UPDATE QUERIES
# Data modification operations
#################################################################

{% for update in updates -%}
# {{ update.name | humanize }}
# {{ update.description | default('Data update operation') }}
# Operation: {{ update.operation | upper }}

{% if update.operation == 'INSERT' -%}
INSERT DATA {
{%- for triple in update.triples %}
    {{ triple.subject | sparqlTerm(prefixes) }} {{ triple.predicate | sparqlTerm(prefixes) }} {{ triple.object | sparqlTerm(prefixes) }} .
{%- endfor %}
}
{%- elif update.operation == 'DELETE' -%}
DELETE DATA {
{%- for triple in update.triples %}
    {{ triple.subject | sparqlTerm(prefixes) }} {{ triple.predicate | sparqlTerm(prefixes) }} {{ triple.object | sparqlTerm(prefixes) }} .
{%- endfor %}
}
{%- elif update.operation == 'INSERT_WHERE' -%}
INSERT {
{%- for triple in update.insert %}
    {{ triple.subject | sparqlTerm(prefixes) }} {{ triple.predicate | sparqlTerm(prefixes) }} {{ triple.object | sparqlTerm(prefixes) }} .
{%- endfor %}
}
WHERE {
{%- for pattern in update.where %}
    {{ pattern.subject | sparqlTerm(prefixes) }} {{ pattern.predicate | sparqlTerm(prefixes) }} {{ pattern.object | sparqlTerm(prefixes) }} .
{%- endfor %}
{%- if update.filters %}
{%- for filter in update.filters %}
    FILTER({{ filter | safe }})
{%- endfor %}
{%- endif %}
}
{%- elif update.operation == 'DELETE_WHERE' -%}
DELETE {
{%- for triple in update.delete %}
    {{ triple.subject | sparqlTerm(prefixes) }} {{ triple.predicate | sparqlTerm(prefixes) }} {{ triple.object | sparqlTerm(prefixes) }} .
{%- endfor %}
}
WHERE {
{%- for pattern in update.where %}
    {{ pattern.subject | sparqlTerm(prefixes) }} {{ pattern.predicate | sparqlTerm(prefixes) }} {{ pattern.object | sparqlTerm(prefixes) }} .
{%- endfor %}
{%- if update.filters %}
{%- for filter in update.filters %}
    FILTER({{ filter | safe }})
{%- endfor %}
{%- endif %}
}
{%- elif update.operation == 'MODIFY' -%}
DELETE {
{%- for triple in update.delete %}
    {{ triple.subject | sparqlTerm(prefixes) }} {{ triple.predicate | sparqlTerm(prefixes) }} {{ triple.object | sparqlTerm(prefixes) }} .
{%- endfor %}
}
INSERT {
{%- for triple in update.insert %}
    {{ triple.subject | sparqlTerm(prefixes) }} {{ triple.predicate | sparqlTerm(prefixes) }} {{ triple.object | sparqlTerm(prefixes) }} .
{%- endfor %}
}
WHERE {
{%- for pattern in update.where %}
    {{ pattern.subject | sparqlTerm(prefixes) }} {{ pattern.predicate | sparqlTerm(prefixes) }} {{ pattern.object | sparqlTerm(prefixes) }} .
{%- endfor %}
{%- if update.filters %}
{%- for filter in update.filters %}
    FILTER({{ filter | safe }})
{%- endfor %}
{%- endif %}
}
{%- endif %}

{% if not loop.last %}

{% endif %}
{% endfor -%}
{%- endif %}

# End of {{ querySetName | title }} Queries
# Generated on {{ moment().format('YYYY-MM-DD HH:mm:ss') }} by Unjucks
# Total queries: {{ (queries | length if queries else 0) + (analytics | length if analytics else 0) + (federatedQueries | length if federatedQueries else 0) + (reasoning | length if reasoning else 0) + (updates | length if updates else 0) }}
# Template: {{ templateFile | default('queries.sparql.njk') }}