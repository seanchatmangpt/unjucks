---
to: "{{ dataPath | default('data') }}/{{ instanceSetName | slug }}-instances.ttl"
inject: false
skipIf: false
chmod: 644
---
{%- set baseIRI = baseIRI | default('http://example.org/data/' + instanceSetName | slug) -%}
{%- set ontologyIRI = ontologyIRI | default('http://example.org/ontology/' + domain | slug) -%}
{%- set prefixes = prefixes | default({}) | merge({
  "": baseIRI + '#',
  "ont": ontologyIRI + '#',
  "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
  "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
  "xsd": "http://www.w3.org/2001/XMLSchema#",
  "dc": "http://purl.org/dc/elements/1.1/",
  "dcterms": "http://purl.org/dc/terms/",
  "prov": "http://www.w3.org/ns/prov#",
  "foaf": "http://xmlns.com/foaf/0.1/",
  "dcat": "http://www.w3.org/ns/dcat#",
  "void": "http://rdfs.org/ns/void#"
}) -%}
# {{ instanceSetName | title }} Data Instances
# Generated by Unjucks Semantic Data Generator
# Base IRI: {{ baseIRI }}
# Ontology: {{ ontologyIRI }}
# Dataset: {{ instanceSetName }}
# Generated: {{ moment().format('YYYY-MM-DD HH:mm:ss') }}

{% for prefix, uri in prefixes -%}
@prefix {{ prefix }}{% if prefix %}: {% endif %}<{{ uri }}> .
{% endfor %}

# Dataset Metadata
<{{ baseIRI }}> a void:Dataset, dcat:Dataset ;
    dc:title "{{ datasetTitle | default(instanceSetName | title + ' Data Instances') }}" ;
    dc:description "{{ datasetDescription | default('RDF data instances for the ' + instanceSetName + ' dataset') }}" ;
    dc:creator "{{ creator | default('Unjucks Generator') }}" ;
    dcterms:created "{{ createdDate | default(moment().format('YYYY-MM-DD')) }}"^^xsd:date ;
    dcterms:modified "{{ modifiedDate | default(moment().format('YYYY-MM-DD')) }}"^^xsd:date ;
    void:vocabulary <{{ ontologyIRI }}> ;
    {%- if instances %}
    void:triples {{ instances | length * 5 }}^^xsd:integer ;
    void:entities {{ instances | length }}^^xsd:integer ;
    {%- endif %}
    {%- if license %}
    dcterms:license <{{ license }}> ;
    {%- endif %}
    {%- if accessRights %}
    dcterms:accessRights "{{ accessRights }}" ;
    {%- endif %}
    prov:wasGeneratedBy [
        a prov:Activity ;
        prov:used "{{ templateFile | default('data-instances.ttl.njk') }}" ;
        prov:startedAtTime "{{ moment().format() }}"^^xsd:dateTime ;
        prov:wasAssociatedWith "Unjucks Semantic Generator" ;
    ] .

{% if instances -%}
#################################################################
#    Data Instances
#################################################################

{% for instance in instances -%}
{%- set instanceIRI = instance.iri | default(':' + (instance.id | default(instance.name | slug | camelize))) -%}
{{ instanceIRI }} a {% if instance.types %}{% for type in instance.types %}ont:{{ type | camelize }}{% if not loop.last %}, {% endif %}{% endfor %}{% else %}ont:Thing{% endif %} ;
    {%- if instance.label %}
    rdfs:label "{{ instance.label }}"{% if instance.language %}@{{ instance.language }}{% else %}@en{% endif %} ;
    {%- endif %}
    {%- if instance.comment %}
    rdfs:comment "{{ instance.comment }}"{% if instance.language %}@{{ instance.language }}{% else %}@en{% endif %} ;
    {%- endif %}
    {%- if instance.identifier %}
    dc:identifier "{{ instance.identifier }}" ;
    {%- endif %}
    {%- if instance.created %}
    dcterms:created "{{ instance.created | moment('YYYY-MM-DD') }}"^^xsd:date ;
    {%- endif %}
    {%- if instance.modified %}
    dcterms:modified "{{ instance.modified | moment('YYYY-MM-DD') }}"^^xsd:date ;
    {%- endif %}
    {%- if instance.source %}
    dcterms:source <{{ instance.source }}> ;
    {%- endif %}
    {%- for propName, propValue in instance.properties %}
    {%- if propValue is iterable and propValue is not string %}
    {%- for value in propValue %}
    ont:{{ propName | camelize }} {{ value | semanticValue(prefixes, instance.dataTypes[propName] if instance.dataTypes else 'auto') }} ;
    {%- endfor %}
    {%- else %}
    ont:{{ propName | camelize }} {{ propValue | semanticValue(prefixes, instance.dataTypes[propName] if instance.dataTypes else 'auto') }} ;
    {%- endif %}
    {%- endfor %}
    {%- if instance.relationships %}
    {%- for rel in instance.relationships %}
    ont:{{ rel.property | camelize }} {% if rel.target.startsWith('http') %}<{{ rel.target }}>{% else %}:{{ rel.target | camelize }}{% endif %} ;
    {%- endfor %}
    {%- endif %}
    {%- if instance.provenance %}
    prov:wasGeneratedBy [
        a prov:Activity ;
        {%- if instance.provenance.agent %}
        prov:wasAssociatedWith "{{ instance.provenance.agent }}" ;
        {%- endif %}
        {%- if instance.provenance.time %}
        prov:startedAtTime "{{ instance.provenance.time }}"^^xsd:dateTime ;
        {%- endif %}
        {%- if instance.provenance.source %}
        prov:used <{{ instance.provenance.source }}> ;
        {%- endif %}
    ] ;
    {%- endif %}
    {%- if instance.annotations %}
    {%- for annotation in instance.annotations %}
    {{ annotation.property | prefixedName(prefixes) }} {{ annotation.value | literalOrResource(prefixes) }} ;
    {%- endfor %}
    {%- endif %}
    {%- if instance.geospatial %}
    ont:hasGeometry [
        a ont:Geometry ;
        {%- if instance.geospatial.lat and instance.geospatial.lng %}
        ont:latitude "{{ instance.geospatial.lat }}"^^xsd:decimal ;
        ont:longitude "{{ instance.geospatial.lng }}"^^xsd:decimal ;
        {%- endif %}
        {%- if instance.geospatial.wkt %}
        ont:asWKT "{{ instance.geospatial.wkt }}"^^ont:wktLiteral ;
        {%- endif %}
        {%- if instance.geospatial.address %}
        ont:address "{{ instance.geospatial.address }}" ;
        {%- endif %}
    ] ;
    {%- endif %}
    {%- if instance.temporal %}
    {%- if instance.temporal.start %}
    ont:hasBeginning "{{ instance.temporal.start }}"^^xsd:dateTime ;
    {%- endif %}
    {%- if instance.temporal.end %}
    ont:hasEnd "{{ instance.temporal.end }}"^^xsd:dateTime ;
    {%- endif %}
    {%- if instance.temporal.duration %}
    ont:hasDuration "{{ instance.temporal.duration }}"^^xsd:duration ;
    {%- endif %}
    {%- endif %}
    .

{%- if instance.nestedInstances %}
{%- for nested in instance.nestedInstances %}
{%- set nestedIRI = nested.iri | default(':' + (nested.id | default(nested.name | slug | camelize))) -%}
{{ nestedIRI }} a ont:{{ nested.type | camelize }} ;
    rdfs:label "{{ nested.label | default(nested.name) }}"@en ;
    {%- if nested.comment %}
    rdfs:comment "{{ nested.comment }}"@en ;
    {%- endif %}
    {%- for propName, propValue in nested.properties %}
    ont:{{ propName | camelize }} {{ propValue | semanticValue(prefixes, 'auto') }} ;
    {%- endfor %}
    ont:isPartOf {{ instanceIRI }} .

{%- endfor %}
{%- endif %}

{% endfor %}
{%- endif %}

{% if collections -%}
#################################################################
#    Collections and Containers
#################################################################

{% for collection in collections -%}
:{{ collection.name | camelize }} a {% if collection.type == 'bag' %}rdf:Bag{% elif collection.type == 'seq' %}rdf:Seq{% elif collection.type == 'alt' %}rdf:Alt{% else %}rdf:Bag{% endif %} ;
    rdfs:label "{{ collection.label | default(collection.name | humanize) }}"@en ;
    {%- if collection.comment %}
    rdfs:comment "{{ collection.comment }}"@en ;
    {%- endif %}
    {%- for member in collection.members %}
    {%- if collection.type == 'seq' %}
    rdf:_{{ loop.index }} {% if member.startsWith('http') %}<{{ member }}>{% else %}:{{ member | camelize }}{% endif %} ;
    {%- else %}
    rdfs:member {% if member.startsWith('http') %}<{{ member }}>{% else %}:{{ member | camelize }}{% endif %} ;
    {%- endif %}
    {%- endfor %}
    .

{% endfor %}
{%- endif %}

{% if linkedData -%}
#################################################################
#    Linked Data Connections
#################################################################

{% for link in linkedData -%}
# Link to external resource: {{ link.description | default('External reference') }}
{% if link.sameAs %}
{%- for same in link.sameAs %}
:{{ link.local | camelize }} owl:sameAs <{{ same }}> .
{%- endfor %}
{%- endif %}
{% if link.seeAlso %}
{%- for see in link.seeAlso %}
:{{ link.local | camelize }} rdfs:seeAlso <{{ see }}> .
{%- endfor %}
{%- endif %}
{% if link.relatedMatch %}
{%- for related in link.relatedMatch %}
:{{ link.local | camelize }} skos:relatedMatch <{{ related }}> .
{%- endfor %}
{%- endif %}

{% endfor %}
{%- endif %}

{% if statistics -%}
#################################################################
#    Dataset Statistics
#################################################################

<{{ baseIRI }}#statistics> a void:Dataset ;
    rdfs:label "Dataset Statistics" ;
    void:triples {{ statistics.totalTriples | default(instances | length * 5) }}^^xsd:integer ;
    void:entities {{ statistics.totalEntities | default(instances | length) }}^^xsd:integer ;
    void:classes {{ statistics.totalClasses | default(10) }}^^xsd:integer ;
    void:properties {{ statistics.totalProperties | default(20) }}^^xsd:integer ;
    void:distinctSubjects {{ statistics.distinctSubjects | default(instances | length) }}^^xsd:integer ;
    void:distinctObjects {{ statistics.distinctObjects | default(instances | length * 2) }}^^xsd:integer ;
    {%- if statistics.classPartitions %}
    {%- for partition in statistics.classPartitions %}
    void:classPartition [
        void:class ont:{{ partition.class | camelize }} ;
        void:entities {{ partition.count }}^^xsd:integer ;
    ] ;
    {%- endfor %}
    {%- endif %}
    {%- if statistics.propertyPartitions %}
    {%- for partition in statistics.propertyPartitions %}
    void:propertyPartition [
        void:property ont:{{ partition.property | camelize }} ;
        void:triples {{ partition.count }}^^xsd:integer ;
    ] ;
    {%- endfor %}
    {%- endif %}
    .
{%- endif %}

# End of {{ instanceSetName | title }} Data Instances
# Generated on {{ moment().format('YYYY-MM-DD HH:mm:ss') }} by Unjucks
# Total instances: {{ instances | length if instances else 0 }}
# Template: {{ templateFile | default('data-instances.ttl.njk') }}