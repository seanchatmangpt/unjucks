---
to: "{{ ontologyPath | default('ontologies') }}/{{ domain | slug }}-ontology.ttl"
inject: false
skipIf: false
chmod: 644
---
{%- set baseIRI = baseIRI | default('http://example.org/ontology/' + domain | slug) -%}
{%- set versionIRI = versionIRI | default(baseIRI + '/v' + version | default('1.0.0')) -%}
{%- set prefixes = prefixes | default({}) | merge({
  "": baseIRI + '#',
  "owl": "http://www.w3.org/2002/07/owl#",
  "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
  "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
  "xsd": "http://www.w3.org/2001/XMLSchema#",
  "dc": "http://purl.org/dc/elements/1.1/",
  "dcterms": "http://purl.org/dc/terms/",
  "foaf": "http://xmlns.com/foaf/0.1/",
  "skos": "http://www.w3.org/2004/02/skos/core#",
  "prov": "http://www.w3.org/ns/prov#"
}) -%}
# {{ domain | title }} Domain Ontology
# Generated by Unjucks Semantic Template Generator
# Base IRI: {{ baseIRI }}
# Version: {{ version | default('1.0.0') }}
# Date: {{ generatedDate | default(moment().format('YYYY-MM-DD')) }}

{% for prefix, uri in prefixes -%}
@prefix {{ prefix }}{% if prefix %}: {% endif %}<{{ uri }}> .
{% endfor %}

# Ontology Declaration
<{{ baseIRI }}> a owl:Ontology ;
    owl:versionIRI <{{ versionIRI }}> ;
    dc:title "{{ ontologyTitle | default(domain | title + ' Domain Ontology') }}" ;
    dc:description "{{ ontologyDescription | default('Semantic model for the ' + domain + ' domain') }}" ;
    dc:creator "{{ creator | default('Unjucks Generator') }}" ;
    dcterms:created "{{ createdDate | default(moment().format('YYYY-MM-DD')) }}"^^xsd:date ;
    dcterms:modified "{{ modifiedDate | default(moment().format('YYYY-MM-DD')) }}"^^xsd:date ;
    owl:versionInfo "{{ version | default('1.0.0') }}" ;
    {%- if imports %}
    {%- for import in imports %}
    owl:imports <{{ import }}> ;
    {%- endfor %}
    {%- endif %}
    rdfs:comment "{{ comment | default('Automatically generated ontology for ' + domain + ' domain using Unjucks semantic templates') }}" .

{% if classes -%}
#################################################################
#    Classes
#################################################################

{% for class in classes -%}
:{{ class.name | camelize }} a owl:Class ;
    rdfs:label "{{ class.label | default(class.name | humanize) }}"@en ;
    {%- if class.comment %}
    rdfs:comment "{{ class.comment }}"@en ;
    {%- endif %}
    {%- if class.subClassOf %}
    rdfs:subClassOf {% if class.subClassOf is string %}:{{ class.subClassOf | camelize }}{% else %}{{ class.subClassOf | join(', :') | replace(',', ',\n                   :') }}{% endif %} ;
    {%- endif %}
    {%- if class.equivalentClass %}
    owl:equivalentClass :{{ class.equivalentClass | camelize }} ;
    {%- endif %}
    {%- if class.disjointWith %}
    owl:disjointWith {% if class.disjointWith is string %}:{{ class.disjointWith | camelize }}{% else %}{{ class.disjointWith | join(', :') | replace(',', ',\n                    :') }}{% endif %} ;
    {%- endif %}
    {%- if class.restrictions %}
    {%- for restriction in class.restrictions %}
    rdfs:subClassOf [ a owl:Restriction ;
                      owl:onProperty :{{ restriction.property | camelize }} ;
                      {%- if restriction.type == 'someValuesFrom' %}
                      owl:someValuesFrom {{ restriction.value | prefixedName(prefixes) }} ;
                      {%- elif restriction.type == 'allValuesFrom' %}
                      owl:allValuesFrom {{ restriction.value | prefixedName(prefixes) }} ;
                      {%- elif restriction.type == 'hasValue' %}
                      owl:hasValue {{ restriction.value | literalOrResource(prefixes) }} ;
                      {%- elif restriction.type == 'cardinality' %}
                      owl:cardinality {{ restriction.value }}^^xsd:nonNegativeInteger ;
                      {%- elif restriction.type == 'minCardinality' %}
                      owl:minCardinality {{ restriction.value }}^^xsd:nonNegativeInteger ;
                      {%- elif restriction.type == 'maxCardinality' %}
                      owl:maxCardinality {{ restriction.value }}^^xsd:nonNegativeInteger ;
                      {%- endif %}
                    ] ;
    {%- endfor %}
    {%- endif %}
    {%- if class.annotations %}
    {%- for annotation in class.annotations %}
    {{ annotation.property | prefixedName(prefixes) }} {{ annotation.value | literalOrResource(prefixes) }} ;
    {%- endfor %}
    {%- endif %}
    .

{% endfor %}
{%- endif %}

{% if properties -%}
#################################################################
#    Object Properties
#################################################################

{% for property in properties | selectattr('type', 'equalto', 'ObjectProperty') -%}
:{{ property.name | camelize }} a owl:ObjectProperty ;
    rdfs:label "{{ property.label | default(property.name | humanize) }}"@en ;
    {%- if property.comment %}
    rdfs:comment "{{ property.comment }}"@en ;
    {%- endif %}
    {%- if property.domain %}
    rdfs:domain {% if property.domain is string %}:{{ property.domain | camelize }}{% else %}[ a owl:Class ; owl:unionOf ( {% for d in property.domain %}:{{ d | camelize }} {% endfor %}) ]{% endif %} ;
    {%- endif %}
    {%- if property.range %}
    rdfs:range {% if property.range is string %}:{{ property.range | camelize }}{% else %}[ a owl:Class ; owl:unionOf ( {% for r in property.range %}:{{ r | camelize }} {% endfor %}) ]{% endif %} ;
    {%- endif %}
    {%- if property.subPropertyOf %}
    rdfs:subPropertyOf :{{ property.subPropertyOf | camelize }} ;
    {%- endif %}
    {%- if property.inverseOf %}
    owl:inverseOf :{{ property.inverseOf | camelize }} ;
    {%- endif %}
    {%- if property.characteristics %}
    {%- for char in property.characteristics %}
    a owl:{{ char | camelize }}Property ;
    {%- endfor %}
    {%- endif %}
    .

{% endfor %}

#################################################################
#    Data Properties
#################################################################

{% for property in properties | selectattr('type', 'equalto', 'DatatypeProperty') -%}
:{{ property.name | camelize }} a owl:DatatypeProperty ;
    rdfs:label "{{ property.label | default(property.name | humanize) }}"@en ;
    {%- if property.comment %}
    rdfs:comment "{{ property.comment }}"@en ;
    {%- endif %}
    {%- if property.domain %}
    rdfs:domain {% if property.domain is string %}:{{ property.domain | camelize }}{% else %}[ a owl:Class ; owl:unionOf ( {% for d in property.domain %}:{{ d | camelize }} {% endfor %}) ]{% endif %} ;
    {%- endif %}
    {%- if property.range %}
    rdfs:range {% if property.range is string %}{{ property.range | prefixedName(prefixes) }}{% else %}[ a rdfs:Datatype ; owl:unionOf ( {% for r in property.range %}{{ r | prefixedName(prefixes) }} {% endfor %}) ]{% endif %} ;
    {%- endif %}
    {%- if property.subPropertyOf %}
    rdfs:subPropertyOf :{{ property.subPropertyOf | camelize }} ;
    {%- endif %}
    {%- if property.characteristics %}
    {%- for char in property.characteristics %}
    a owl:{{ char | camelize }}Property ;
    {%- endfor %}
    {%- endif %}
    .

{% endfor %}
{%- endif %}

{% if individuals -%}
#################################################################
#    Named Individuals
#################################################################

{% for individual in individuals -%}
:{{ individual.name | camelize }} a {% if individual.classes %}{% for cls in individual.classes %}:{{ cls | camelize }}{% if not loop.last %}, {% endif %}{% endfor %}{% else %}owl:Thing{% endif %} ;
    rdfs:label "{{ individual.label | default(individual.name | humanize) }}"@en ;
    {%- if individual.comment %}
    rdfs:comment "{{ individual.comment }}"@en ;
    {%- endif %}
    {%- if individual.properties %}
    {%- for prop in individual.properties %}
    :{{ prop.name | camelize }} {{ prop.value | literalOrResource(prefixes) }} ;
    {%- endfor %}
    {%- endif %}
    {%- if individual.sameAs %}
    owl:sameAs {% for same in individual.sameAs %}{{ same | prefixedName(prefixes) }}{% if not loop.last %}, {% endif %}{% endfor %} ;
    {%- endif %}
    {%- if individual.differentFrom %}
    owl:differentFrom {% for diff in individual.differentFrom %}:{{ diff | camelize }}{% if not loop.last %}, {% endif %}{% endfor %} ;
    {%- endif %}
    .

{% endfor %}
{%- endif %}

{% if rules -%}
#################################################################
#    Rules (SWRL)
#################################################################

{% for rule in rules -%}
# Rule: {{ rule.name | humanize }}
# {{ rule.description | default('No description provided') }}
[ a <http://www.w3.org/2003/11/swrl#Imp> ;
  <http://www.w3.org/2003/11/swrl#body> (
    {%- for atom in rule.body %}
    [ a <http://www.w3.org/2003/11/swrl#{{ atom.type }}Atom> ;
      {%- if atom.type == 'Class' %}
      <http://www.w3.org/2003/11/swrl#classPredicate> :{{ atom.class | camelize }} ;
      <http://www.w3.org/2003/11/swrl#argument1> <{{ atom.variable }}> ;
      {%- elif atom.type == 'DatavaluedProperty' %}
      <http://www.w3.org/2003/11/swrl#propertyPredicate> :{{ atom.property | camelize }} ;
      <http://www.w3.org/2003/11/swrl#argument1> <{{ atom.subject }}> ;
      <http://www.w3.org/2003/11/swrl#argument2> <{{ atom.object }}> ;
      {%- elif atom.type == 'IndividualProperty' %}
      <http://www.w3.org/2003/11/swrl#propertyPredicate> :{{ atom.property | camelize }} ;
      <http://www.w3.org/2003/11/swrl#argument1> <{{ atom.subject }}> ;
      <http://www.w3.org/2003/11/swrl#argument2> <{{ atom.object }}> ;
      {%- endif %}
    ]{% if not loop.last %} {% endif %}
    {%- endfor %}
  ) ;
  <http://www.w3.org/2003/11/swrl#head> (
    {%- for atom in rule.head %}
    [ a <http://www.w3.org/2003/11/swrl#{{ atom.type }}Atom> ;
      {%- if atom.type == 'Class' %}
      <http://www.w3.org/2003/11/swrl#classPredicate> :{{ atom.class | camelize }} ;
      <http://www.w3.org/2003/11/swrl#argument1> <{{ atom.variable }}> ;
      {%- elif atom.type == 'DatavaluedProperty' %}
      <http://www.w3.org/2003/11/swrl#propertyPredicate> :{{ atom.property | camelize }} ;
      <http://www.w3.org/2003/11/swrl#argument1> <{{ atom.subject }}> ;
      <http://www.w3.org/2003/11/swrl#argument2> <{{ atom.object }}> ;
      {%- elif atom.type == 'IndividualProperty' %}
      <http://www.w3.org/2003/11/swrl#propertyPredicate> :{{ atom.property | camelize }} ;
      <http://www.w3.org/2003/11/swrl#argument1> <{{ atom.subject }}> ;
      <http://www.w3.org/2003/11/swrl#argument2> <{{ atom.object }}> ;
      {%- endif %}
    ]{% if not loop.last %} {% endif %}
    {%- endfor %}
  )
] .

{% endfor %}
{%- endif %}

# End of {{ domain | title }} Ontology
# Generated on {{ moment().format('YYYY-MM-DD HH:mm:ss') }} by Unjucks