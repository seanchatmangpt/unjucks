---
to: <%= domain || 'library-management' %>-ontology.ttl
inject: false
sh: echo "Generated <%= domain || 'library-management' %> ontology with OWL classes and inference rules"
---
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dc: <http://purl.org/dc/terms/> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix : <http://example.org/<%= domain || 'library-management' %>/> .
@prefix lib: <http://example.org/<%= domain || 'library-management' %>/> .

# =============================================
# <%= (domain || 'Library Management') | title %> Domain Ontology
# =============================================

:<%= (domain || 'library-management') | camelize %>Ontology a owl:Ontology ;
    dc:title "<%= (domain || 'Library Management') | title %> Domain Ontology" ;
    dc:description "A comprehensive ontology for modeling <%= domain || 'library management' %> domain concepts with OWL classes, properties, and inference rules." ;
    dc:created "<%= new Date().toISOString().split('T')[0] %>"^^xsd:date ;
    dc:creator "<%= author || 'Unjucks Semantic Generator' %>" ;
    owl:versionInfo "<%= version || '1.0.0' %>" ;
    prov:wasGeneratedBy [
        a prov:Activity ;
        prov:used "unjucks generate ontology <%= domain || 'library-management' %>" ;
        prov:startedAtTime "<%= new Date().toISOString() %>"^^xsd:dateTime
    ] .

# =============================================
# Core Entity Classes
# =============================================

{% if withInferences %}# Book Class with inference support{% else %}# Book Class{% endif %}
lib:Book a owl:Class ;
    rdfs:label "Book"@en ;
    rdfs:comment "A physical or digital book in the library collection."@en ;
    {% if withValidation %}sh:rule [
        a sh:SPARQLRule ;
        sh:construct """
        CONSTRUCT {
            ?book lib:status lib:Available .
        } WHERE {
            ?book a lib:Book .
            FILTER NOT EXISTS { ?book lib:status ?status }
        }
        """
    ] ;{% endif %}
    owl:equivalentClass [
        a owl:Restriction ;
        owl:onProperty lib:hasISBN ;
        owl:someValuesFrom xsd:string
    ] .

# Author Class with cardinality restrictions
lib:Author a owl:Class ;
    rdfs:label "Author"@en ;
    rdfs:comment "A person who has authored one or more books."@en ;
    owl:equivalentClass [
        a owl:Restriction ;
        owl:onProperty lib:hasName ;
        owl:cardinality 1
    ] .

# Publisher Class
lib:Publisher a owl:Class ;
    rdfs:label "Publisher"@en ;
    rdfs:comment "An organization that publishes books."@en ;
    rdfs:subClassOf [
        a owl:Restriction ;
        owl:onProperty lib:publishedDate ;
        owl:allValuesFrom xsd:date
    ] .

# Library Member Class  
lib:LibraryMember a owl:Class ;
    rdfs:label "Library Member"@en ;
    rdfs:comment "A person who is registered as a library member."@en ;
    owl:equivalentClass [
        a owl:Restriction ;
        owl:onProperty lib:hasMemberId ;
        owl:cardinality 1
    ] .

# Loan Transaction Class
lib:LoanTransaction a owl:Class ;
    rdfs:label "Loan Transaction"@en ;
    rdfs:comment "A record of a book being borrowed by a library member."@en ;
    rdfs:subClassOf [
        a owl:Restriction ;
        owl:onProperty lib:loanDate ;
        owl:cardinality 1
    ] .

# =============================================
# Object Properties (Relations)
# =============================================

# Book-Author relationship
lib:hasAuthor a owl:ObjectProperty ;
    rdfs:label "has author"@en ;
    rdfs:domain lib:Book ;
    rdfs:range lib:Author ;
    owl:inverseOf lib:authorOf .

lib:authorOf a owl:ObjectProperty ;
    rdfs:label "author of"@en ;
    rdfs:domain lib:Author ;
    rdfs:range lib:Book .

# Book-Publisher relationship
lib:hasPublisher a owl:ObjectProperty ;
    rdfs:label "has publisher"@en ;
    rdfs:domain lib:Book ;
    rdfs:range lib:Publisher ;
    owl:inverseOf lib:publishes .

lib:publishes a owl:ObjectProperty ;
    rdfs:label "publishes"@en ;
    rdfs:domain lib:Publisher ;
    rdfs:range lib:Book .

# Loan relationships
lib:borrowedBy a owl:ObjectProperty ;
    rdfs:label "borrowed by"@en ;
    rdfs:domain lib:Book ;
    rdfs:range lib:LibraryMember ;
    owl:inverseOf lib:hasBorrowed .

lib:hasBorrowed a owl:ObjectProperty ;
    rdfs:label "has borrowed"@en ;
    rdfs:domain lib:LibraryMember ;
    rdfs:range lib:Book .

lib:hasLoanTransaction a owl:ObjectProperty ;
    rdfs:label "has loan transaction"@en ;
    rdfs:domain lib:Book ;
    rdfs:range lib:LoanTransaction .

# =============================================
# Data Properties
# =============================================

# Book properties
lib:hasISBN a owl:DatatypeProperty, owl:FunctionalProperty ;
    rdfs:label "has ISBN"@en ;
    rdfs:domain lib:Book ;
    rdfs:range xsd:string ;
    owl:cardinality 1 .

lib:hasTitle a owl:DatatypeProperty, owl:FunctionalProperty ;
    rdfs:label "has title"@en ;
    rdfs:domain lib:Book ;
    rdfs:range xsd:string ;
    owl:cardinality 1 .

lib:publicationYear a owl:DatatypeProperty ;
    rdfs:label "publication year"@en ;
    rdfs:domain lib:Book ;
    rdfs:range xsd:gYear .

lib:pageCount a owl:DatatypeProperty ;
    rdfs:label "page count"@en ;
    rdfs:domain lib:Book ;
    rdfs:range xsd:positiveInteger .

# Author properties
lib:hasName a owl:DatatypeProperty, owl:FunctionalProperty ;
    rdfs:label "has name"@en ;
    rdfs:domain lib:Author ;
    rdfs:range xsd:string ;
    owl:cardinality 1 .

lib:birthDate a owl:DatatypeProperty ;
    rdfs:label "birth date"@en ;
    rdfs:domain lib:Author ;
    rdfs:range xsd:date .

# Publisher properties
lib:publisherName a owl:DatatypeProperty, owl:FunctionalProperty ;
    rdfs:label "publisher name"@en ;
    rdfs:domain lib:Publisher ;
    rdfs:range xsd:string .

lib:foundedYear a owl:DatatypeProperty ;
    rdfs:label "founded year"@en ;
    rdfs:domain lib:Publisher ;
    rdfs:range xsd:gYear .

# Library Member properties
lib:hasMemberId a owl:DatatypeProperty, owl:FunctionalProperty ;
    rdfs:label "has member ID"@en ;
    rdfs:domain lib:LibraryMember ;
    rdfs:range xsd:string .

lib:memberName a owl:DatatypeProperty ;
    rdfs:label "member name"@en ;
    rdfs:domain lib:LibraryMember ;
    rdfs:range xsd:string .

lib:membershipDate a owl:DatatypeProperty ;
    rdfs:label "membership date"@en ;
    rdfs:domain lib:LibraryMember ;
    rdfs:range xsd:date .

# Loan Transaction properties
lib:loanDate a owl:DatatypeProperty ;
    rdfs:label "loan date"@en ;
    rdfs:domain lib:LoanTransaction ;
    rdfs:range xsd:dateTime .

lib:dueDate a owl:DatatypeProperty ;
    rdfs:label "due date"@en ;
    rdfs:domain lib:LoanTransaction ;
    rdfs:range xsd:dateTime .

lib:returnDate a owl:DatatypeProperty ;
    rdfs:label "return date"@en ;
    rdfs:domain lib:LoanTransaction ;
    rdfs:range xsd:dateTime .

{% if withInferences %}
# =============================================
# Inference Rules (SWRL-style in OWL)
# =============================================

# Rule: If a book is borrowed and due date has passed, it's overdue
lib:OverdueRule a owl:Class ;
    rdfs:label "Overdue Rule"@en ;
    owl:equivalentClass [
        a owl:Restriction ;
        owl:onProperty lib:hasLoanTransaction ;
        owl:someValuesFrom [
            a owl:Restriction ;
            owl:onProperty lib:dueDate ;
            owl:hasValue "now"^^xsd:dateTime  # This would be dynamically evaluated
        ]
    ] .

# Derived property: Popular Author (has authored more than 5 books)
lib:PopularAuthor a owl:Class ;
    rdfs:label "Popular Author"@en ;
    rdfs:subClassOf lib:Author ;
    owl:equivalentClass [
        a owl:Restriction ;
        owl:onProperty lib:authorOf ;
        owl:minCardinality 5
    ] .

# Derived property: Recent Book (published in last 5 years)
lib:RecentBook a owl:Class ;
    rdfs:label "Recent Book"@en ;
    rdfs:subClassOf lib:Book ;
    owl:equivalentClass [
        a owl:Restriction ;
        owl:onProperty lib:publicationYear ;
        owl:someValuesFrom [
            a rdfs:Datatype ;
            owl:onDatatype xsd:gYear ;
            owl:withRestrictions (
                [ xsd:minInclusive "2019"^^xsd:gYear ]
            )
        ]
    ] .
{% endif %}

{% if withValidation %}
# =============================================
# SHACL Validation Shapes (Integrated)
# =============================================

lib:BookShape a sh:NodeShape ;
    sh:targetClass lib:Book ;
    sh:property [
        sh:path lib:hasISBN ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:pattern "^\\d{3}-\\d{1,5}-\\d{1,7}-\\d{1,7}-[0-9X]$" ;
        sh:message "Invalid ISBN format. Must follow ISBN-13 pattern." ;
    ] ;
    sh:property [
        sh:path lib:hasTitle ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 1 ;
        sh:message "Book must have exactly one non-empty title." ;
    ] ;
    sh:property [
        sh:path lib:hasAuthor ;
        sh:class lib:Author ;
        sh:minCount 1 ;
        sh:message "Book must have at least one author." ;
    ] .

lib:AuthorShape a sh:NodeShape ;
    sh:targetClass lib:Author ;
    sh:property [
        sh:path lib:hasName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 2 ;
        sh:message "Author must have exactly one name with at least 2 characters." ;
    ] .

lib:LoanTransactionShape a sh:NodeShape ;
    sh:targetClass lib:LoanTransaction ;
    sh:property [
        sh:path lib:loanDate ;
        sh:datatype xsd:dateTime ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Loan transaction must have exactly one loan date." ;
    ] ;
    sh:property [
        sh:path lib:dueDate ;
        sh:datatype xsd:dateTime ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Loan transaction must have exactly one due date." ;
    ] ;
    sh:sparql [
        sh:message "Due date must be after loan date." ;
        sh:prefixes lib: ;
        sh:select """
        SELECT ?this
        WHERE {
            ?this lib:loanDate ?loanDate ;
                  lib:dueDate ?dueDate .
            FILTER (?dueDate <= ?loanDate)
        }
        """ ;
    ] .
{% endif %}

# =============================================
# Sample Individuals (for testing)
# =============================================

{% if withInferences or withValidation %}
# Sample Book
lib:book_1984 a lib:Book ;
    lib:hasISBN "978-0-452-28423-4" ;
    lib:hasTitle "1984" ;
    lib:publicationYear "1949"^^xsd:gYear ;
    lib:pageCount 328 ;
    lib:hasAuthor lib:george_orwell ;
    lib:hasPublisher lib:harcourt_brace .

# Sample Author
lib:george_orwell a lib:Author ;
    lib:hasName "George Orwell" ;
    lib:birthDate "1903-06-25"^^xsd:date ;
    lib:authorOf lib:book_1984 .

# Sample Publisher
lib:harcourt_brace a lib:Publisher ;
    lib:publisherName "Harcourt Brace Jovanovich" ;
    lib:foundedYear "1919"^^xsd:gYear ;
    lib:publishes lib:book_1984 .

# Sample Library Member
lib:member_001 a lib:LibraryMember ;
    lib:hasMemberId "LM001" ;
    lib:memberName "Alice Johnson" ;
    lib:membershipDate "2020-01-15"^^xsd:date .

# Sample Loan Transaction
lib:loan_001 a lib:LoanTransaction ;
    lib:loanDate "2024-09-01T10:30:00Z"^^xsd:dateTime ;
    lib:dueDate "2024-09-15T23:59:59Z"^^xsd:dateTime ;
    lib:borrowedBy lib:member_001 ;
    lib:hasLoanTransaction lib:book_1984 .
{% endif %}

# =============================================
# End of Ontology
# =============================================