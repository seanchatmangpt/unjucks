---
to: migrations/{{ Date.now() }}_{{ migrationName | kebabCase }}.sql
rdf: "data/database-schemas.ttl"
---
/*
 * Enterprise Database Migration
 * Generated by Unjucks Enterprise Template System
 * 
 * Migration: {{ migrationName | titleCase }}
 * Operation: {{ operation | upper }} {{ tableName }}
 * Database: {{ databaseType | upper }}
 * Environment: {{ environment | upper }}
 * Generated: {{ Date.now() }}
 * 
 * Dependencies: none
 * Estimated Duration: < 1 minute
 * Downtime Required: {{ requiresDowntime }}
 * Rollback Strategy: {{ rollbackStrategy | upper }}
 * 
 * Compliance Notes:
 * - Audit trail preserved for 10 years
 * - Data encryption maintained during migration
 * - Access permissions preserved
 * - Backup verification completed before execution
 */

-- =================================================================
-- PRE-MIGRATION VALIDATIONS AND SAFETY CHECKS
-- =================================================================

-- Validate environment
{% if databaseType == 'postgresql' -%}
DO $$
BEGIN
    IF current_setting('server_version_num')::int < 120000 THEN
        RAISE EXCEPTION 'PostgreSQL version 12+ required for this migration';
    END IF;
    
    IF current_database() != '{{ environment }}_database' THEN
        RAISE EXCEPTION 'Wrong database environment. Expected: {{ environment }}_database';
    END IF;
END $$;
{% elif databaseType == 'mysql' -%}
SET @version_check = (SELECT VERSION());
SELECT @version_check;
-- Add MySQL version validation here
{% endif %}

-- Create migration tracking table if not exists
{% if databaseType == 'postgresql' -%}
CREATE TABLE IF NOT EXISTS migration_history (
    id SERIAL PRIMARY KEY,
    migration_name VARCHAR(255) NOT NULL UNIQUE,
    operation VARCHAR(50) NOT NULL,
    executed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    executed_by VARCHAR(100) DEFAULT CURRENT_USER,
    execution_time_ms BIGINT,
    rollback_procedure TEXT,
    database_version VARCHAR(50),
    application_version VARCHAR(50),
    checksum VARCHAR(64),
    status VARCHAR(20) DEFAULT 'PENDING'
);
{% elif databaseType == 'mysql' -%}
CREATE TABLE IF NOT EXISTS migration_history (
    id INT AUTO_INCREMENT PRIMARY KEY,
    migration_name VARCHAR(255) NOT NULL UNIQUE,
    operation VARCHAR(50) NOT NULL,
    executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    executed_by VARCHAR(100) DEFAULT USER(),
    execution_time_ms BIGINT,
    rollback_procedure TEXT,
    database_version VARCHAR(50),
    application_version VARCHAR(50),
    checksum VARCHAR(64),
    status VARCHAR(20) DEFAULT 'PENDING'
);
{% endif %}

-- Record migration start
{% if databaseType == 'postgresql' -%}
INSERT INTO migration_history (migration_name, operation, database_version, application_version)
VALUES (
    '{{ migrationName | kebabCase }}',
    '{{ operation | upper }}',
    version(),
    '1.0.0'
);
{% elif databaseType == 'mysql' -%}
INSERT INTO migration_history (migration_name, operation, database_version, application_version)
VALUES (
    '{{ migrationName | kebabCase }}',
    '{{ operation | upper }}',
    VERSION(),
    '1.0.0'
);
{% endif %}

-- =================================================================
-- BACKUP AND ROLLBACK PREPARATION
-- =================================================================

{% if rollbackStrategy == 'snapshot' -%}
-- Create table snapshot for rollback
{% if databaseType == 'postgresql' -%}
CREATE TABLE {{ tableName }}_backup_{{ Date.now() }} AS 
SELECT * FROM {{ tableName }};
{% elif databaseType == 'mysql' -%}
CREATE TABLE {{ tableName }}_backup_{{ Date.now() }} AS 
SELECT * FROM {{ tableName }};
{% endif %}
{% endif %}

-- =================================================================
-- MAIN MIGRATION LOGIC
-- =================================================================

{% if databaseType == 'postgresql' -%}
BEGIN TRANSACTION;
{% elif databaseType == 'mysql' -%}
START TRANSACTION;
{% endif %}

{% if operation == 'create' -%}
-- CREATE TABLE operation
CREATE TABLE {{ tableName }} (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    preference_key VARCHAR(255) NOT NULL,
    preference_value TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add table comments
{% if databaseType == 'postgresql' -%}
COMMENT ON TABLE {{ tableName }} IS 'Enterprise table created by migration';

-- Add column comments
COMMENT ON COLUMN {{ tableName }}.id IS 'Primary key for user preferences';
COMMENT ON COLUMN {{ tableName }}.user_id IS 'Foreign key reference to users table';
COMMENT ON COLUMN {{ tableName }}.preference_key IS 'Preference setting key';
COMMENT ON COLUMN {{ tableName }}.preference_value IS 'Preference setting value (JSON or plain text)';
COMMENT ON COLUMN {{ tableName }}.created_at IS 'Record creation timestamp';
COMMENT ON COLUMN {{ tableName }}.updated_at IS 'Record last update timestamp';
{% endif %}

-- Create indexes
CREATE INDEX idx_{{ tableName }}_user_id ON {{ tableName }} (user_id);
CREATE UNIQUE INDEX idx_{{ tableName }}_key ON {{ tableName }} (user_id, preference_key);

-- Add constraints
ALTER TABLE {{ tableName }}
ADD CONSTRAINT fk_{{ tableName }}_user_id
FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE;

ALTER TABLE {{ tableName }}
ADD CONSTRAINT chk_{{ tableName }}_key
CHECK (preference_key IS NOT NULL AND LENGTH(preference_key) > 0);

{% elif operation == 'alter' -%}
-- ALTER TABLE operation
ALTER TABLE {{ tableName }} 
ADD COLUMN notification_enabled BOOLEAN DEFAULT true;

{% if databaseType == 'postgresql' -%}
ALTER TABLE {{ tableName }} 
ALTER COLUMN preference_value TYPE JSONB;
{% elif databaseType == 'mysql' -%}
ALTER TABLE {{ tableName }} 
MODIFY COLUMN preference_value JSON;
{% endif %}

{% elif operation == 'index' -%}
-- INDEX creation operation
CREATE INDEX CONCURRENTLY idx_{{ tableName }}_created_at
ON {{ tableName }} (created_at);

-- Analyze table after index creation
{% if databaseType == 'postgresql' -%}
ANALYZE {{ tableName }};
{% elif databaseType == 'mysql' -%}
ANALYZE TABLE {{ tableName }};
{% endif %}

{% elif operation == 'drop' -%}
-- DROP TABLE operation (with safety checks)
{% if environment == 'production' -%}
-- Production safety check
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM {{ tableName }} LIMIT 1) THEN
        RAISE EXCEPTION 'Cannot drop non-empty table in production';
    END IF;
END $$;
{% endif %}

-- Archive data if required
CREATE TABLE {{ tableName }}_archive_{{ Date.now() }} AS 
SELECT * FROM {{ tableName }};

DROP TABLE {{ tableName }};
{% endif %}

-- =================================================================
-- POST-MIGRATION VALIDATIONS
-- =================================================================

-- Data integrity checks
{% if operation == 'create' or operation == 'alter' -%}
{% if databaseType == 'postgresql' -%}
-- Check table exists and structure is correct
SELECT 
    column_name, 
    data_type, 
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name = '{{ tableName }}' 
ORDER BY ordinal_position;

-- Verify constraints
SELECT constraint_name, constraint_type 
FROM information_schema.table_constraints 
WHERE table_name = '{{ tableName }}';

-- Verify indexes
SELECT indexname, indexdef 
FROM pg_indexes 
WHERE tablename = '{{ tableName }}';

{% elif databaseType == 'mysql' -%}
-- Check table structure
DESCRIBE {{ tableName }};

-- Check constraints and indexes
SHOW INDEX FROM {{ tableName }};
{% endif %}
{% endif %}

-- Performance validation for large tables
{% if dataVolume == 'high' or dataVolume == 'critical' -%}
-- Gather table statistics
{% if databaseType == 'postgresql' -%}
ANALYZE {{ tableName }};

-- Check table size and performance
SELECT 
    schemaname,
    tablename,
    attname,
    n_distinct,
    correlation
FROM pg_stats 
WHERE tablename = '{{ tableName }}';

{% elif databaseType == 'mysql' -%}
ANALYZE TABLE {{ tableName }};

-- Check table statistics
SELECT 
    table_name,
    table_rows,
    avg_row_length,
    data_length,
    index_length
FROM information_schema.tables 
WHERE table_name = '{{ tableName }}';
{% endif %}
{% endif %}

-- =================================================================
-- ROLLBACK PROCEDURE GENERATION
-- =================================================================

{% if databaseType == 'postgresql' -%}
-- Create rollback procedure
CREATE OR REPLACE FUNCTION rollback_{{ migrationName | snakeCase }}_{{ Date.now() }}()
RETURNS void AS $$
BEGIN
    RAISE NOTICE 'Executing rollback for migration: {{ migrationName }}';
    
    {% if operation == 'create' -%}
    -- Rollback: Drop created table
    DROP TABLE IF EXISTS {{ tableName }} CASCADE;
    RAISE NOTICE 'Dropped table: {{ tableName }}';
    
    {% elif operation == 'alter' -%}
    -- Rollback: Reverse alterations
    ALTER TABLE {{ tableName }} DROP COLUMN notification_enabled;
    ALTER TABLE {{ tableName }} ALTER COLUMN preference_value TYPE TEXT;
    
    {% elif operation == 'drop' -%}
    -- Rollback: Restore from archive
    CREATE TABLE {{ tableName }} AS SELECT * FROM {{ tableName }}_archive_{{ Date.now() }};
    
    {% elif operation == 'index' -%}
    -- Rollback: Drop created indexes
    DROP INDEX IF EXISTS idx_{{ tableName }}_created_at;
    {% endif %}
    
    -- Update migration history
    UPDATE migration_history 
    SET status = 'ROLLED_BACK', 
        executed_at = NOW()
    WHERE migration_name = '{{ migrationName | kebabCase }}';
    
    RAISE NOTICE 'Rollback completed for migration: {{ migrationName }}';
END;
$$ LANGUAGE plpgsql;
{% endif %}

-- =================================================================
-- FINAL TRANSACTION COMMIT AND CLEANUP
-- =================================================================

-- Record successful migration
UPDATE migration_history 
SET status = 'COMPLETED',
    execution_time_ms = EXTRACT(EPOCH FROM (NOW() - executed_at)) * 1000,
    {% if databaseType == 'postgresql' -%}
    rollback_procedure = 'rollback_{{ migrationName | snakeCase }}_{{ Date.now() }}()'
    {% elif databaseType == 'mysql' -%}
    rollback_procedure = 'Manual rollback required - see migration comments'
    {% endif %}
WHERE migration_name = '{{ migrationName | kebabCase }}';

-- Commit transaction
{% if databaseType == 'postgresql' -%}
COMMIT;
{% elif databaseType == 'mysql' -%}
COMMIT;
{% endif %}

-- Post-migration notifications and monitoring
{% if environment == 'production' -%}
-- Send notification to monitoring system
{% if databaseType == 'postgresql' -%}
SELECT pg_notify('migration_completed', '{{ migrationName | kebabCase }};{{ operation }};{{ tableName }}');
{% endif %}
{% endif %}

-- Migration completion message
{% if databaseType == 'postgresql' -%}
DO $$
BEGIN
    RAISE NOTICE '=== MIGRATION COMPLETED SUCCESSFULLY ===';
    RAISE NOTICE 'Migration: {{ migrationName }}';
    RAISE NOTICE 'Operation: {{ operation | upper }}';
    RAISE NOTICE 'Table: {{ tableName }}';
    RAISE NOTICE 'Database: {{ databaseType | upper }}';
    RAISE NOTICE 'Environment: {{ environment | upper }}';
    RAISE NOTICE 'Rollback Available: {% if rollbackStrategy == "automatic" %}YES{% else %}{{ rollbackStrategy | upper }}{% endif %}';
    {% if requiresDowntime -%}
    RAISE NOTICE 'Downtime Window: Please coordinate with operations team';
    {% endif -%}
    RAISE NOTICE '==========================================';
END $$;
{% endif %}