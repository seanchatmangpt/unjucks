---
to: "{{ outputDir }}/.env.example"
inject: false
---
# {{ appName || "OpenAPI Nuxt Application" }} - Environment Variables

# API Configuration
API_BASE_URL={{ baseUrl || "http://localhost:3001" }}

{% if authProvider === 'jwt' %}
# JWT Authentication
JWT_SECRET=your-jwt-secret-key-here-make-it-long-and-secure

# Optional JWT settings
JWT_EXPIRES_IN=7d
JWT_REFRESH_EXPIRES_IN=30d
JWT_ALGORITHM=HS256

{% elif authProvider === 'oauth2' %}
# OAuth2 Configuration
OAUTH_CLIENT_ID=your-oauth-client-id
OAUTH_CLIENT_SECRET=your-oauth-client-secret
OAUTH_AUTH_URL=https://auth.provider.com/oauth/authorize
OAUTH_TOKEN_URL=https://auth.provider.com/oauth/token
OAUTH_REDIRECT_URI=http://localhost:3000/auth/callback
OAUTH_SCOPES=read,write

{% elif authProvider === 'apiKey' %}
# API Key Configuration
API_KEY_SECRET=your-api-key-secret
API_KEY_HEADER_NAME=X-API-Key
API_KEY_QUERY_PARAM=apikey

{% elif authProvider === 'openIdConnect' %}
# OpenID Connect Configuration
OPENID_CONNECT_URL=https://auth.provider.com/.well-known/openid_configuration
OPENID_CLIENT_ID=your-openid-client-id
OPENID_CLIENT_SECRET=your-openid-client-secret
OPENID_REDIRECT_URI=http://localhost:3000/auth/callback

{% endif %}
{% if enableRealtime %}
# WebSocket Configuration
WEBSOCKET_URL=ws://localhost:3001
WEBSOCKET_PATH=/ws
WEBSOCKET_TRANSPORTS=websocket,polling

{% endif %}
{% if enableCaching %}
# Caching Configuration
CACHE_TTL=300
CACHE_MAX_SIZE=1000
REDIS_URL=redis://localhost:6379

{% endif %}
{% if enableOpenTelemetry %}
# OpenTelemetry Configuration
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
OTEL_SERVICE_NAME={{ appName | kebabCase || 'openapi-nuxt-app' }}
OTEL_SERVICE_VERSION=1.0.0
OTEL_RESOURCE_ATTRIBUTES=service.name={{ appName | kebabCase || 'openapi-nuxt-app' }},service.version=1.0.0

{% endif %}
{% if enableMetrics %}
# Metrics and Monitoring
METRICS_ENABLED=true
METRICS_PORT=9090
PROMETHEUS_ENDPOINT=/metrics

# External monitoring services
SENTRY_DSN=your-sentry-dsn-here
DATADOG_API_KEY=your-datadog-api-key

{% endif %}
# Database Configuration (if using server-side storage)
DATABASE_URL=postgresql://username:password@localhost:5432/database
DATABASE_SSL=false

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# CORS Configuration
CORS_ORIGIN=*
CORS_METHODS=GET,HEAD,PUT,PATCH,POST,DELETE
CORS_ALLOWED_HEADERS=Content-Type,Authorization

# Security
HELMET_ENABLED=true
CSRF_SECRET=your-csrf-secret-here

{% if enablePWA %}
# PWA Configuration
PWA_MANIFEST_URL=/manifest.json
PWA_SW_URL=/sw.js
PWA_OFFLINE_FALLBACK=/offline.html

{% endif %}
{% if generateTests %}
# Testing Configuration
TEST_API_BASE_URL=http://localhost:3001
TEST_TIMEOUT=30000
PLAYWRIGHT_BASE_URL=http://localhost:3000

{% endif %}
# Development
NODE_ENV=development
DEBUG=false
LOG_LEVEL=info

# Build Configuration
NITRO_PRESET={{ generateNitroPreset || 'node-server' }}
{% if buildTarget === 'static' %}
NITRO_PRERENDER=true
{% endif %}

# Deployment
HOST=0.0.0.0
PORT=3000

{% if generateNitroPreset === 'vercel' %}
# Vercel Configuration
VERCEL_URL=
VERCEL_ENV=

{% elif generateNitroPreset === 'netlify' %}
# Netlify Configuration
NETLIFY_SITE_ID=
DEPLOY_URL=

{% elif generateNitroPreset === 'cloudflare' %}
# Cloudflare Configuration
CF_PAGES=true
CF_PAGES_URL=

{% endif %}
# External Services
MAIL_FROM=noreply@example.com
MAIL_HOST=smtp.example.com
MAIL_PORT=587
MAIL_USER=
MAIL_PASS=

# File Storage
STORAGE_TYPE=local
S3_BUCKET=
S3_REGION=
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=

# Feature Flags
{% if enableStreaming %}
ENABLE_STREAMING={{ enableStreaming | tojson }}
{% endif %}
{% if enableRealtime %}
ENABLE_REALTIME={{ enableRealtime | tojson }}
{% endif %}
{% if enableCaching %}
ENABLE_CACHING={{ enableCaching | tojson }}
{% endif %}
{% if enableOptimisticUpdates %}
ENABLE_OPTIMISTIC_UPDATES={{ enableOptimisticUpdates | tojson }}
{% endif %}
{% if enableSemanticAnnotations %}
ENABLE_SEMANTIC_ANNOTATIONS={{ enableSemanticAnnotations | tojson }}
{% endif %}

# Custom Configuration
CUSTOM_FEATURE_FLAG_1=false
CUSTOM_API_TIMEOUT=30000
CUSTOM_BATCH_SIZE=100