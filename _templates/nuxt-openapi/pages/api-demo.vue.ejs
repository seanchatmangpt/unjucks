---
to: pages/{{ serviceName | kebabCase }}/demo.vue
skipIf: "{{ skipIf }}"
---
<template>
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <header class="bg-white shadow">
      <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 class="text-3xl font-bold text-gray-900">
          {{ serviceName }} API Demo
        </h1>
        <p class="text-gray-600 mt-2">
          Interactive demo of generated API integration
        </p>
      </div>
    </header>

    <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
      <!-- Authentication Status -->
      <div class="mb-6">
        <div class="bg-white overflow-hidden shadow rounded-lg">
          <div class="px-4 py-5 sm:p-6">
            <h3 class="text-lg leading-6 font-medium text-gray-900">
              Authentication Status
            </h3>
            <div class="mt-4 flex items-center">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <div :class="[
                    'h-3 w-3 rounded-full',
                    auth.isAuthenticated ? 'bg-green-400' : 'bg-red-400'
                  ]"></div>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-gray-900">
                    {{ auth.isAuthenticated ? 'Authenticated' : 'Not Authenticated' }}
                  </p>
                  <p v-if="auth.user" class="text-sm text-gray-500">
                    {{ auth.user.email || auth.user.id }}
                  </p>
                </div>
              </div>
              <div class="ml-auto">
                <button
                  v-if="!auth.isAuthenticated"
                  @click="showAuthModal = true"
                  class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  Authenticate
                </button>
                <button
                  v-else
                  @click="auth.logout()"
                  class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  Logout
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- API Operations Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        {% for operation in demoOperations %}
        <!-- {{ operation.operationId }} Demo -->
        <div class="bg-white overflow-hidden shadow rounded-lg">
          <div class="px-4 py-5 sm:p-6">
            <h3 class="text-lg leading-6 font-medium text-gray-900">
              {{ operation.summary }}
            </h3>
            <p class="mt-1 text-sm text-gray-500">
              {{ operation.description }}
            </p>
            
            <!-- Operation Form -->
            <div class="mt-4">
              {% if operation.hasRequestBody %}
              <div class="space-y-4">
                {% for field in operation.requestFields %}
                <div>
                  <label class="block text-sm font-medium text-gray-700">
                    {{ field.label }}
                    {% if field.required %}<span class="text-red-500">*</span>{% endif %}
                  </label>
                  {% if field.type === 'textarea' %}
                  <textarea
                    v-model="{{ operation.operationId }}Form.{{ field.name }}"
                    :placeholder="'{{ field.placeholder }}'"
                    rows="4"
                    class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                  ></textarea>
                  {% elseif field.type === 'select' %}
                  <select
                    v-model="{{ operation.operationId }}Form.{{ field.name }}"
                    class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                  >
                    <option value="">Select {{ field.label }}</option>
                    {% for option in field.options %}
                    <option value="{{ option.value }}">{{ option.label }}</option>
                    {% endfor %}
                  </select>
                  {% elseif field.type === 'boolean' %}
                  <div class="mt-1">
                    <label class="inline-flex items-center">
                      <input
                        v-model="{{ operation.operationId }}Form.{{ field.name }}"
                        type="checkbox"
                        class="rounded border-gray-300 text-indigo-600 shadow-sm focus:ring-indigo-500"
                      >
                      <span class="ml-2 text-sm text-gray-900">{{ field.checkboxLabel }}</span>
                    </label>
                  </div>
                  {% else %}
                  <input
                    v-model="{{ operation.operationId }}Form.{{ field.name }}"
                    type="{{ field.inputType || 'text' }}"
                    :placeholder="'{{ field.placeholder }}'"
                    class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                  >
                  {% endif %}
                </div>
                {% endfor %}
              </div>
              {% endif %}

              <!-- Action Buttons -->
              <div class="mt-6 flex space-x-3">
                <button
                  @click="execute{{ operation.operationId | pascalCase }}()"
                  :disabled="{{ operation.operationId }}Pending || !auth.isAuthenticated"
                  class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-gray-300"
                >
                  <svg v-if="{{ operation.operationId }}Pending" class="animate-spin -ml-1 mr-3 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Execute API Call
                </button>

                {% if operation.isStreamingEndpoint %}
                <button
                  @click="execute{{ operation.operationId | pascalCase }}Stream()"
                  :disabled="{{ operation.operationId }}IsStreaming || !auth.isAuthenticated"
                  class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-gray-300"
                >
                  {{ {{ operation.operationId }}IsStreaming ? 'Streaming...' : 'Stream Response' }}
                </button>
                
                <button
                  v-if="{{ operation.operationId }}IsStreaming"
                  @click="{{ operation.operationId }}CancelStream()"
                  class="inline-flex items-center px-4 py-2 border border-red-300 text-sm font-medium rounded-md shadow-sm text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                >
                  Cancel Stream
                </button>
                {% endif %}
              </div>
            </div>

            <!-- Response Display -->
            <div v-if="{{ operation.operationId }}Data || {{ operation.operationId }}Error" class="mt-6">
              <h4 class="text-sm font-medium text-gray-900 mb-2">Response:</h4>
              
              <!-- Success Response -->
              <div v-if="{{ operation.operationId }}Data" class="bg-green-50 border border-green-200 rounded-md p-4">
                <h5 class="text-sm font-medium text-green-800 mb-2">Success</h5>
                <pre class="text-sm text-green-700 overflow-x-auto">{{ JSON.stringify({{ operation.operationId }}Data, null, 2) }}</pre>
              </div>
              
              <!-- Error Response -->
              <div v-if="{{ operation.operationId }}Error" class="bg-red-50 border border-red-200 rounded-md p-4">
                <h5 class="text-sm font-medium text-red-800 mb-2">Error</h5>
                <pre class="text-sm text-red-700 overflow-x-auto">{{ JSON.stringify({{ operation.operationId }}Error, null, 2) }}</pre>
              </div>

              {% if operation.isStreamingEndpoint %}
              <!-- Streaming Response -->
              <div v-if="{{ operation.operationId }}StreamData" class="bg-blue-50 border border-blue-200 rounded-md p-4 mt-4">
                <h5 class="text-sm font-medium text-blue-800 mb-2">Stream Data</h5>
                <div class="text-sm text-blue-700 max-h-64 overflow-y-auto whitespace-pre-wrap">{{ {{ operation.operationId }}StreamData }}</div>
              </div>
              {% endif %}
            </div>
          </div>
        </div>
        {% endfor %}
      </div>

      <!-- API Documentation Link -->
      <div class="mt-8">
        <div class="bg-white overflow-hidden shadow rounded-lg">
          <div class="px-4 py-5 sm:p-6">
            <h3 class="text-lg leading-6 font-medium text-gray-900">
              API Documentation
            </h3>
            <p class="mt-1 text-sm text-gray-500">
              View the complete OpenAPI specification and detailed documentation
            </p>
            <div class="mt-4">
              <nuxt-link
                to="/{{ serviceName | kebabCase }}/docs"
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                View Documentation
              </nuxt-link>
            </div>
          </div>
        </div>
      </div>
    </main>

    <!-- Authentication Modal -->
    <div v-if="showAuthModal" class="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
      <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" @click="showAuthModal = false"></div>

        <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
          <div>
            <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
              Authenticate with {{ serviceName }}
            </h3>
            
            <div class="mt-4">
              {% if hasApiKeyAuth %}
              <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">API Key</label>
                <input
                  v-model="authForm.apiKey"
                  type="password"
                  placeholder="Enter your API key"
                  class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                >
              </div>
              {% endif %}

              {% if hasBearerAuth %}
              <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">Email</label>
                <input
                  v-model="authForm.email"
                  type="email"
                  placeholder="Enter your email"
                  class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                >
              </div>
              <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">Password</label>
                <input
                  v-model="authForm.password"
                  type="password"
                  placeholder="Enter your password"
                  class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                >
              </div>
              {% endif %}
            </div>
          </div>

          <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
            <button
              @click="authenticate()"
              :disabled="auth.isLoading"
              class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm disabled:bg-gray-300"
            >
              {{ auth.isLoading ? 'Authenticating...' : 'Authenticate' }}
            </button>
            <button
              @click="showAuthModal = false"
              class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:col-start-1 sm:text-sm"
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
{% for operation in demoOperations %}
import { {{ operation.operationId | camelCase }} } from '~/composables/{{ operation.operationId | camelCase }}'
{% endfor %}

// Page metadata
definePageMeta({
  title: '{{ serviceName }} API Demo',
  description: 'Interactive demo of {{ serviceName }} API integration',
  layout: 'default'
})

// Composables
const { auth } = useAuth()

// Reactive state
const showAuthModal = ref(false)
const authForm = reactive({
  {% if hasApiKeyAuth %}
  apiKey: '',
  {% endif %}
  {% if hasBearerAuth %}
  email: '',
  password: '',
  {% endif %}
})

{% for operation in demoOperations %}
// {{ operation.operationId }} composable and form
const {
  data: {{ operation.operationId }}Data,
  pending: {{ operation.operationId }}Pending,
  error: {{ operation.operationId }}Error,
  {% if operation.isStreamingEndpoint %}
  isStreaming: {{ operation.operationId }}IsStreaming,
  streamData: {{ operation.operationId }}StreamData,
  cancelStream: {{ operation.operationId }}CancelStream,
  {% endif %}
  execute,
  {% if operation.isStreamingEndpoint %}
  executeStream,
  {% endif %}
} = {{ operation.operationId | camelCase }}()

const {{ operation.operationId }}Form = reactive({
  {% for field in operation.requestFields %}
  {{ field.name }}: {% if field.type === 'boolean' %}false{% elseif field.type === 'number' %}0{% else %}''{% endif %},
  {% endfor %}
})
{% endfor %}

// Methods
const authenticate = async () => {
  try {
    await auth.login(authForm)
    showAuthModal.value = false
    
    // Reset form
    Object.keys(authForm).forEach(key => {
      authForm[key] = ''
    })
  } catch (error) {
    console.error('Authentication failed:', error)
  }
}

{% for operation in demoOperations %}
const execute{{ operation.operationId | pascalCase }} = async () => {
  try {
    {% if operation.hasRequestBody %}
    await execute({{ operation.operationId }}Form)
    {% else %}
    await execute()
    {% endif %}
  } catch (error) {
    console.error('{{ operation.operationId }} failed:', error)
  }
}

{% if operation.isStreamingEndpoint %}
const execute{{ operation.operationId | pascalCase }}Stream = async () => {
  try {
    const stream = {% if operation.hasRequestBody %}await executeStream({{ operation.operationId }}Form){% else %}await executeStream(){% endif %}
    
    const reader = stream.getReader()
    {{ operation.operationId }}StreamData.value = ''
    
    while (true) {
      const { done, value } = await reader.read()
      if (done) break
      
      {{ operation.operationId }}StreamData.value += JSON.stringify(value) + '\n'
    }
  } catch (error) {
    console.error('{{ operation.operationId }} streaming failed:', error)
  }
}
{% endif %}
{% endfor %}

// Initialize default form values
onMounted(() => {
  {% for operation in demoOperations %}
  {% for field in operation.requestFields %}
  {% if field.defaultValue %}
  {{ operation.operationId }}Form.{{ field.name }} = {{ field.defaultValue }}
  {% endif %}
  {% endfor %}
  {% endfor %}
})
</script>