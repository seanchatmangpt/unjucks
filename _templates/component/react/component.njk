---
to: src/components/{{ componentName | pascalCase }}/{{ componentName | pascalCase }}.tsx
---
import React{% if withState %}, { useState, useEffect }{% endif %} from 'react';
{% if withStyles %}import styles from './{{ componentName | pascalCase }}.module.css';{% endif %}

{% if withProps %}
interface {{ componentName | pascalCase }}Props {
  {% for prop in properties -%}
  {{ prop.name }}{% if not prop.required %}?{% endif %}: {{ prop.type }};
  {% endfor -%}
  className?: string;
  children?: React.ReactNode;
}
{% endif %}

/**
 * {{ description or (componentName + " component") }}
 * 
 * @param props - Component properties
 * @returns JSX element
 */
export const {{ componentName | pascalCase }}: React.FC{% if withProps %}<{{ componentName | pascalCase }}Props>{% endif %} = ({% if withProps %}{
  {% for prop in properties -%}
  {{ prop.name }}{% if prop.defaultValue %} = {{ prop.defaultValue }}{% endif %},
  {% endfor -%}
  className,
  children,
  ...props
}{% endif %}) => {
  {% if withState -%}
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  
  {% endif -%}
  {% if withEffect -%}
  useEffect(() => {
    // Component initialization logic
    console.log('{{ componentName | pascalCase }} mounted');
    
    return () => {
      // Cleanup logic
      console.log('{{ componentName | pascalCase }} unmounted');
    };
  }, []);
  
  {% endif -%}
  {% if withHandlers -%}
  const handleClick = () => {
    console.log('{{ componentName | pascalCase }} clicked');
    // Add your click handler logic here
  };
  
  const handleChange = (value: string) => {
    console.log('{{ componentName | pascalCase }} changed:', value);
    // Add your change handler logic here
  };
  
  {% endif -%}
  return (
    <div 
      className={{% if withStyles %}styles.{{ componentName | camelCase }} + (className ? ' ' + className : ''){% else %}className{% endif %}}
      {% if withTestId %}data-testid="{{ componentName | kebabCase }}"{% endif %}
      {% if withHandlers %}onClick={handleClick}{% endif %}
      {...props}
    >
      <h2>{{ componentName | pascalCase }}</h2>
      {% if description %}<p>{{ description }}</p>{% endif %}
      
      {% if withState -%}
      {isLoading && <div className="loading">Loading...</div>}
      {error && <div className="error" role="alert">{error}</div>}
      {% endif -%}
      
      {% for prop in properties -%}
      {% if prop.type === 'string' -%}
      <p><strong>{{ prop.name | capitalize }}:</strong> {{{ prop.name }}}</p>
      {% elif prop.type === 'number' -%}
      <p><strong>{{ prop.name | capitalize }}:</strong> {{{ prop.name }}}</p>
      {% elif prop.type === 'boolean' -%}
      <p><strong>{{ prop.name | capitalize }}:</strong> {{{ prop.name }} ? 'Yes' : 'No'}</p>
      {% endif -%}
      {% endfor -%}
      
      {children}
    </div>
  );
};

export default {{ componentName | pascalCase }};