import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { mount, VueWrapper } from '@vue/test-utils'
import { nextTick } from 'vue'
import <%= componentName %> from '@/components/<%= componentName %>.vue'
import type { <%= componentName %>Props, <%= componentName %>Data } from '@/types/<%= componentName %>'

// Mock Nuxt UI components
vi.mock('#components', () => ({
  UButton: {
    name: 'UButton',
    template: '<button><slot /></button>',
    props: ['icon', 'variant', 'size', 'loading', 'label']
  },
  UIcon: {
    name: 'UIcon', 
    template: '<span :class="name"></span>',
    props: ['name']
  },
  UAlert: {
    name: 'UAlert',
    template: '<div class="alert"><slot /></div>',
    props: ['color', 'variant', 'title', 'description', 'actions']
  }
}))

describe('<%= componentName %>', () => {
  let wrapper: VueWrapper<any>
  const defaultProps: <%= componentName %>Props = {
    title: 'Test <%= componentName %>',
    showHeader: true,
    showFooter: false
  }

  const mockData: <%= componentName %>Data = {
    id: 'test-id',
    timestamp: new Date(),
    metadata: { test: true }
  }

  beforeEach(() => {
    vi.clearAllMocks()
  })

  afterEach(() => {
    if (wrapper) {
      wrapper.unmount()
    }
  })

  describe('Basic Rendering', () => {
    it('renders with default props', () => {
      wrapper = mount(<%= componentName %>, {
        props: defaultProps
      })

      expect(wrapper.find('.<%= componentName.toLowerCase() %>-container').exists()).toBe(true)
      expect(wrapper.text()).toContain('Test <%= componentName %>')
    })

    it('applies custom container classes', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          containerClasses: 'custom-class'
        }
      })

      expect(wrapper.find('.custom-class').exists()).toBe(true)
    })

    it('renders with custom title', () => {
      const customTitle = 'Custom Component Title'
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          title: customTitle
        }
      })

      expect(wrapper.text()).toContain(customTitle)
    })
  })

  describe('Header Section', () => {
    it('shows header when showHeader is true', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          showHeader: true
        }
      })

      const header = wrapper.find('h2')
      expect(header.exists()).toBe(true)
      expect(header.text()).toBe('Test <%= componentName %>')
    })

    it('hides header when showHeader is false', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          showHeader: false
        }
      })

      expect(wrapper.find('h2').exists()).toBe(false)
    })

    it('shows refresh button when showRefresh is true', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          showRefresh: true
        }
      })

      const refreshButton = wrapper.findComponent({ name: 'UButton' })
      expect(refreshButton.exists()).toBe(true)
    })

    it('shows settings button when showSettings is true', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          showSettings: true
        }
      })

      // Should have settings button (second UButton if refresh is also shown)
      const buttons = wrapper.findAllComponents({ name: 'UButton' })
      expect(buttons.length).toBeGreaterThan(0)
    })
  })

  describe('Loading State', () => {
    it('shows loading spinner when loading is true', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          loading: true
        }
      })

      expect(wrapper.find('[role="status"]').exists()).toBe(true)
      expect(wrapper.text()).toContain('Loading...')
    })

    it('shows custom loading text', () => {
      const customLoadingText = 'Please wait...'
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          loading: true,
          loadingText: customLoadingText
        }
      })

      expect(wrapper.text()).toContain(customLoadingText)
    })

    it('hides content when loading', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          loading: true,
          initialData: mockData
        },
        slots: {
          default: '<div class="test-content">Content</div>'
        }
      })

      expect(wrapper.find('.test-content').exists()).toBe(false)
    })
  })

  describe('Error State', () => {
    it('shows error alert when error is present', async () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          error: 'Test error message'
        }
      })

      const alert = wrapper.findComponent({ name: 'UAlert' })
      expect(alert.exists()).toBe(true)
      expect(alert.props('description')).toBe('Test error message')
    })

    it('hides content when error is present', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          error: 'Test error',
          initialData: mockData
        },
        slots: {
          default: '<div class="test-content">Content</div>'
        }
      })

      expect(wrapper.find('.test-content').exists()).toBe(false)
    })

    it('emits error event on refresh failure', async () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          showRefresh: true
        }
      })

      // Mock a failing refresh
      const component = wrapper.vm
      component.setError = vi.fn()
      
      await wrapper.findComponent({ name: 'UButton' }).trigger('click')
      await nextTick()

      expect(wrapper.emitted('error')).toBeTruthy()
    })
  })

  describe('Empty State', () => {
    it('shows empty state when no data', () => {
      wrapper = mount(<%= componentName %>, {
        props: defaultProps
      })

      expect(wrapper.text()).toContain('No data available')
    })

    it('shows custom empty state content', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          emptyStateTitle: 'Custom Empty Title',
          emptyStateDescription: 'Custom empty description'
        }
      })

      expect(wrapper.text()).toContain('Custom Empty Title')
      expect(wrapper.text()).toContain('Custom empty description')
    })

    it('shows empty state action button', async () => {
      const mockAction = vi.fn()
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          emptyStateAction: {
            label: 'Create New',
            handler: mockAction
          }
        }
      })

      const actionButton = wrapper.findComponent({ name: 'UButton' })
      await actionButton.trigger('click')
      
      expect(mockAction).toHaveBeenCalled()
    })
  })

  describe('Content Rendering', () => {
    it('renders slot content when data is available', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          initialData: mockData
        },
        slots: {
          default: '<div class="test-content">Test Content</div>'
        }
      })

      expect(wrapper.find('.test-content').exists()).toBe(true)
      expect(wrapper.text()).toContain('Test Content')
    })

    it('passes data to slot', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          initialData: mockData
        },
        slots: {
          default: ({ data }: { data: <%= componentName %>Data }) => 
            `<div class="test-content">ID: ${data?.id}</div>`
        }
      })

      expect(wrapper.text()).toContain('ID: test-id')
    })
  })

  describe('Footer Section', () => {
    it('shows footer when showFooter is true', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          showFooter: true,
          initialData: mockData
        }
      })

      expect(wrapper.find('.border-t').exists()).toBe(true)
    })

    it('renders footer slots', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          showFooter: true,
          initialData: mockData
        },
        slots: {
          'footer-left': '<div class="footer-left">Left Content</div>',
          'footer-actions': '<div class="footer-actions">Actions</div>'
        }
      })

      expect(wrapper.find('.footer-left').exists()).toBe(true)
      expect(wrapper.find('.footer-actions').exists()).toBe(true)
    })
  })

  describe('Event Handling', () => {
    it('emits refresh event when refresh button clicked', async () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          showRefresh: true
        }
      })

      await wrapper.findComponent({ name: 'UButton' }).trigger('click')
      
      expect(wrapper.emitted('refresh')).toBeTruthy()
    })

    it('emits settings event when settings button clicked', async () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          showSettings: true
        }
      })

      const settingsButton = wrapper.findAllComponents({ name: 'UButton' }).at(-1)
      await settingsButton!.trigger('click')
      
      expect(wrapper.emitted('settings')).toBeTruthy()
    })

    it('emits dataChange event when data changes', async () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          initialData: mockData
        }
      })

      const newData = { ...mockData, id: 'new-id' }
      await wrapper.setProps({ initialData: newData })
      
      expect(wrapper.emitted('dataChange')).toBeTruthy()
      expect(wrapper.emitted('dataChange')![0]).toEqual([newData])
    })
  })

  describe('Accessibility', () => {
    it('has proper ARIA attributes', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          ariaLabel: 'Custom aria label'
        }
      })

      const container = wrapper.find('.<%= componentName.toLowerCase() %>-container')
      expect(container.attributes('aria-label')).toBe('Custom aria label')
      expect(container.attributes('role')).toBe('region')
    })

    it('has accessible header ID relationship', () => {
      wrapper = mount(<%= componentName %>, {
        props: defaultProps
      })

      const header = wrapper.find('h2')
      const content = wrapper.find('.<%= componentName.toLowerCase() %>-content')
      
      expect(header.attributes('id')).toBeTruthy()
      if (content.exists()) {
        expect(content.attributes('aria-describedby')).toBe(header.attributes('id'))
      }
    })

    it('has proper loading state accessibility', () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          loading: true
        }
      })

      const loadingElement = wrapper.find('[role="status"]')
      expect(loadingElement.exists()).toBe(true)
      expect(loadingElement.attributes('aria-live')).toBe('polite')
      expect(loadingElement.attributes('aria-label')).toBe('Loading content')
    })
  })

  describe('Component Methods', () => {
    it('exposes refresh method', () => {
      wrapper = mount(<%= componentName %>, {
        props: defaultProps
      })

      expect(typeof wrapper.vm.refresh).toBe('function')
    })

    it('exposes setError method', async () => {
      wrapper = mount(<%= componentName %>, {
        props: defaultProps
      })

      wrapper.vm.setError('New error')
      await nextTick()

      expect(wrapper.text()).toContain('New error')
    })

    it('exposes setLoading method', async () => {
      wrapper = mount(<%= componentName %>, {
        props: defaultProps
      })

      wrapper.vm.setLoading(true)
      await nextTick()

      expect(wrapper.find('[role="status"]').exists()).toBe(true)
    })

    it('exposes setData method', async () => {
      wrapper = mount(<%= componentName %>, {
        props: defaultProps
      })

      const newData = { id: 'new-data', timestamp: new Date() }
      wrapper.vm.setData(newData)
      await nextTick()

      expect(wrapper.emitted('dataChange')).toBeTruthy()
      expect(wrapper.emitted('dataChange')![0]).toEqual([newData])
    })
  })

  describe('Responsive Design', () => {
    it('applies responsive classes correctly', () => {
      wrapper = mount(<%= componentName %>, {
        props: defaultProps
      })

      const container = wrapper.find('.<%= componentName.toLowerCase() %>-container')
      expect(container.classes()).toContain('p-4')
      expect(container.classes()).toContain('md:p-6')
    })
  })

  describe('Props Validation', () => {
    it('handles undefined props gracefully', () => {
      expect(() => {
        wrapper = mount(<%= componentName %>, {
          props: {}
        })
      }).not.toThrow()
    })

    it('uses default values for optional props', () => {
      wrapper = mount(<%= componentName %>, {
        props: {}
      })

      expect(wrapper.text()).toContain('<%= componentName %>')
      expect(wrapper.find('h2').exists()).toBe(true) // showHeader default is true
    })
  })

  describe('Lifecycle Hooks', () => {
    it('calls autoLoad on mount when specified', async () => {
      const refreshSpy = vi.fn()
      
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          autoLoad: true
        }
      })

      // Wait for mounted hook
      await nextTick()
      
      expect(wrapper.find('[role="status"]').exists()).toBe(true) // Should be loading
    })

    it('does not autoLoad when initialData is provided', async () => {
      wrapper = mount(<%= componentName %>, {
        props: {
          ...defaultProps,
          autoLoad: true,
          initialData: mockData
        }
      })

      await nextTick()
      
      // Should not be loading since we have initial data
      expect(wrapper.find('[role="status"]').exists()).toBe(false)
    })
  })
})