<template>
  <div class="session-history bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700">
    <!-- Header -->
    <div class="p-6 border-b border-gray-200 dark:border-gray-700">
      <div class="flex items-center justify-between">
        <div>
          <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">
            Interview History
          </h2>
          <p class="text-gray-600 dark:text-gray-400 mt-1">
            Track your progress across all interview sessions
          </p>
        </div>
        
        <div class="flex items-center gap-3">
          <!-- Filter Dropdown -->
          <UDropdown :items="filterMenuItems" :popper="{ placement: 'bottom-end' }">
            <UButton
              icon="i-heroicons-funnel"
              :label="getFilterLabel()"
              variant="outline"
              size="sm"
            />
          </UDropdown>
          
          <!-- Sort Dropdown -->
          <UDropdown :items="sortMenuItems" :popper="{ placement: 'bottom-end' }">
            <UButton
              icon="i-heroicons-bars-arrow-down"
              :label="getSortLabel()"
              variant="outline"
              size="sm"
            />
          </UDropdown>
          
          <!-- Export Button -->
          <UButton
            icon="i-heroicons-document-arrow-down"
            label="Export"
            variant="outline"
            size="sm"
            @click="exportHistory"
          />
        </div>
      </div>
    </div>

    <!-- Stats Overview -->
    <div class="p-6 bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div
          v-for="stat in overviewStats"
          :key="stat.label"
          class="text-center"
        >
          <div class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-1">
            {{ stat.value }}
          </div>
          <div class="text-sm text-gray-600 dark:text-gray-400">
            {{ stat.label }}
          </div>
          <div
            v-if="stat.change"
            class="flex items-center justify-center gap-1 mt-1"
          >
            <UIcon
              :name="stat.change > 0 ? 'i-heroicons-arrow-trending-up' : 'i-heroicons-arrow-trending-down'"
              :class="stat.change > 0 ? 'text-green-500' : 'text-red-500'"
              class="h-3 w-3"
            />
            <span
              :class="stat.change > 0 ? 'text-green-600' : 'text-red-600'"
              class="text-xs font-medium"
            >
              {{ Math.abs(stat.change) }}%
            </span>
          </div>
        </div>
      </div>
    </div>

    <!-- Session List -->
    <div class="divide-y divide-gray-200 dark:divide-gray-700">
      <!-- Loading State -->
      <div v-if="loading" class="p-6">
        <div class="space-y-4">
          <div
            v-for="i in 3"
            :key="i"
            class="animate-pulse"
          >
            <div class="flex items-center gap-4">
              <div class="w-12 h-12 bg-gray-200 dark:bg-gray-700 rounded-lg" />
              <div class="flex-1">
                <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-2" />
                <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2" />
              </div>
              <div class="w-20 h-6 bg-gray-200 dark:bg-gray-700 rounded" />
            </div>
          </div>
        </div>
      </div>

      <!-- Session Items -->
      <div
        v-else-if="paginatedSessions.length > 0"
        class="max-h-96 overflow-y-auto"
      >
        <div
          v-for="session in paginatedSessions"
          :key="session.id"
          class="p-6 hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer transition-colors group"
          @click="selectSession(session)"
        >
          <div class="flex items-center gap-4">
            <!-- Session Icon -->
            <div 
              class="w-12 h-12 rounded-lg flex items-center justify-center"
              :class="getSessionIconBg(session.type)"
            >
              <UIcon
                :name="getSessionIcon(session.type)"
                class="h-6 w-6 text-white"
              />
            </div>
            
            <!-- Session Info -->
            <div class="flex-1 min-w-0">
              <div class="flex items-center gap-2 mb-1">
                <h3 class="font-semibold text-gray-900 dark:text-gray-100 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                  {{ session.title }}
                </h3>
                <UBadge
                  :color="getSessionTypeColor(session.type)"
                  :label="session.type"
                  size="xs"
                />
                <UBadge
                  :color="getDifficultyColor(session.difficulty)"
                  :label="session.difficulty"
                  size="xs"
                />
              </div>
              
              <div class="flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
                <!-- Date -->
                <div class="flex items-center gap-1">
                  <UIcon name="i-heroicons-calendar" class="h-4 w-4" />
                  <span>{{ formatDate(session.completedAt || session.createdAt) }}</span>
                </div>
                
                <!-- Duration -->
                <div class="flex items-center gap-1">
                  <UIcon name="i-heroicons-clock" class="h-4 w-4" />
                  <span>{{ formatDuration(session.duration) }}</span>
                </div>
                
                <!-- Questions -->
                <div v-if="session.questionsAnswered" class="flex items-center gap-1">
                  <UIcon name="i-heroicons-question-mark-circle" class="h-4 w-4" />
                  <span>{{ session.questionsAnswered }}/{{ session.totalQuestions }} questions</span>
                </div>
                
                <!-- Status -->
                <div class="flex items-center gap-1">
                  <UIcon
                    :name="getStatusIcon(session.status)"
                    :class="getStatusColor(session.status)"
                    class="h-4 w-4"
                  />
                  <span class="capitalize">{{ session.status }}</span>
                </div>
              </div>
            </div>
            
            <!-- Score and Actions -->
            <div class="flex items-center gap-4">
              <!-- Score Display -->
              <div v-if="session.score !== undefined" class="text-right">
                <div class="text-2xl font-bold" :class="getScoreColor(session.score)">
                  {{ session.score }}
                </div>
                <div class="text-xs text-gray-500 dark:text-gray-400">
                  /100
                </div>
              </div>
              
              <!-- Performance Indicator -->
              <div v-if="session.performance" class="flex flex-col items-center">
                <div class="flex">
                  <UIcon
                    v-for="i in 5"
                    :key="i"
                    name="i-heroicons-star"
                    :class="i <= session.performance ? 'text-yellow-400' : 'text-gray-300 dark:text-gray-600'"
                    class="h-4 w-4"
                  />
                </div>
                <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                  {{ session.performance }}/5
                </div>
              </div>
              
              <!-- Actions Menu -->
              <UDropdown :items="getSessionMenuItems(session)" :popper="{ placement: 'bottom-end' }">
                <UButton
                  icon="i-heroicons-ellipsis-vertical"
                  variant="ghost"
                  size="sm"
                  @click.stop
                />
              </UDropdown>
            </div>
          </div>
          
          <!-- Expanded Details -->
          <div
            v-if="expandedSession === session.id"
            class="mt-4 pl-16 border-t border-gray-200 dark:border-gray-700 pt-4"
          >
            <!-- Score Breakdown -->
            <div v-if="session.scoreBreakdown" class="mb-4">
              <h4 class="font-medium text-gray-900 dark:text-gray-100 mb-3">
                Score Breakdown
              </h4>
              <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
                <div
                  v-for="category in session.scoreBreakdown"
                  :key="category.name"
                  class="bg-gray-50 dark:bg-gray-800 p-3 rounded"
                >
                  <div class="flex items-center justify-between mb-1">
                    <span class="text-sm font-medium text-gray-700 dark:text-gray-300">
                      {{ category.label }}
                    </span>
                    <span class="text-sm font-semibold" :class="getScoreColor(category.score)">
                      {{ category.score }}
                    </span>
                  </div>
                  <UProgress
                    :value="category.score"
                    :max="100"
                    :color="getProgressColor(category.score)"
                    size="xs"
                  />
                </div>
              </div>
            </div>
            
            <!-- Key Insights -->
            <div v-if="session.insights" class="mb-4">
              <h4 class="font-medium text-gray-900 dark:text-gray-100 mb-3">
                Key Insights
              </h4>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Strengths -->
                <div v-if="session.insights.strengths?.length > 0">
                  <h5 class="text-sm font-medium text-green-700 dark:text-green-300 mb-2">
                    Strengths
                  </h5>
                  <ul class="space-y-1">
                    <li
                      v-for="strength in session.insights.strengths.slice(0, 3)"
                      :key="strength"
                      class="flex items-start gap-2 text-sm text-gray-600 dark:text-gray-400"
                    >
                      <UIcon name="i-heroicons-plus-circle" class="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                      <span>{{ strength }}</span>
                    </li>
                  </ul>
                </div>
                
                <!-- Areas for Improvement -->
                <div v-if="session.insights.improvements?.length > 0">
                  <h5 class="text-sm font-medium text-blue-700 dark:text-blue-300 mb-2">
                    Areas for Improvement
                  </h5>
                  <ul class="space-y-1">
                    <li
                      v-for="improvement in session.insights.improvements.slice(0, 3)"
                      :key="improvement"
                      class="flex items-start gap-2 text-sm text-gray-600 dark:text-gray-400"
                    >
                      <UIcon name="i-heroicons-arrow-up-circle" class="h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0" />
                      <span>{{ improvement }}</span>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
            
            <!-- Tags -->
            <div v-if="session.tags?.length > 0" class="flex flex-wrap gap-1">
              <UBadge
                v-for="tag in session.tags"
                :key="tag"
                :label="tag"
                variant="subtle"
                size="xs"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Empty State -->
      <div
        v-else
        class="p-12 text-center"
      >
        <UIcon name="i-heroicons-clock" class="h-16 w-16 text-gray-400 mx-auto mb-4" />
        <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
          No Interview Sessions Yet
        </h3>
        <p class="text-gray-600 dark:text-gray-400 mb-6">
          Start your first interview session to see your progress here
        </p>
        <UButton
          label="Start Interview"
          icon="i-heroicons-play"
          @click="startNewSession"
        />
      </div>
    </div>

    <!-- Pagination -->
    <div
      v-if="totalPages > 1 && !showPagination"
      class="p-6 border-t border-gray-200 dark:border-gray-700"
    >
      <div class="flex items-center justify-between">
        <div class="text-sm text-gray-600 dark:text-gray-400">
          Showing {{ (currentPage - 1) * itemsPerPage + 1 }} to 
          {{ Math.min(currentPage * itemsPerPage, filteredSessions.length) }} 
          of {{ filteredSessions.length }} sessions
        </div>
        
        <UPagination
          v-model="currentPage"
          :page-count="itemsPerPage"
          :total="filteredSessions.length"
          :max-page-buttons="5"
        />
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { InterviewSession, SessionFilters, SessionInsights } from '~/types/session-history'

// Props
const props = withDefaults(defineProps<{
  sessions?: InterviewSession[]
  loading?: boolean
  showPagination?: boolean
  limit?: number
  userId?: string
}>(), {
  sessions: () => [],
  loading: false,
  showPagination: true,
  limit: 10
})

// Emits
const emit = defineEmits<{
  'session-selected': [session: InterviewSession]
  'session-reviewed': [sessionId: string]
  'session-retried': [sessionId: string] 
  'session-shared': [sessionId: string]
  'session-deleted': [sessionId: string]
  'start-new-session': []
  'export-history': [format: string]
}>()

// Reactive state
const currentPage = ref(1)
const itemsPerPage = ref(props.limit)
const expandedSession = ref<string | null>(null)
const filters = ref<SessionFilters>({
  type: null,
  status: null,
  difficulty: null,
  dateRange: null
})
const sortBy = ref('date-desc')

// Filter and sort options
const filterMenuItems = [
  [
    {
      label: 'All Types',
      click: () => setFilter('type', null)
    },
    {
      label: 'Technical',
      click: () => setFilter('type', 'technical')
    },
    {
      label: 'System Design',
      click: () => setFilter('type', 'system-design')
    },
    {
      label: 'Behavioral',
      click: () => setFilter('type', 'behavioral')
    }
  ],
  [
    {
      label: 'All Status',
      click: () => setFilter('status', null)
    },
    {
      label: 'Completed',
      click: () => setFilter('status', 'completed')
    },
    {
      label: 'In Progress',
      click: () => setFilter('status', 'in-progress')
    },
    {
      label: 'Incomplete',
      click: () => setFilter('status', 'incomplete')
    }
  ]
]

const sortMenuItems = [
  [
    {
      label: 'Newest First',
      click: () => sortBy.value = 'date-desc'
    },
    {
      label: 'Oldest First',
      click: () => sortBy.value = 'date-asc'
    }
  ],
  [
    {
      label: 'Highest Score',
      click: () => sortBy.value = 'score-desc'
    },
    {
      label: 'Lowest Score',
      click: () => sortBy.value = 'score-asc'
    }
  ],
  [
    {
      label: 'Longest Duration',
      click: () => sortBy.value = 'duration-desc'
    },
    {
      label: 'Shortest Duration',
      click: () => sortBy.value = 'duration-asc'
    }
  ]
]

// Computed properties
const filteredSessions = computed(() => {
  let filtered = [...props.sessions]
  
  // Apply filters
  if (filters.value.type) {
    filtered = filtered.filter(s => s.type === filters.value.type)
  }
  
  if (filters.value.status) {
    filtered = filtered.filter(s => s.status === filters.value.status)
  }
  
  if (filters.value.difficulty) {
    filtered = filtered.filter(s => s.difficulty === filters.value.difficulty)
  }
  
  // Apply sorting
  filtered.sort((a, b) => {
    switch (sortBy.value) {
      case 'date-desc':
        return new Date(b.completedAt || b.createdAt).getTime() - new Date(a.completedAt || a.createdAt).getTime()
      case 'date-asc':
        return new Date(a.completedAt || a.createdAt).getTime() - new Date(b.completedAt || b.createdAt).getTime()
      case 'score-desc':
        return (b.score || 0) - (a.score || 0)
      case 'score-asc':
        return (a.score || 0) - (b.score || 0)
      case 'duration-desc':
        return (b.duration || 0) - (a.duration || 0)
      case 'duration-asc':
        return (a.duration || 0) - (b.duration || 0)
      default:
        return 0
    }
  })
  
  return filtered
})

const paginatedSessions = computed(() => {
  if (!props.showPagination) return filteredSessions.value
  
  const start = (currentPage.value - 1) * itemsPerPage.value
  const end = start + itemsPerPage.value
  return filteredSessions.value.slice(start, end)
})

const totalPages = computed(() => 
  Math.ceil(filteredSessions.value.length / itemsPerPage.value)
)

const overviewStats = computed(() => {
  const sessions = props.sessions
  const completed = sessions.filter(s => s.status === 'completed')
  const avgScore = completed.length > 0 
    ? Math.round(completed.reduce((sum, s) => sum + (s.score || 0), 0) / completed.length)
    : 0
  
  return [
    {
      label: 'Total Sessions',
      value: sessions.length.toString(),
      change: 0 // Could calculate from historical data
    },
    {
      label: 'Completed',
      value: completed.length.toString(),
      change: 0
    },
    {
      label: 'Average Score',
      value: avgScore.toString(),
      change: 0
    },
    {
      label: 'Success Rate',
      value: `${sessions.length > 0 ? Math.round((completed.length / sessions.length) * 100) : 0}%`,
      change: 0
    }
  ]
})

// Methods
const selectSession = (session: InterviewSession) => {
  if (expandedSession.value === session.id) {
    expandedSession.value = null
  } else {
    expandedSession.value = session.id
  }
  emit('session-selected', session)
}

const getSessionMenuItems = (session: InterviewSession) => [
  [
    {
      label: 'View Details',
      icon: 'i-heroicons-eye',
      click: () => selectSession(session)
    },
    {
      label: 'Review Feedback',
      icon: 'i-heroicons-document-text',
      click: () => emit('session-reviewed', session.id)
    }
  ],
  [
    {
      label: 'Retry Session',
      icon: 'i-heroicons-arrow-path',
      click: () => emit('session-retried', session.id)
    },
    {
      label: 'Share Results',
      icon: 'i-heroicons-share',
      click: () => emit('session-shared', session.id)
    }
  ],
  [
    {
      label: 'Delete Session',
      icon: 'i-heroicons-trash',
      click: () => confirmDeleteSession(session.id)
    }
  ]
]

const setFilter = (type: keyof SessionFilters, value: any) => {
  filters.value[type] = value
  currentPage.value = 1
}

const getFilterLabel = (): string => {
  const activeFilters = []
  if (filters.value.type) activeFilters.push(filters.value.type)
  if (filters.value.status) activeFilters.push(filters.value.status)
  if (filters.value.difficulty) activeFilters.push(filters.value.difficulty)
  
  return activeFilters.length > 0 
    ? `Filtered (${activeFilters.length})`
    : 'All Sessions'
}

const getSortLabel = (): string => {
  const sortLabels = {
    'date-desc': 'Newest First',
    'date-asc': 'Oldest First',
    'score-desc': 'Highest Score',
    'score-asc': 'Lowest Score',
    'duration-desc': 'Longest Duration',
    'duration-asc': 'Shortest Duration'
  }
  return sortLabels[sortBy.value as keyof typeof sortLabels] || 'Sort By'
}

const confirmDeleteSession = async (sessionId: string) => {
  // Show confirmation dialog
  const confirmed = await $dialog.confirm({
    title: 'Delete Session',
    description: 'Are you sure you want to delete this interview session? This action cannot be undone.',
    confirmButton: 'Delete',
    color: 'red'
  })
  
  if (confirmed) {
    emit('session-deleted', sessionId)
  }
}

const startNewSession = () => {
  emit('start-new-session')
}

const exportHistory = () => {
  emit('export-history', 'json')
}

// Helper methods
const formatDate = (date: Date): string => {
  return new Intl.DateTimeFormat('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  }).format(new Date(date))
}

const formatDuration = (minutes: number): string => {
  if (minutes < 60) return `${minutes}m`
  
  const hours = Math.floor(minutes / 60)
  const remainingMinutes = minutes % 60
  return `${hours}h ${remainingMinutes}m`
}

const getSessionIcon = (type: string) => {
  switch (type) {
    case 'technical': return 'i-heroicons-code-bracket'
    case 'system-design': return 'i-heroicons-building-office'
    case 'behavioral': return 'i-heroicons-users'
    case 'mock': return 'i-heroicons-microphone'
    default: return 'i-heroicons-academic-cap'
  }
}

const getSessionIconBg = (type: string) => {
  switch (type) {
    case 'technical': return 'bg-blue-500'
    case 'system-design': return 'bg-purple-500'
    case 'behavioral': return 'bg-green-500'
    case 'mock': return 'bg-orange-500'
    default: return 'bg-gray-500'
  }
}

const getSessionTypeColor = (type: string) => {
  switch (type) {
    case 'technical': return 'blue'
    case 'system-design': return 'purple'
    case 'behavioral': return 'green'
    case 'mock': return 'orange'
    default: return 'gray'
  }
}

const getDifficultyColor = (difficulty: string) => {
  switch (difficulty) {
    case 'easy': return 'green'
    case 'medium': return 'yellow'
    case 'hard': return 'red'
    default: return 'gray'
  }
}

const getStatusIcon = (status: string) => {
  switch (status) {
    case 'completed': return 'i-heroicons-check-circle'
    case 'in-progress': return 'i-heroicons-clock'
    case 'incomplete': return 'i-heroicons-x-circle'
    default: return 'i-heroicons-question-mark-circle'
  }
}

const getStatusColor = (status: string) => {
  switch (status) {
    case 'completed': return 'text-green-500'
    case 'in-progress': return 'text-yellow-500'
    case 'incomplete': return 'text-red-500'
    default: return 'text-gray-500'
  }
}

const getScoreColor = (score: number) => {
  if (score >= 80) return 'text-green-500'
  if (score >= 60) return 'text-yellow-500'
  return 'text-red-500'
}

const getProgressColor = (score: number) => {
  if (score >= 80) return 'green'
  if (score >= 60) return 'yellow'
  return 'red'
}
</script>

<style scoped>
.session-history {
  /* Component-specific styles */
}

/* Hover effects for session items */
.session-item:hover {
  transform: translateY(-1px);
  transition: all 0.2s ease;
}

/* Expandable details animation */
.expand-enter-active,
.expand-leave-active {
  transition: all 0.3s ease;
  max-height: 300px;
  overflow: hidden;
}

.expand-enter-from,
.expand-leave-to {
  max-height: 0;
  opacity: 0;
}

/* Score visualization */
.score-display {
  position: relative;
}

.score-display::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 2px;
  background: currentColor;
  opacity: 0.3;
  border-radius: 1px;
}

/* Performance stars */
.performance-stars {
  filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .grid-cols-1.md\\:grid-cols-4 {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .grid-cols-2.md\\:grid-cols-4 {
    grid-template-columns: 1fr;
  }
}

/* Print styles */
@media print {
  .session-history {
    -webkit-print-color-adjust: exact;
    print-color-adjust: exact;
  }
  
  button,
  .no-print {
    display: none !important;
  }
}
</style>