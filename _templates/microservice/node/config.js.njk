---
to: src/{{ serviceName | kebabCase }}/config/index.js
---
require('dotenv').config();

const config = {
  // Server configuration
  port: parseInt(process.env.PORT) || {{ port }},
  environment: process.env.NODE_ENV || 'development',
  version: process.env.VERSION || '1.0.0',
  
  // Service identification
  serviceName: '{{ serviceName | kebabCase }}',
  apiVersion: '{{ apiVersion }}',
  
  // Database configuration
  database: {
    {% if database === 'postgresql' %}
    type: 'postgresql',
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT) || 5432,
    database: process.env.DB_NAME || '{{ serviceName | snakeCase }}_db',
    username: process.env.DB_USER || 'postgres',
    password: process.env.DB_PASSWORD || 'password',
    ssl: process.env.DB_SSL === 'true',
    pool: {
      min: parseInt(process.env.DB_POOL_MIN) || 2,
      max: parseInt(process.env.DB_POOL_MAX) || 10
    }
    {% elif database === 'mongodb' %}
    type: 'mongodb',
    uri: process.env.MONGODB_URI || 'mongodb://localhost:27017/{{ serviceName | snakeCase }}_db',
    options: {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      maxPoolSize: parseInt(process.env.DB_POOL_MAX) || 10,
      minPoolSize: parseInt(process.env.DB_POOL_MIN) || 2,
      connectTimeoutMS: 60000,
      socketTimeoutMS: 45000
    }
    {% elif database === 'redis' %}
    type: 'redis',
    host: process.env.REDIS_HOST || 'localhost',
    port: parseInt(process.env.REDIS_PORT) || 6379,
    password: process.env.REDIS_PASSWORD || null,
    db: parseInt(process.env.REDIS_DB) || 0,
    keyPrefix: '{{ serviceName | snakeCase }}:'
    {% endif %}
  },

  {% if withAuth %}
  // Authentication configuration
  auth: {
    jwtSecret: process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production',
    jwtExpiry: process.env.JWT_EXPIRY || '24h',
    bcryptRounds: parseInt(process.env.BCRYPT_ROUNDS) || 12,
    sessionTimeout: parseInt(process.env.SESSION_TIMEOUT) || 86400000, // 24 hours
    {% if withRBAC %}
    rbac: {
      enabled: true,
      defaultRole: process.env.DEFAULT_ROLE || 'user',
      adminRole: process.env.ADMIN_ROLE || 'admin'
    }
    {% endif %}
  },
  {% endif %}

  // CORS configuration
  cors: {
    allowedOrigins: process.env.CORS_ORIGINS ? 
      process.env.CORS_ORIGINS.split(',') : 
      ['http://localhost:3000', 'http://localhost:3001']
  },

  {% if withRateLimit %}
  // Rate limiting
  rateLimit: {
    maxRequests: parseInt(process.env.RATE_LIMIT_MAX) || 100,
    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW) || 900000 // 15 minutes
  },
  {% endif %}

  // Logging configuration
  logging: {
    level: process.env.LOG_LEVEL || 'info',
    format: process.env.LOG_FORMAT || 'json',
    maxFileSize: process.env.LOG_MAX_SIZE || '20m',
    maxFiles: parseInt(process.env.LOG_MAX_FILES) || 7,
    {% if withAuditLog %}
    audit: {
      enabled: true,
      level: 'info',
      retentionDays: parseInt(process.env.AUDIT_RETENTION_DAYS) || 90
    }
    {% endif %}
  },

  {% if monitoring === 'prometheus' %}
  // Monitoring configuration
  monitoring: {
    type: 'prometheus',
    metricsPath: '/metrics',
    collectDefaultMetrics: true,
    timeout: parseInt(process.env.METRICS_TIMEOUT) || 5000
  },
  {% elif monitoring === 'datadog' %}
  monitoring: {
    type: 'datadog',
    apiKey: process.env.DATADOG_API_KEY,
    appKey: process.env.DATADOG_APP_KEY,
    site: process.env.DATADOG_SITE || 'datadoghq.com'
  },
  {% endif %}

  {% if compliance and compliance.length %}
  // Compliance configuration
  compliance: {
    frameworks: {{ compliance | dump }},
    {% if compliance and compliance.length and 'gdpr' in compliance %}
    gdpr: {
      enabled: true,
      dataRetentionDays: parseInt(process.env.GDPR_RETENTION_DAYS) || 1095, // 3 years
      consentRequired: true,
      rightToErasure: true,
      dataPortability: true
    },
    {% endif %}
    {% if compliance and compliance.length and 'sox' in compliance %}
    sox: {
      enabled: true,
      auditTrail: true,
      accessControls: true,
      changeManagement: true,
      retentionPeriod: parseInt(process.env.SOX_RETENTION_DAYS) || 2555 // 7 years
    },
    {% endif %}
    {% if compliance and compliance.length and 'hipaa' in compliance %}
    hipaa: {
      enabled: true,
      phi: true,
      accessLogging: true,
      encryption: 'AES-256',
      retentionPeriod: parseInt(process.env.HIPAA_RETENTION_DAYS) || 2190 // 6 years
    },
    {% endif %}
    {% if compliance and compliance.length and 'pci-dss' in compliance %}
    pciDss: {
      enabled: true,
      cardDataEncryption: true,
      accessLogging: true,
      networkSecurity: true,
      regularTesting: true
    },
    {% endif %}
    encryption: {
      algorithm: 'aes-256-gcm',
      keyRotationDays: parseInt(process.env.ENCRYPTION_KEY_ROTATION) || 90
    }
  },
  {% endif %}

  // Health check configuration
  health: {
    timeout: parseInt(process.env.HEALTH_TIMEOUT) || 5000,
    checks: [
      'database',
      {% if monitoring %}'monitoring',{% endif %}
      'memory',
      'disk'
    ]
  },

  // Security configuration
  security: {
    helmet: {
      contentSecurityPolicy: process.env.NODE_ENV === 'production',
      hsts: process.env.NODE_ENV === 'production'
    },
    rateLimitByIp: true,
    requestSizeLimit: process.env.REQUEST_SIZE_LIMIT || '10mb'
  },

  {% if withDockerization %}
  // Container configuration
  container: {
    name: '{{ serviceName | kebabCase }}',
    image: `{{ serviceName | kebabCase }}:${process.env.VERSION || 'latest'}`,
    healthCheckInterval: parseInt(process.env.HEALTH_CHECK_INTERVAL) || 30000
  },
  {% endif %}

  // Feature flags
  features: {
    {% if withAuth %}authentication: true,{% endif %}
    {% if withRBAC %}rbac: true,{% endif %}
    {% if withAuditLog %}auditLogging: true,{% endif %}
    {% if withRateLimit %}rateLimiting: true,{% endif %}
    swagger: process.env.ENABLE_SWAGGER !== 'false',
    metrics: process.env.ENABLE_METRICS !== 'false'
  }
};

// Validation
if (config.environment === 'production') {
  const requiredEnvVars = [
    'JWT_SECRET',
    'DB_PASSWORD'
  ];

  for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
      throw new Error(`Required environment variable ${envVar} is not set`);
    }
  }

  // Production security checks
  if (config.auth && config.auth.jwtSecret === 'your-super-secret-jwt-key-change-in-production') {
    throw new Error('JWT_SECRET must be set in production');
  }
}

module.exports = config;