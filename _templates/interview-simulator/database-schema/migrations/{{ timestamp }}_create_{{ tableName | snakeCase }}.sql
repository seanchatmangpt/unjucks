-- Migration: Create {{ tableName | snakeCase }} table
-- Timestamp: {{ timestamp || 'YYYYMMDDHHMMSS' }}
-- Generated by Unjucks Interview Copilot template

-- Migration Up
BEGIN;

{% if tableName == 'users' %}
-- Create users table first (required by other tables)
{% include './' + tableName + '.sql' %}

-- Create application roles
DO $$
BEGIN
  IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'interview_app') THEN
    CREATE ROLE interview_app LOGIN PASSWORD 'secure_password_here';
  END IF;
  
  IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'admin_role') THEN  
    CREATE ROLE admin_role;
  END IF;
END
$$;

-- Grant basic permissions
GRANT CONNECT ON DATABASE "{{ 'interview_copilot' }}" TO interview_app;
GRANT USAGE ON SCHEMA public TO interview_app;

{% else %}
-- Ensure users table exists
DO $$
BEGIN
  IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'users') THEN
    RAISE EXCEPTION 'Users table must be created first. Run users migration.';
  END IF;
END
$$;

-- Create {{ tableName | snakeCase }} table
{% include './' + tableName + '.sql' %}
{% endif %}

-- Verify table creation
DO $$
BEGIN
  IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = '{{ tableName | snakeCase }}') THEN
    RAISE EXCEPTION 'Table {{ tableName | snakeCase }} was not created successfully';
  END IF;
  
  RAISE NOTICE 'Table {{ tableName | snakeCase }} created successfully';
END
$$;

-- Update migration tracking
INSERT INTO schema_migrations (version, name, applied_at) VALUES 
('{{ timestamp || 'YYYYMMDDHHMMSS' }}', 'create_{{ tableName | snakeCase }}', NOW())
ON CONFLICT (version) DO NOTHING;

COMMIT;

-- Migration Down (for rollback)
-- BEGIN;
-- 
-- -- Drop table and dependencies
-- DROP TABLE IF EXISTS {{ tableName | snakeCase }} CASCADE;
-- 
-- -- Remove from migration tracking  
-- DELETE FROM schema_migrations WHERE version = '{{ timestamp || 'YYYYMMDDHHMMSS' }}';
-- 
-- COMMIT;

-- Usage Examples:
/*
-- Apply this migration:
psql -d interview_copilot -f migrations/{{ timestamp || 'YYYYMMDDHHMMSS' }}_create_{{ tableName | snakeCase }}.sql

-- Rollback (uncomment the rollback section above):
-- psql -d interview_copilot -c "BEGIN; DROP TABLE IF EXISTS {{ tableName | snakeCase }} CASCADE; DELETE FROM schema_migrations WHERE version = '{{ timestamp || 'YYYYMMDDHHMMSS' }}'; COMMIT;"

-- Check if migration was applied:
SELECT * FROM schema_migrations WHERE name = 'create_{{ tableName | snakeCase }}';

-- Verify table structure:
\d {{ tableName | snakeCase }}

-- Check indexes:
\di {{ tableName | snakeCase }}*

-- Verify permissions:
\dp {{ tableName | snakeCase }}
*/