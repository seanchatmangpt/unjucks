-- {{ tableName | titleCase }} table schema for Interview Copilot
-- Generated by Unjucks template system

{% if withTimestamps %}
-- Enable updated_at timestamp trigger (PostgreSQL)
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
{% endif %}

-- Main {{ tableName | snakeCase }} table
CREATE TABLE {{ tableName | snakeCase }} (
  id BIGSERIAL PRIMARY KEY,
  
  -- Core fields
  {% if tableName == 'interviews' %}
  title VARCHAR(255) NOT NULL,
  description TEXT,
  type VARCHAR(50) NOT NULL DEFAULT 'technical' CHECK (type IN ('technical', 'behavioral', 'system-design')),
  difficulty VARCHAR(20) NOT NULL DEFAULT 'medium' CHECK (difficulty IN ('easy', 'medium', 'hard')),
  duration INTEGER NOT NULL DEFAULT 60 CHECK (duration >= 15 AND duration <= 180),
  status VARCHAR(20) NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'active', 'completed', 'archived')),
  
  -- AI Configuration
  ai_model VARCHAR(100) DEFAULT 'gpt-4',
  ai_temperature DECIMAL(3,2) DEFAULT 0.7 CHECK (ai_temperature >= 0 AND ai_temperature <= 2),
  ai_max_tokens INTEGER DEFAULT 1000 CHECK (ai_max_tokens >= 100 AND ai_max_tokens <= 4000),
  
  -- Interview Data
  questions JSONB DEFAULT '[]'::jsonb,
  rubric JSONB DEFAULT '{}'::jsonb,
  
  {% elif tableName == 'interview_sessions' %}
  interview_id BIGINT NOT NULL,
  candidate_name VARCHAR(255),
  candidate_email VARCHAR(255),
  started_at TIMESTAMP WITH TIME ZONE,
  completed_at TIMESTAMP WITH TIME ZONE,
  status VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'in_progress', 'completed', 'abandoned')),
  
  -- Session Data
  responses JSONB DEFAULT '[]'::jsonb,
  scores JSONB DEFAULT '{}'::jsonb,
  feedback JSONB DEFAULT '{}'::jsonb,
  overall_score INTEGER CHECK (overall_score >= 0 AND overall_score <= 100),
  
  -- AI Analysis
  ai_feedback JSONB DEFAULT '{}'::jsonb,
  strengths TEXT[],
  improvements TEXT[],
  
  {% elif tableName == 'questions' %}
  interview_id BIGINT,
  question_text TEXT NOT NULL,
  question_type VARCHAR(50) NOT NULL DEFAULT 'coding' CHECK (question_type IN ('coding', 'conceptual', 'behavioral', 'system-design')),
  difficulty VARCHAR(20) NOT NULL DEFAULT 'medium' CHECK (difficulty IN ('easy', 'medium', 'hard')),
  expected_answer TEXT,
  hints JSONB DEFAULT '[]'::jsonb,
  time_limit INTEGER CHECK (time_limit > 0),
  points INTEGER DEFAULT 10 CHECK (points > 0),
  
  {% elif tableName == 'responses' %}
  session_id BIGINT NOT NULL,
  question_id BIGINT NOT NULL,
  response_text TEXT,
  code_response TEXT,
  submitted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  time_taken INTEGER, -- in seconds
  
  -- AI Scoring
  ai_score INTEGER CHECK (ai_score >= 0 AND ai_score <= 100),
  ai_feedback JSONB DEFAULT '{}'::jsonb,
  manual_score INTEGER CHECK (manual_score >= 0 AND manual_score <= 100),
  manual_feedback TEXT,
  
  {% elif tableName == 'users' %}
  email VARCHAR(255) NOT NULL UNIQUE,
  name VARCHAR(255) NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  role VARCHAR(20) NOT NULL DEFAULT 'candidate' CHECK (role IN ('candidate', 'interviewer', 'admin')),
  is_verified BOOLEAN DEFAULT FALSE,
  verification_token VARCHAR(255),
  reset_token VARCHAR(255),
  reset_token_expires TIMESTAMP WITH TIME ZONE,
  
  -- Profile Data
  experience_level VARCHAR(20) CHECK (experience_level IN ('junior', 'mid', 'senior', 'principal')),
  preferred_technologies TEXT[],
  timezone VARCHAR(50),
  
  -- Statistics
  interviews_completed INTEGER DEFAULT 0,
  average_score DECIMAL(5,2),
  
  {% else %}
  name VARCHAR(255) NOT NULL,
  description TEXT,
  status VARCHAR(20) NOT NULL DEFAULT 'active',
  metadata JSONB DEFAULT '{}'::jsonb,
  {% endif %}
  
  {% if withConstraints %}
  -- Foreign Key Constraints
  {% if tableName == 'interview_sessions' %}
  user_id BIGINT REFERENCES users(id) ON DELETE CASCADE,
  {% endif %}
  {% if tableName == 'interviews' or tableName == 'interview_sessions' %}
  user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  {% endif %}
  {% if tableName == 'questions' %}
  interview_id BIGINT REFERENCES interviews(id) ON DELETE CASCADE,
  {% endif %}
  {% if tableName == 'responses' %}
  session_id BIGINT REFERENCES interview_sessions(id) ON DELETE CASCADE,
  question_id BIGINT REFERENCES questions(id) ON DELETE CASCADE,
  {% endif %}
  {% endif %}
  
  {% if withTimestamps %}
  -- Timestamps
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
  {% endif %}
);

{% if withIndexes %}
-- Indexes for performance
{% if tableName == 'interviews' %}
CREATE INDEX idx_{{ tableName | snakeCase }}_user_id ON {{ tableName | snakeCase }}(user_id);
CREATE INDEX idx_{{ tableName | snakeCase }}_type ON {{ tableName | snakeCase }}(type);
CREATE INDEX idx_{{ tableName | snakeCase }}_difficulty ON {{ tableName | snakeCase }}(difficulty);
CREATE INDEX idx_{{ tableName | snakeCase }}_status ON {{ tableName | snakeCase }}(status);
CREATE INDEX idx_{{ tableName | snakeCase }}_created_at ON {{ tableName | snakeCase }}(created_at DESC);

-- Full-text search index
CREATE INDEX idx_{{ tableName | snakeCase }}_search ON {{ tableName | snakeCase }} USING GIN(to_tsvector('english', title || ' ' || COALESCE(description, '')));

{% elif tableName == 'interview_sessions' %}
CREATE INDEX idx_{{ tableName | snakeCase }}_interview_id ON {{ tableName | snakeCase }}(interview_id);
CREATE INDEX idx_{{ tableName | snakeCase }}_user_id ON {{ tableName | snakeCase }}(user_id);
CREATE INDEX idx_{{ tableName | snakeCase }}_status ON {{ tableName | snakeCase }}(status);
CREATE INDEX idx_{{ tableName | snakeCase }}_started_at ON {{ tableName | snakeCase }}(started_at DESC);
CREATE INDEX idx_{{ tableName | snakeCase }}_completed_at ON {{ tableName | snakeCase }}(completed_at DESC);

{% elif tableName == 'questions' %}
CREATE INDEX idx_{{ tableName | snakeCase }}_interview_id ON {{ tableName | snakeCase }}(interview_id);
CREATE INDEX idx_{{ tableName | snakeCase }}_type ON {{ tableName | snakeCase }}(question_type);
CREATE INDEX idx_{{ tableName | snakeCase }}_difficulty ON {{ tableName | snakeCase }}(difficulty);

{% elif tableName == 'responses' %}
CREATE INDEX idx_{{ tableName | snakeCase }}_session_id ON {{ tableName | snakeCase }}(session_id);
CREATE INDEX idx_{{ tableName | snakeCase }}_question_id ON {{ tableName | snakeCase }}(question_id);
CREATE INDEX idx_{{ tableName | snakeCase }}_submitted_at ON {{ tableName | snakeCase }}(submitted_at DESC);

{% elif tableName == 'users' %}
CREATE UNIQUE INDEX idx_{{ tableName | snakeCase }}_email ON {{ tableName | snakeCase }}(email);
CREATE INDEX idx_{{ tableName | snakeCase }}_role ON {{ tableName | snakeCase }}(role);
CREATE INDEX idx_{{ tableName | snakeCase }}_is_verified ON {{ tableName | snakeCase }}(is_verified);
CREATE INDEX idx_{{ tableName | snakeCase }}_created_at ON {{ tableName | snakeCase }}(created_at DESC);

{% else %}
CREATE INDEX idx_{{ tableName | snakeCase }}_name ON {{ tableName | snakeCase }}(name);
CREATE INDEX idx_{{ tableName | snakeCase }}_status ON {{ tableName | snakeCase }}(status);
{% if withTimestamps %}
CREATE INDEX idx_{{ tableName | snakeCase }}_created_at ON {{ tableName | snakeCase }}(created_at DESC);
{% endif %}
{% endif %}
{% endif %}

{% if withTimestamps %}
-- Trigger for updated_at timestamp
CREATE TRIGGER set_{{ tableName | snakeCase }}_timestamp
  BEFORE UPDATE ON {{ tableName | snakeCase }}
  FOR EACH ROW
  EXECUTE FUNCTION trigger_set_timestamp();
{% endif %}

-- Comments for documentation
COMMENT ON TABLE {{ tableName | snakeCase }} IS 'Interview Copilot - {{ tableName | titleCase }} data';
{% if tableName == 'interviews' %}
COMMENT ON COLUMN {{ tableName | snakeCase }}.questions IS 'JSON array of interview questions with metadata';
COMMENT ON COLUMN {{ tableName | snakeCase }}.rubric IS 'JSON object defining scoring criteria';
COMMENT ON COLUMN {{ tableName | snakeCase }}.ai_model IS 'AI model used for interview simulation';
{% elif tableName == 'interview_sessions' %}
COMMENT ON COLUMN {{ tableName | snakeCase }}.responses IS 'JSON array of candidate responses';
COMMENT ON COLUMN {{ tableName | snakeCase }}.scores IS 'JSON object with detailed scoring breakdown';
COMMENT ON COLUMN {{ tableName | snakeCase }}.ai_feedback IS 'AI-generated feedback and analysis';
{% elif tableName == 'responses' %}
COMMENT ON COLUMN {{ tableName | snakeCase }}.ai_feedback IS 'AI analysis of the response';
COMMENT ON COLUMN {{ tableName | snakeCase }}.time_taken IS 'Response time in seconds';
{% endif %}

-- Security: Row Level Security (RLS)
{% if tableName != 'users' %}
ALTER TABLE {{ tableName | snakeCase }} ENABLE ROW LEVEL SECURITY;

-- Policy: Users can only see their own data
CREATE POLICY {{ tableName | snakeCase }}_user_isolation ON {{ tableName | snakeCase }}
  FOR ALL
  USING (user_id = current_setting('app.current_user_id')::bigint);

-- Policy: Admins can see all data
CREATE POLICY {{ tableName | snakeCase }}_admin_access ON {{ tableName | snakeCase }}
  FOR ALL
  TO admin_role
  USING (true);
{% endif %}

-- Grant permissions
{% if tableName == 'users' %}
GRANT SELECT, INSERT, UPDATE ON {{ tableName | snakeCase }} TO interview_app;
GRANT DELETE ON {{ tableName | snakeCase }} TO admin_role;
{% else %}
GRANT SELECT, INSERT, UPDATE, DELETE ON {{ tableName | snakeCase }} TO interview_app;
{% endif %}
GRANT USAGE, SELECT ON SEQUENCE {{ tableName | snakeCase }}_id_seq TO interview_app;

-- Sample data (for development)
{% if tableName == 'interviews' %}
INSERT INTO {{ tableName | snakeCase }} (title, description, type, difficulty, duration, user_id) VALUES
('JavaScript Fundamentals', 'Basic JavaScript concepts and syntax', 'technical', 'easy', 60, 1),
('React Component Design', 'Advanced React patterns and performance', 'technical', 'medium', 90, 1),
('System Design - Social Media', 'Design a scalable social media platform', 'system-design', 'hard', 120, 1),
('Behavioral Interview', 'Communication and team collaboration scenarios', 'behavioral', 'medium', 45, 1);

{% elif tableName == 'users' %}
INSERT INTO {{ tableName | snakeCase }} (email, name, password_hash, role, is_verified) VALUES
('admin@interviewcopilot.com', 'Admin User', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LjdqhGY7YgTz9w6PW', 'admin', true),
('interviewer@example.com', 'Jane Interviewer', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LjdqhGY7YgTz9w6PW', 'interviewer', true),
('candidate@example.com', 'John Candidate', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LjdqhGY7YgTz9w6PW', 'candidate', true);

{% elif tableName == 'questions' %}
-- Sample questions will be inserted via the application
-- when interviews are created with AI generation

{% endif %}