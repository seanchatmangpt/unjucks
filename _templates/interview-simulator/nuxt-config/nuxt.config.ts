// Nuxt configuration for {{ projectName | titleCase }}
// Generated by Unjucks Interview Copilot template
// https://nuxt.com/docs/api/configuration/nuxt-config

export default defineNuxtConfig({
  // Application metadata
  app: {
    head: {
      title: '{{ projectName | titleCase }}',
      titleTemplate: '%s - {{ projectName | titleCase }}',
      meta: [
        { charset: 'utf-8' },
        { name: 'viewport', content: 'width=device-width, initial-scale=1' },
        { name: 'description', content: 'AI-powered mock interview simulator for technical and behavioral interviews' },
        { name: 'keywords', content: 'interview, AI, simulation, technical interview, coding interview, behavioral interview' },
        { name: 'author', content: '{{ projectName | titleCase }} Team' },
        { name: 'robots', content: 'index, follow' },
        
        // Open Graph / Facebook
        { property: 'og:type', content: 'website' },
        { property: 'og:title', content: '{{ projectName | titleCase }} - AI Interview Simulator' },
        { property: 'og:description', content: 'Practice interviews with AI-powered feedback and real-time analysis' },
        { property: 'og:image', content: '/og-image.png' },
        
        // Twitter
        { name: 'twitter:card', content: 'summary_large_image' },
        { name: 'twitter:title', content: '{{ projectName | titleCase }} - AI Interview Simulator' },
        { name: 'twitter:description', content: 'Practice interviews with AI-powered feedback and real-time analysis' },
        { name: 'twitter:image', content: '/twitter-image.png' },
        
        // Theme
        { name: 'theme-color', content: '#2563eb' },
        { name: 'msapplication-TileColor', content: '#2563eb' }
      ],
      link: [
        { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' },
        { rel: 'icon', type: 'image/png', sizes: '32x32', href: '/favicon-32x32.png' },
        { rel: 'icon', type: 'image/png', sizes: '16x16', href: '/favicon-16x16.png' },
        { rel: 'apple-touch-icon', sizes: '180x180', href: '/apple-touch-icon.png' },
        { rel: 'manifest', href: '/site.webmanifest' }
      ]
    }
  },

  // Development configuration
  devtools: { 
    enabled: true,
    timeline: {
      enabled: true
    }
  },

  // TypeScript configuration
  typescript: {
    strict: true,
    typeCheck: true
  },

  // Modules
  modules: [
    {% if withUI %}'@nuxt/ui',{% endif %}
    {% if withContent %}'@nuxt/content',{% endif %}
    '@nuxt/eslint',
    '@nuxt/image',
    'nuxt-og-image',
    {% if withAI %}'nuxt-llms',{% endif %}
    '@pinia/nuxt',
    '@vueuse/nuxt',
    'nuxt-security'
  ],

  {% if withUI %}
  // Nuxt UI configuration
  ui: {
    colors: {
      primary: 'blue',
      neutral: 'slate'
    },
    icons: ['heroicons', 'lucide']
  },
  {% endif %}

  {% if withContent %}
  // Nuxt Content configuration
  content: {
    documentDriven: false,
    highlight: {
      theme: {
        default: 'github-light',
        dark: 'github-dark'
      },
      preload: ['javascript', 'typescript', 'python', 'java', 'sql', 'json']
    },
    markdown: {
      toc: {
        depth: 3,
        searchDepth: 3
      }
    }
  },
  {% endif %}

  // Global CSS
  css: [
    '~/assets/css/main.css'
  ],

  // Runtime configuration
  runtimeConfig: {
    // Private keys (only available on server-side)
    jwtSecret: process.env.JWT_SECRET || 'dev-secret-change-in-production',
    databaseUrl: process.env.DATABASE_URL || 'postgresql://localhost:5432/{{ projectName | kebabCase }}',
    redisUrl: process.env.REDIS_URL || 'redis://localhost:6379',
    
    {% if withAI %}
    // AI/LLM Configuration
    openaiApiKey: process.env.OPENAI_API_KEY,
    anthropicApiKey: process.env.ANTHROPIC_API_KEY,
    geminiApiKey: process.env.GEMINI_API_KEY,
    {% endif %}
    
    // Email configuration (for notifications)
    smtpHost: process.env.SMTP_HOST,
    smtpPort: process.env.SMTP_PORT,
    smtpUser: process.env.SMTP_USER,
    smtpPassword: process.env.SMTP_PASSWORD,
    
    // Public keys (exposed to frontend)
    public: {
      apiBase: process.env.API_BASE_URL || 'http://localhost:3000',
      appName: '{{ projectName | titleCase }}',
      appVersion: '1.0.0',
      environment: process.env.NODE_ENV || 'development',
      
      {% if withAI %}
      // AI Configuration (public)
      aiModels: {
        default: 'gpt-4',
        fallback: 'gpt-3.5-turbo',
        available: ['gpt-4', 'gpt-3.5-turbo', 'claude-3', 'gemini-pro']
      },
      {% endif %}
      
      // Feature flags
      features: {
        aiInterviews: true,
        realTimeFeedback: true,
        videoRecording: process.env.ENABLE_VIDEO === 'true',
        voiceAnalysis: process.env.ENABLE_VOICE === 'true',
        multiLanguage: true
      },
      
      // Analytics
      googleAnalyticsId: process.env.GOOGLE_ANALYTICS_ID,
      posthogKey: process.env.POSTHOG_KEY,
      
      // Social authentication
      githubClientId: process.env.GITHUB_CLIENT_ID,
      googleClientId: process.env.GOOGLE_CLIENT_ID
    }
  },

  // Nitro server configuration
  nitro: {
    esbuild: {
      options: {
        target: 'node18'
      }
    },
    experimental: {
      wasm: true
    },
    // Database connection
    storage: {
      redis: {
        driver: 'redis',
        connectionString: process.env.REDIS_URL || 'redis://localhost:6379'
      }
    }
  },

  {% if withAI %}
  // Nuxt LLMs configuration for AI features
  llms: {
    providers: {
      openai: {
        apiKey: process.env.OPENAI_API_KEY,
        model: 'gpt-4',
        temperature: 0.7,
        maxTokens: 2000
      },
      anthropic: {
        apiKey: process.env.ANTHROPIC_API_KEY,
        model: 'claude-3-sonnet-20240229',
        temperature: 0.7,
        maxTokens: 2000
      }
    },
    features: {
      caching: true,
      streaming: true,
      rateLimiting: {
        max: 100,
        windowMs: 60000 // 1 minute
      }
    }
  },
  {% endif %}

  // Build configuration
  build: {
    transpile: ['jsonwebtoken', 'bcryptjs']
  },

  // Vite configuration
  vite: {
    define: {
      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: false
    },
    optimizeDeps: {
      include: [
        'jsonwebtoken',
        'bcryptjs',
        'zod',
        '@vueuse/core'
      ]
    }
  },

  // ESLint configuration
  eslint: {
    config: {
      stylistic: {
        commaDangle: 'never',
        braceStyle: '1tbs'
      }
    }
  },

  // Security configuration
  security: {
    headers: {
      contentSecurityPolicy: {
        'img-src': ["'self'", 'data:', 'https:'],
        'font-src': ["'self'", 'https:', 'data:'],
        'style-src': ["'self'", "'unsafe-inline'", 'https:'],
        'script-src': ["'self'", "'unsafe-inline'", "'unsafe-eval'", 'https:'],
        'object-src': ["'none'"],
        'base-uri': ["'self'"],
        'form-action': ["'self'"],
        'frame-ancestors': ["'none'"],
        'upgrade-insecure-requests': true
      },
      crossOriginEmbedderPolicy: process.env.NODE_ENV === 'development' ? 'unsafe-none' : 'require-corp'
    },
    rateLimiter: {
      tokensPerInterval: 150,
      interval: 'hour',
      headers: false,
      driver: {
        name: 'redis'
      }
    }
  },

  // Server-side rendering
  ssr: true,

  // Route generation for static sites
  nitro: {
    prerender: {
      routes: ['/sitemap.xml', '/robots.txt'],
      crawlLinks: false
    }
  },

  // Experimental features
  experimental: {
    payloadExtraction: false,
    renderJsonPayloads: true,
    typedPages: true
  },

  // Compatibility
  compatibilityDate: '2024-09-06',

  // Future flags
  future: {
    compatibilityVersion: 4
  },

  // Hooks for build-time customization
  hooks: {
    'build:before': () => {
      console.log('ðŸš€ Building {{ projectName | titleCase }}...')
    },
    'build:done': () => {
      console.log('âœ… {{ projectName | titleCase }} build completed!')
    }
  },

  // Environment-specific overrides
  ...(process.env.NODE_ENV === 'production' && {
    // Production-only configuration
    nitro: {
      minify: true,
      sourceMap: false
    },
    sourcemap: {
      server: false,
      client: false
    }
  }),

  ...(process.env.NODE_ENV === 'development' && {
    // Development-only configuration
    devtools: { enabled: true },
    sourcemap: {
      server: true,
      client: true
    }
  })
})