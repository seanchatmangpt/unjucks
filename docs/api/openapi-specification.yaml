openapi: 3.0.3
info:
  title: Unjucks Enterprise API
  version: 2.0.8
  description: |
    Comprehensive API for Unjucks - Advanced template generation and scaffolding platform.
    
    Unjucks combines the power of Nunjucks templating with Hygen-style scaffolding,
    extended with RDF/Turtle support for semantic web applications and enterprise features.
    
    ## Key Features
    - **Template Generation**: Dynamic file and project scaffolding
    - **Semantic Web Support**: RDF/Turtle template generation
    - **Enterprise Features**: Multi-tenant, RBAC, audit logging
    - **Real-time Collaboration**: WebSocket-based template sharing
    - **Extensible Plugin System**: Custom template processors
    
    ## Authentication
    This API supports multiple authentication methods:
    - API Keys for programmatic access
    - OAuth 2.0 for web applications
    - SAML SSO for enterprise integration
    - LDAP for directory-based authentication
    
    ## Rate Limiting
    - **Free Tier**: 100 requests/hour
    - **Pro Tier**: 10,000 requests/hour
    - **Enterprise**: Unlimited with fair usage
    
    ## Support
    - Email: support@unjucks.dev
    - Documentation: https://docs.unjucks.dev
    - GitHub: https://github.com/unjucks/unjucks
  contact:
    name: Unjucks Support Team
    email: support@unjucks.dev
    url: https://unjucks.dev/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://unjucks.dev/terms
  
servers:
  - url: https://api.unjucks.dev/v2
    description: Production API Server
  - url: https://staging-api.unjucks.dev/v2
    description: Staging API Server
  - url: http://localhost:3000/api/v2
    description: Local Development Server

security:
  - ApiKeyAuth: []
  - OAuth2: ['read', 'write', 'admin']
  - BearerAuth: []

paths:
  /templates:
    get:
      summary: List available templates
      description: |
        Retrieve a paginated list of available templates with filtering and search capabilities.
        Supports various template types including generators, components, and semantic templates.
      operationId: listTemplates
      tags:
        - Templates
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: type
          in: query
          description: Filter by template type
          required: false
          schema:
            type: string
            enum: [generator, component, semantic, enterprise]
        - name: search
          in: query
          description: Search templates by name or description
          required: false
          schema:
            type: string
            maxLength: 255
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateListResponse'
              example:
                data:
                  - id: "react-component"
                    name: "React Component Generator"
                    description: "Generate React functional components with TypeScript"
                    type: "generator"
                    version: "1.2.0"
                    tags: ["react", "typescript", "component"]
                    author: "Unjucks Team"
                    created_at: "2024-01-15T10:30:00Z"
                    updated_at: "2024-03-20T14:45:00Z"
                pagination:
                  page: 1
                  limit: 20
                  total: 156
                  has_more: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create new template
      description: |
        Create a new template with full configuration including variables, files, and metadata.
        Supports uploading template archives or defining inline templates.
      operationId: createTemplate
      tags:
        - Templates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplateRequest'
          multipart/form-data:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/TemplateMetadata'
                archive:
                  type: string
                  format: binary
                  description: Template archive file (zip/tar.gz)
      responses:
        '201':
          description: Template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
              example:
                id: "custom-api-generator"
                name: "Custom API Generator"
                description: "Generate REST API with custom business logic"
                type: "generator"
                version: "1.0.0"
                status: "active"
                files:
                  - path: "api/{{name}}.js"
                    template: "const {{name}} = require('./base')\n..."
                variables:
                  - name: "name"
                    type: "string"
                    description: "API endpoint name"
                    required: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/ValidationError'

  /templates/{templateId}:
    get:
      summary: Get template details
      description: Retrieve detailed information about a specific template including all files and configuration
      operationId: getTemplate
      tags:
        - Templates
      parameters:
        - name: templateId
          in: path
          required: true
          description: Unique template identifier
          schema:
            type: string
            pattern: '^[a-zA-Z0-9][a-zA-Z0-9_-]*$'
      responses:
        '200':
          description: Template details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    put:
      summary: Update template
      description: Update an existing template's metadata, files, or configuration
      operationId: updateTemplate
      tags:
        - Templates
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTemplateRequest'
      responses:
        '200':
          description: Template updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
    
    delete:
      summary: Delete template
      description: Permanently delete a template and all associated files
      operationId: deleteTemplate
      tags:
        - Templates
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Template deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Cannot delete template - has active dependencies

  /generate:
    post:
      summary: Generate from template
      description: |
        Generate files from a template with provided variables and configuration.
        Supports both dry-run mode for preview and actual file generation.
      operationId: generateFromTemplate
      tags:
        - Generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateRequest'
            example:
              template_id: "react-component"
              variables:
                name: "UserProfile"
                with_tests: true
                use_typescript: true
              output_path: "./src/components"
              dry_run: false
              force: false
      responses:
        '200':
          description: Generation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateResponse'
              example:
                status: "success"
                files_generated: 3
                files:
                  - path: "./src/components/UserProfile.tsx"
                    status: "created"
                    size: 1247
                  - path: "./src/components/UserProfile.test.tsx"
                    status: "created"
                    size: 892
                  - path: "./src/components/index.ts"
                    status: "updated"
                    size: 156
                execution_time: 234
                template_version: "1.2.0"
        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/ValidationError'

  /semantic/generate:
    post:
      summary: Generate semantic templates
      description: |
        Generate templates with RDF/Turtle semantic web support.
        Creates ontologies, vocabularies, and linked data structures.
      operationId: generateSemantic
      tags:
        - Semantic Web
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SemanticGenerateRequest'
      responses:
        '200':
          description: Semantic generation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemanticGenerateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /projects:
    get:
      summary: List user projects
      description: Retrieve paginated list of user's template projects
      operationId: listProjects
      tags:
        - Projects
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
    
    post:
      summary: Create new project
      description: Create a new template project with initial configuration
      operationId: createProject
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /health:
    get:
      summary: Health check endpoint
      description: Check API health and service status
      operationId: healthCheck
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "healthy"
                timestamp: "2024-03-20T15:30:00Z"
                version: "2.0.8"
                services:
                  database: "healthy"
                  cache: "healthy"
                  storage: "healthy"
                  monitoring: "healthy"

  /metrics:
    get:
      summary: System metrics
      description: Retrieve system performance and usage metrics
      operationId: getMetrics
      tags:
        - System
      security:
        - ApiKeyAuth: [admin]
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for programmatic access
    
    OAuth2:
      type: oauth2
      description: OAuth 2.0 authentication
      flows:
        authorizationCode:
          authorizationUrl: https://auth.unjucks.dev/oauth/authorize
          tokenUrl: https://auth.unjucks.dev/oauth/token
          scopes:
            read: Read access to templates and projects
            write: Create and modify templates
            admin: Administrative access
    
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication

  schemas:
    Template:
      type: object
      required:
        - id
        - name
        - type
        - version
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9][a-zA-Z0-9_-]*$'
          description: Unique template identifier
          example: "react-component"
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Human-readable template name
          example: "React Component Generator"
        description:
          type: string
          maxLength: 500
          description: Template description
          example: "Generate React functional components with TypeScript support"
        type:
          type: string
          enum: [generator, component, semantic, enterprise]
          description: Template type category
        version:
          type: string
          pattern: '^\d+\.\d+\.\d+$'
          description: Semantic version
          example: "1.2.0"
        tags:
          type: array
          items:
            type: string
          description: Template tags for categorization
          example: ["react", "typescript", "component"]
        author:
          type: string
          description: Template author
          example: "Unjucks Team"
        variables:
          type: array
          items:
            $ref: '#/components/schemas/TemplateVariable'
          description: Template variables configuration
        files:
          type: array
          items:
            $ref: '#/components/schemas/TemplateFile'
          description: Template files
        status:
          type: string
          enum: [active, deprecated, archived]
          description: Template status
        created_at:
          type: string
          format: date-time
          description: Template creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        metadata:
          type: object
          additionalProperties: true
          description: Additional template metadata

    TemplateVariable:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$'
          description: Variable name
          example: "componentName"
        type:
          type: string
          enum: [string, number, boolean, array, object]
          description: Variable data type
        description:
          type: string
          description: Variable description
          example: "Name of the React component to generate"
        required:
          type: boolean
          default: false
          description: Whether variable is required
        default:
          description: Default value for the variable
          example: "MyComponent"
        validation:
          type: object
          properties:
            pattern:
              type: string
              description: Regex pattern for validation
            min:
              type: number
              description: Minimum value/length
            max:
              type: number
              description: Maximum value/length
        options:
          type: array
          items:
            type: string
          description: Predefined options for selection

    TemplateFile:
      type: object
      required:
        - path
        - template
      properties:
        path:
          type: string
          description: Output file path (supports variables)
          example: "components/{{name}}/{{name}}.tsx"
        template:
          type: string
          description: File template content
        encoding:
          type: string
          enum: [utf8, base64, binary]
          default: utf8
          description: File encoding
        executable:
          type: boolean
          default: false
          description: Whether file should be executable
        inject:
          type: boolean
          default: false
          description: Whether to inject into existing file
        injection:
          type: object
          properties:
            before:
              type: string
              description: Inject before this pattern
            after:
              type: string
              description: Inject after this pattern
            skip_if:
              type: string
              description: Skip injection if pattern exists

    CreateTemplateRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        type:
          type: string
          enum: [generator, component, semantic, enterprise]
        tags:
          type: array
          items:
            type: string
        variables:
          type: array
          items:
            $ref: '#/components/schemas/TemplateVariable'
        files:
          type: array
          items:
            $ref: '#/components/schemas/TemplateFile'
        metadata:
          type: object
          additionalProperties: true

    UpdateTemplateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        tags:
          type: array
          items:
            type: string
        variables:
          type: array
          items:
            $ref: '#/components/schemas/TemplateVariable'
        files:
          type: array
          items:
            $ref: '#/components/schemas/TemplateFile'
        status:
          type: string
          enum: [active, deprecated, archived]
        metadata:
          type: object
          additionalProperties: true

    GenerateRequest:
      type: object
      required:
        - template_id
        - variables
      properties:
        template_id:
          type: string
          description: ID of template to use for generation
        variables:
          type: object
          additionalProperties: true
          description: Variables to use in template generation
        output_path:
          type: string
          description: Base output path for generated files
          default: "./"
        dry_run:
          type: boolean
          default: false
          description: Preview generation without creating files
        force:
          type: boolean
          default: false
          description: Overwrite existing files
        template_version:
          type: string
          description: Specific template version to use

    GenerateResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, partial, failed]
          description: Generation status
        files_generated:
          type: integer
          description: Number of files generated
        files:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: Generated file path
              status:
                type: string
                enum: [created, updated, skipped, error]
              size:
                type: integer
                description: File size in bytes
              error:
                type: string
                description: Error message if status is error
        execution_time:
          type: integer
          description: Generation time in milliseconds
        template_version:
          type: string
          description: Template version used
        warnings:
          type: array
          items:
            type: string
          description: Non-fatal warnings during generation

    SemanticGenerateRequest:
      type: object
      required:
        - ontology_type
        - namespace
      properties:
        ontology_type:
          type: string
          enum: [vocabulary, ontology, knowledge_graph]
        namespace:
          type: string
          format: uri
          description: RDF namespace URI
        format:
          type: string
          enum: [turtle, rdf-xml, n-triples, json-ld]
          default: turtle
        classes:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              properties:
                type: array
                items:
                  type: string
        properties:
          type: array
          items:
            type: object

    SemanticGenerateResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, failed]
        ontology_files:
          type: array
          items:
            type: string
        validation_report:
          type: object
          properties:
            valid:
              type: boolean
            errors:
              type: array
              items:
                type: string
            warnings:
              type: array
              items:
                type: string

    Project:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Unique project identifier
        name:
          type: string
          description: Project name
        description:
          type: string
          description: Project description
        templates:
          type: array
          items:
            type: string
          description: Associated template IDs
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true

    CreateProjectRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        templates:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties: true

    TemplateListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Template'
        pagination:
          $ref: '#/components/schemas/Pagination'

    ProjectListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
        limit:
          type: integer
          minimum: 1
          description: Items per page
        total:
          type: integer
          minimum: 0
          description: Total number of items
        has_more:
          type: boolean
          description: Whether more pages exist

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        services:
          type: object
          additionalProperties:
            type: string
            enum: [healthy, degraded, unhealthy]
        checks:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              status:
                type: string
              response_time:
                type: integer
              message:
                type: string

    MetricsResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        performance:
          type: object
          properties:
            avg_response_time:
              type: number
            requests_per_second:
              type: number
            error_rate:
              type: number
        usage:
          type: object
          properties:
            total_templates:
              type: integer
            total_generations:
              type: integer
            active_users:
              type: integer
        system:
          type: object
          properties:
            cpu_usage:
              type: number
            memory_usage:
              type: number
            disk_usage:
              type: number

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          additionalProperties: true
          description: Additional error details
        trace_id:
          type: string
          description: Request trace ID for debugging
        timestamp:
          type: string
          format: date-time
          description: Error timestamp

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            validation_errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    description: Field that failed validation
                  message:
                    type: string
                    description: Validation error message
                  code:
                    type: string
                    description: Validation error code

    TemplateMetadata:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        version:
          type: string
        author:
          type: string
        license:
          type: string
        repository:
          type: string
          format: uri
        documentation:
          type: string
          format: uri
        keywords:
          type: array
          items:
            type: string
        dependencies:
          type: object
          additionalProperties:
            type: string
        requirements:
          type: object
          properties:
            node_version:
              type: string
            os:
              type: array
              items:
                type: string

  responses:
    BadRequest:
      description: Bad Request - Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "bad_request"
            message: "Invalid input parameters provided"
            details:
              parameter: "template_id"
              issue: "Template ID must match pattern ^[a-zA-Z0-9][a-zA-Z0-9_-]*$"
            trace_id: "req_abc123def456"
            timestamp: "2024-03-20T15:30:00Z"
    
    Unauthorized:
      description: Unauthorized - Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "unauthorized"
            message: "Authentication required to access this resource"
            trace_id: "req_xyz789uvw012"
            timestamp: "2024-03-20T15:30:00Z"
    
    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "forbidden"
            message: "Insufficient permissions to perform this action"
            details:
              required_scope: "admin"
              current_scope: "read"
            trace_id: "req_mno345pqr678"
            timestamp: "2024-03-20T15:30:00Z"
    
    NotFound:
      description: Not Found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "not_found"
            message: "Template with ID 'non-existent-template' not found"
            trace_id: "req_stu901vwx234"
            timestamp: "2024-03-20T15:30:00Z"
    
    Conflict:
      description: Conflict - Resource already exists or conflict with current state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "conflict"
            message: "Template with this name already exists"
            details:
              existing_id: "react-component"
              conflicting_field: "name"
            trace_id: "req_ghi567jkl890"
            timestamp: "2024-03-20T15:30:00Z"
    
    ValidationError:
      description: Validation Error - Request data validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            error: "validation_error"
            message: "Request validation failed"
            validation_errors:
              - field: "variables.name"
                message: "Name is required"
                code: "required"
              - field: "template_id"
                message: "Template ID must be alphanumeric with hyphens/underscores only"
                code: "pattern"
            trace_id: "req_def123ghi456"
            timestamp: "2024-03-20T15:30:00Z"
    
    RateLimited:
      description: Rate Limit Exceeded
      headers:
        X-RateLimit-Limit:
          description: Request limit per time window
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: Remaining requests in current window
          schema:
            type: integer
        X-RateLimit-Reset:
          description: Time when rate limit resets (Unix timestamp)
          schema:
            type: integer
        Retry-After:
          description: Seconds to wait before retrying
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "rate_limit_exceeded"
            message: "Rate limit exceeded. Please try again later."
            details:
              limit: 100
              window: "1h"
              retry_after: 3600
            trace_id: "req_abc123def456"
            timestamp: "2024-03-20T15:30:00Z"
    
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "internal_server_error"
            message: "An unexpected error occurred. Please try again later."
            trace_id: "req_err789xyz012"
            timestamp: "2024-03-20T15:30:00Z"

tags:
  - name: Templates
    description: Template management operations
  - name: Generation
    description: Template generation and scaffolding
  - name: Semantic Web
    description: RDF/Turtle semantic web operations
  - name: Projects
    description: Project management operations
  - name: System
    description: System health and monitoring

externalDocs:
  description: Full API Documentation
  url: https://docs.unjucks.dev/api