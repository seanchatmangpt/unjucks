# RDF/Turtle Integration Examples for Unjucks v2
# Comprehensive examples of semantic web integration and knowledge graph support

# =============================================================================
# BASIC ONTOLOGY DEFINITIONS FOR CODE GENERATION
# =============================================================================

# Define namespaces for our code generation ontology
@prefix unjucks: <https://unjucks.dev/ontology#> .
@prefix code: <https://unjucks.dev/ontology/code#> .
@prefix template: <https://unjucks.dev/ontology/template#> .
@prefix gen: <https://unjucks.dev/ontology/generation#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dc: <http://purl.org/dc/terms/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .

# =============================================================================
# CORE ONTOLOGY CLASSES
# =============================================================================

# Main code generation classes
unjucks:Template a owl:Class ;
    rdfs:label "Template" ;
    rdfs:comment "A code generation template that can produce source code files" ;
    rdfs:subClassOf [
        a owl:Restriction ;
        owl:onProperty template:hasVariable ;
        owl:minCardinality "0"^^xsd:nonNegativeInteger
    ] .

unjucks:Generator a owl:Class ;
    rdfs:label "Generator" ;
    rdfs:comment "A collection of related templates that work together" ;
    rdfs:subClassOf [
        a owl:Restriction ;
        owl:onProperty template:contains ;
        owl:minCardinality "1"^^xsd:nonNegativeInteger
    ] .

unjucks:Variable a owl:Class ;
    rdfs:label "Template Variable" ;
    rdfs:comment "A configurable parameter used in template generation" .

unjucks:GeneratedArtifact a owl:Class ;
    rdfs:label "Generated Artifact" ;
    rdfs:comment "A file or resource created by template generation" .

# Code structure classes
code:Class a owl:Class ;
    rdfs:label "Code Class" ;
    rdfs:comment "A class definition in generated code" .

code:Method a owl:Class ;
    rdfs:label "Method" ;
    rdfs:comment "A method or function in generated code" .

code:Property a owl:Class ;
    rdfs:label "Property" ;
    rdfs:comment "A property or field in generated code" .

code:Interface a owl:Class ;
    rdfs:label "Interface" ;
    rdfs:comment "An interface definition in generated code" .

code:Module a owl:Class ;
    rdfs:label "Module" ;
    rdfs:comment "A module or namespace in generated code" .

# =============================================================================
# PROPERTIES AND RELATIONSHIPS
# =============================================================================

# Template properties
template:hasVariable a owl:ObjectProperty ;
    rdfs:label "has variable" ;
    rdfs:domain unjucks:Template ;
    rdfs:range unjucks:Variable .

template:generates a owl:ObjectProperty ;
    rdfs:label "generates" ;
    rdfs:domain unjucks:Template ;
    rdfs:range unjucks:GeneratedArtifact .

template:outputPath a owl:DatatypeProperty ;
    rdfs:label "output path" ;
    rdfs:domain unjucks:Template ;
    rdfs:range xsd:string .

template:templateEngine a owl:DatatypeProperty ;
    rdfs:label "template engine" ;
    rdfs:domain unjucks:Template ;
    rdfs:range xsd:string .

# Variable properties
template:variableName a owl:DatatypeProperty ;
    rdfs:label "variable name" ;
    rdfs:domain unjucks:Variable ;
    rdfs:range xsd:string .

template:variableType a owl:DatatypeProperty ;
    rdfs:label "variable type" ;
    rdfs:domain unjucks:Variable ;
    rdfs:range xsd:string .

template:isRequired a owl:DatatypeProperty ;
    rdfs:label "is required" ;
    rdfs:domain unjucks:Variable ;
    rdfs:range xsd:boolean .

template:defaultValue a owl:DatatypeProperty ;
    rdfs:label "default value" ;
    rdfs:domain unjucks:Variable ;
    rdfs:range xsd:string .

# Generation properties
gen:generatedAt a owl:DatatypeProperty ;
    rdfs:label "generated at" ;
    rdfs:domain unjucks:GeneratedArtifact ;
    rdfs:range xsd:dateTime .

gen:generatedBy a owl:ObjectProperty ;
    rdfs:label "generated by" ;
    rdfs:domain unjucks:GeneratedArtifact ;
    rdfs:range unjucks:Template .

gen:sourceTemplate a owl:ObjectProperty ;
    rdfs:label "source template" ;
    rdfs:domain unjucks:GeneratedArtifact ;
    rdfs:range unjucks:Template .

# Code structure properties
code:hasMethod a owl:ObjectProperty ;
    rdfs:label "has method" ;
    rdfs:domain code:Class ;
    rdfs:range code:Method .

code:hasProperty a owl:ObjectProperty ;
    rdfs:label "has property" ;
    rdfs:domain code:Class ;
    rdfs:range code:Property .

code:implements a owl:ObjectProperty ;
    rdfs:label "implements" ;
    rdfs:domain code:Class ;
    rdfs:range code:Interface .

code:extendsClass a owl:ObjectProperty ;
    rdfs:label "extends class" ;
    rdfs:domain code:Class ;
    rdfs:range code:Class .

code:methodName a owl:DatatypeProperty ;
    rdfs:label "method name" ;
    rdfs:domain code:Method ;
    rdfs:range xsd:string .

code:propertyName a owl:DatatypeProperty ;
    rdfs:label "property name" ;
    rdfs:domain code:Property ;
    rdfs:range xsd:string .

code:visibility a owl:DatatypeProperty ;
    rdfs:label "visibility" ;
    rdfs:domain [ owl:unionOf (code:Method code:Property) ] ;
    rdfs:range xsd:string .

# =============================================================================
# EXAMPLE TEMPLATE DEFINITIONS
# =============================================================================

# React Component Template
:ReactComponentTemplate a unjucks:Template ;
    rdfs:label "React Component Template" ;
    dc:description "Generates a React TypeScript component with props and styling" ;
    template:outputPath "src/components/{componentName}/{componentName}.tsx" ;
    template:templateEngine "nunjucks" ;
    template:hasVariable :ComponentNameVariable, :HasPropsVariable, :StylingVariable ;
    dc:created "2024-01-01T00:00:00Z"^^xsd:dateTime ;
    dc:creator <https://unjucks.dev/team#developer> .

:ComponentNameVariable a unjucks:Variable ;
    template:variableName "componentName" ;
    template:variableType "string" ;
    template:isRequired true ;
    rdfs:comment "Component name in PascalCase" .

:HasPropsVariable a unjucks:Variable ;
    template:variableName "hasProps" ;
    template:variableType "boolean" ;
    template:isRequired false ;
    template:defaultValue "true" ;
    rdfs:comment "Include props interface" .

:StylingVariable a unjucks:Variable ;
    template:variableName "styling" ;
    template:variableType "enum" ;
    template:isRequired false ;
    template:defaultValue "css-modules" ;
    rdfs:comment "Styling approach: css-modules, styled-components, or tailwind" .

# Service Template
:ServiceTemplate a unjucks:Template ;
    rdfs:label "Service Template" ;
    dc:description "Generates a TypeScript service class with dependency injection" ;
    template:outputPath "src/services/{serviceName}.ts" ;
    template:templateEngine "nunjucks" ;
    template:hasVariable :ServiceNameVariable, :DatabaseTypeVariable, :EnableAuthVariable .

:ServiceNameVariable a unjucks:Variable ;
    template:variableName "serviceName" ;
    template:variableType "string" ;
    template:isRequired true ;
    rdfs:comment "Service class name in PascalCase" .

:DatabaseTypeVariable a unjucks:Variable ;
    template:variableName "databaseType" ;
    template:variableType "enum" ;
    template:isRequired false ;
    template:defaultValue "postgresql" ;
    rdfs:comment "Database type: postgresql, mysql, mongodb, or sqlite" .

:EnableAuthVariable a unjucks:Variable ;
    template:variableName "enableAuth" ;
    template:variableType "boolean" ;
    template:isRequired false ;
    template:defaultValue false ;
    rdfs:comment "Enable authentication middleware" .

# =============================================================================
# GENERATED CODE STRUCTURE EXAMPLES
# =============================================================================

# Example: Generated User Service Class
:UserServiceClass a code:Class ;
    rdfs:label "UserService" ;
    dc:description "Generated user management service" ;
    code:hasMethod :CreateUserMethod, :GetUserMethod, :UpdateUserMethod, :DeleteUserMethod ;
    code:hasProperty :DatabaseConnection, :Logger ;
    gen:generatedBy :ServiceTemplate ;
    gen:generatedAt "2024-01-15T10:30:00Z"^^xsd:dateTime .

:CreateUserMethod a code:Method ;
    code:methodName "createUser" ;
    code:visibility "public" ;
    rdfs:comment "Creates a new user in the system" .

:GetUserMethod a code:Method ;
    code:methodName "getUserById" ;
    code:visibility "public" ;
    rdfs:comment "Retrieves a user by ID" .

:UpdateUserMethod a code:Method ;
    code:methodName "updateUser" ;
    code:visibility "public" ;
    rdfs:comment "Updates an existing user" .

:DeleteUserMethod a code:Method ;
    code:methodName "deleteUser" ;
    code:visibility "public" ;
    rdfs:comment "Deletes a user from the system" .

:DatabaseConnection a code:Property ;
    code:propertyName "db" ;
    code:visibility "private" ;
    rdfs:comment "Database connection instance" .

:Logger a code:Property ;
    code:propertyName "logger" ;
    code:visibility "private" ;
    rdfs:comment "Logger instance for service operations" .

# =============================================================================
# GENERATION CONTEXT AND METADATA
# =============================================================================

# Generation Session
:GenerationSession2024_01_15 a gen:GenerationSession ;
    rdfs:label "Generation Session 2024-01-15" ;
    gen:startedAt "2024-01-15T10:00:00Z"^^xsd:dateTime ;
    gen:completedAt "2024-01-15T10:35:00Z"^^xsd:dateTime ;
    gen:usedTemplate :ServiceTemplate ;
    gen:produced :UserServiceArtifact, :UserServiceTestArtifact .

:UserServiceArtifact a unjucks:GeneratedArtifact ;
    rdfs:label "UserService.ts" ;
    gen:filePath "src/services/UserService.ts" ;
    gen:fileSize "2048"^^xsd:integer ;
    gen:generatedBy :ServiceTemplate ;
    gen:generatedAt "2024-01-15T10:30:00Z"^^xsd:dateTime ;
    gen:contains :UserServiceClass .

:UserServiceTestArtifact a unjucks:GeneratedArtifact ;
    rdfs:label "UserService.test.ts" ;
    gen:filePath "src/services/UserService.test.ts" ;
    gen:fileSize "1024"^^xsd:integer ;
    gen:generatedBy :ServiceTestTemplate ;
    gen:generatedAt "2024-01-15T10:31:00Z"^^xsd:dateTime .

# =============================================================================
# DOMAIN-SPECIFIC EXTENSIONS
# =============================================================================

# E-commerce Domain Extension
@prefix ecom: <https://unjucks.dev/ontology/ecommerce#> .

ecom:ProductService a code:Class ;
    rdfs:subClassOf code:Class ;
    rdfs:label "Product Service" ;
    dc:description "E-commerce product management service" ;
    code:hasMethod ecom:AddToCartMethod, ecom:CalculatePriceMethod, ecom:CheckInventoryMethod .

ecom:AddToCartMethod a code:Method ;
    rdfs:subClassOf code:Method ;
    code:methodName "addToCart" ;
    rdfs:comment "Adds a product to shopping cart" .

ecom:CalculatePriceMethod a code:Method ;
    rdfs:subClassOf code:Method ;
    code:methodName "calculatePrice" ;
    rdfs:comment "Calculates product price with discounts" .

ecom:CheckInventoryMethod a code:Method ;
    rdfs:subClassOf code:Method ;
    code:methodName "checkInventory" ;
    rdfs:comment "Checks product availability in inventory" .

# Blog Domain Extension  
@prefix blog: <https://unjucks.dev/ontology/blog#> .

blog:BlogPostClass a code:Class ;
    rdfs:subClassOf code:Class ;
    rdfs:label "Blog Post" ;
    dc:description "Blog post entity with content management" ;
    code:hasProperty blog:TitleProperty, blog:ContentProperty, blog:AuthorProperty, blog:PublishedAtProperty .

blog:TitleProperty a code:Property ;
    code:propertyName "title" ;
    code:visibility "public" ;
    rdfs:comment "Blog post title" .

blog:ContentProperty a code:Property ;
    code:propertyName "content" ;
    code:visibility "public" ;
    rdfs:comment "Blog post content in markdown" .

blog:AuthorProperty a code:Property ;
    code:propertyName "author" ;
    code:visibility "public" ;
    rdfs:comment "Blog post author" .

blog:PublishedAtProperty a code:Property ;
    code:propertyName "publishedAt" ;
    code:visibility "public" ;
    rdfs:comment "Publication timestamp" .

# =============================================================================
# TEMPLATE RELATIONSHIPS AND DEPENDENCIES
# =============================================================================

# Template dependency graph
:ReactComponentTemplate template:dependsOn :TypeScriptConfigTemplate .
:ServiceTemplate template:dependsOn :DatabaseConfigTemplate .
:APIControllerTemplate template:dependsOn :ServiceTemplate, :ValidationSchemaTemplate .

:TypeScriptConfigTemplate a unjucks:Template ;
    rdfs:label "TypeScript Config Template" ;
    template:outputPath "tsconfig.json" ;
    rdfs:comment "Generates TypeScript configuration file" .

:DatabaseConfigTemplate a unjucks:Template ;
    rdfs:label "Database Config Template" ;
    template:outputPath "src/config/database.ts" ;
    rdfs:comment "Generates database connection configuration" .

:ValidationSchemaTemplate a unjucks:Template ;
    rdfs:label "Validation Schema Template" ;
    template:outputPath "src/schemas/{entityName}.schema.ts" ;
    rdfs:comment "Generates Zod or Joi validation schemas" .

# Template Collections (Generators)
:WebAppGenerator a unjucks:Generator ;
    rdfs:label "Web Application Generator" ;
    dc:description "Complete web application with frontend, backend, and database" ;
    template:contains :ReactComponentTemplate, :ServiceTemplate, :APIControllerTemplate, :DatabaseMigrationTemplate .

:MicroserviceGenerator a unjucks:Generator ;
    rdfs:label "Microservice Generator" ;
    dc:description "Microservice with Docker, Kubernetes, and monitoring" ;
    template:contains :ServiceTemplate, :DockerfileTemplate, :KubernetesTemplate, :MonitoringTemplate .

# =============================================================================
# VERSIONING AND EVOLUTION
# =============================================================================

# Template versioning
:ReactComponentTemplate_v1 a unjucks:Template ;
    rdfs:label "React Component Template v1" ;
    template:version "1.0.0" ;
    template:deprecated true ;
    template:replacedBy :ReactComponentTemplate_v2 .

:ReactComponentTemplate_v2 a unjucks:Template ;
    rdfs:label "React Component Template v2" ;
    template:version "2.0.0" ;
    template:replaces :ReactComponentTemplate_v1 ;
    rdfs:comment "Updated with hooks support and better TypeScript integration" .

# Migration mappings
:ReactComponentMigration a gen:TemplateMigration ;
    rdfs:label "React Component v1 to v2 Migration" ;
    gen:fromTemplate :ReactComponentTemplate_v1 ;
    gen:toTemplate :ReactComponentTemplate_v2 ;
    gen:migrationRules :ClassToFunctionComponentRule, :StateToHooksRule .

# =============================================================================
# QUALITY AND METRICS
# =============================================================================

# Code quality metrics
:CodeQualityMetrics a owl:Class ;
    rdfs:label "Code Quality Metrics" ;
    rdfs:comment "Quality measurements for generated code" .

:UserServiceMetrics a :CodeQualityMetrics ;
    gen:measuresArtifact :UserServiceArtifact ;
    gen:complexityScore "7"^^xsd:integer ;
    gen:maintainabilityIndex "85"^^xsd:integer ;
    gen:testCoverage "92.5"^^xsd:decimal ;
    gen:linesOfCode "150"^^xsd:integer ;
    gen:codeSmells "2"^^xsd:integer .

# Performance metrics
:PerformanceMetrics a owl:Class ;
    rdfs:label "Performance Metrics" ;
    rdfs:comment "Performance measurements for template generation" .

:ServiceTemplatePerformance a :PerformanceMetrics ;
    gen:measuresTemplate :ServiceTemplate ;
    gen:averageGenerationTime "250"^^xsd:integer ; # milliseconds
    gen:memoryUsage "15.5"^^xsd:decimal ; # MB
    gen:cacheHitRate "85.7"^^xsd:decimal ; # percentage
    gen:lastMeasured "2024-01-15T10:00:00Z"^^xsd:dateTime .

# =============================================================================
# INTEGRATION WITH EXTERNAL SYSTEMS
# =============================================================================

# Git integration
@prefix git: <https://unjucks.dev/ontology/git#> .

:GitRepository a git:Repository ;
    git:url "https://github.com/user/project" ;
    git:branch "main" ;
    git:contains :UserServiceArtifact, :UserServiceTestArtifact .

:CommitInfo a git:Commit ;
    git:hash "abc123def456" ;
    git:message "Generated UserService with authentication support" ;
    git:author <https://unjucks.dev/team#developer> ;
    git:timestamp "2024-01-15T10:35:00Z"^^xsd:dateTime ;
    git:includes :UserServiceArtifact .

# CI/CD integration
@prefix cicd: <https://unjucks.dev/ontology/cicd#> .

:BuildPipeline a cicd:Pipeline ;
    cicd:triggeredBy :CommitInfo ;
    cicd:stage :LintingStage, :TestingStage, :BuildStage, :DeployStage .

:TestingStage a cicd:Stage ;
    cicd:tests :UserServiceArtifact ;
    cicd:status "passed" ;
    cicd:testResults "All 15 tests passed" .

# =============================================================================
# KNOWLEDGE QUERIES (SPARQL EXAMPLES)
# =============================================================================

# Query examples that could be executed against this RDF data:

# 1. Find all templates that generate TypeScript files:
# SELECT ?template ?description WHERE {
#   ?template a unjucks:Template ;
#            dc:description ?description ;
#            template:outputPath ?path .
#   FILTER(CONTAINS(?path, ".ts"))
# }

# 2. Find all generated classes with their methods:
# SELECT ?class ?method WHERE {
#   ?class a code:Class ;
#          code:hasMethod ?methodInstance .
#   ?methodInstance code:methodName ?method .
# }

# 3. Find templates with required variables:
# SELECT ?template ?variable ?variableName WHERE {
#   ?template template:hasVariable ?variable .
#   ?variable template:isRequired true ;
#            template:variableName ?variableName .
# }

# 4. Find performance bottlenecks (slow generation times):
# SELECT ?template ?generationTime WHERE {
#   ?metrics a :PerformanceMetrics ;
#           gen:measuresTemplate ?template ;
#           gen:averageGenerationTime ?generationTime .
#   FILTER(?generationTime > 500)
# }

# 5. Find code quality issues:
# SELECT ?artifact ?complexityScore ?codeSmells WHERE {
#   ?metrics a :CodeQualityMetrics ;
#           gen:measuresArtifact ?artifact ;
#           gen:complexityScore ?complexityScore ;
#           gen:codeSmells ?codeSmells .
#   FILTER(?complexityScore > 10 || ?codeSmells > 5)
# }

# =============================================================================
# REASONING RULES (SWRL-style, for reference)
# =============================================================================

# Rule: If a template generates TypeScript files, it should have TypeScript-related variables
# Template(?t) ∧ outputPath(?t, ?path) ∧ contains(?path, ".ts") 
# → shouldHave(?t, typescriptConfigVariable)

# Rule: If a service class has CRUD methods, it should have database connection
# Class(?c) ∧ hasMethod(?c, ?create) ∧ hasMethod(?c, ?read) ∧ hasMethod(?c, ?update) ∧ hasMethod(?c, ?delete)
# → shouldHave(?c, databaseConnectionProperty)

# Rule: If generated code has high complexity, it should have corresponding tests
# GeneratedArtifact(?a) ∧ complexityScore(?a, ?score) ∧ greaterThan(?score, 10)
# → shouldHave(?a, testArtifact)

# This RDF/Turtle data provides a comprehensive semantic model for code generation,
# enabling sophisticated queries, reasoning, and integration with knowledge management systems.