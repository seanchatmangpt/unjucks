# Consolidated Workflow Configuration
# Reduces 37+ workflows to 5 core workflows + composition engine
# Implements 80/20 principle: 20% of workflows deliver 80% of value

version: "2.0"
consolidation:
  strategy: "80-20-pareto"
  originalWorkflows: 37
  targetWorkflows: 5
  expectedEfficiencyGain: "73%"
  expectedSpeedImprovement: "40%"

# ==================== CORE WORKFLOWS ====================

coreWorkflows:
  # 1. Meta-Orchestration Workflow (Consolidates 8 workflows)
  meta-orchestration:
    id: "meta-orchestration"
    name: "Meta-Orchestration Workflow"
    description: "Central coordination hub for all development activities"
    consolidatedWorkflows:
      - "bdd-agent-coordination-mapping"
      - "mcp-workflow-orchestration-patterns"
      - "semantic-workflow-orchestrator"
      - "multi-server-coordination"
      - "event-driven-reactive-patterns"
      - "distributed-consensus-patterns"
      - "hierarchical-coordination"
      - "neural-adaptive-orchestration"
    
    capabilities:
      - "swarm-initialization"
      - "agent-spawning"
      - "task-orchestration"
      - "performance-monitoring"
      - "result-aggregation"
      - "neural-optimization"
      - "cross-server-coordination"
      - "real-time-hooks"
    
    triggers:
      - "manual"
      - "webhook"
      - "schedule"
      - "event-driven"
    
    defaultParameters:
      topology: "mesh"
      maxAgents: 20
      enableNeural: true
      enableMemory: true
      strategy: "adaptive"
      performanceMonitoring: true
    
    steps:
      - name: "swarm_initialization"
        description: "Initialize swarm with optimal topology"
        agent: "coordinator"
        timeout: "30s"
      - name: "agent_spawning"
        description: "Spawn specialized agents based on task requirements"
        agent: "coordinator"
        parallel: true
        timeout: "60s"
      - name: "task_orchestration"
        description: "Orchestrate tasks across agent swarm"
        agent: "coordinator"
        dependencies: ["agent_spawning"]
      - name: "performance_monitoring"
        description: "Monitor and optimize performance in real-time"
        agent: "monitor"
        continuous: true
      - name: "result_aggregation"
        description: "Aggregate and validate results from all agents"
        agent: "coordinator"
        dependencies: ["task_orchestration"]

  # 2. Development Lifecycle Workflow (Consolidates 9 workflows)
  development-lifecycle:
    id: "development-lifecycle"
    name: "Development Lifecycle Workflow"
    description: "Complete SDLC automation from requirements to deployment"
    consolidatedWorkflows:
      - "fullstack-development-workflows"
      - "api-development-pipelines"
      - "frontend-backend-coordination"
      - "testing-automation-comprehensive"
      - "code-quality-security-scanning"
      - "deployment-orchestration"
      - "performance-benchmarking"
      - "ci-cd-integration"
      - "cross-platform-validation"
    
    capabilities:
      - "requirement-analysis"
      - "code-generation"
      - "testing-execution"
      - "quality-validation"
      - "deployment-orchestration"
      - "fullstack-coordination"
      - "api-development"
      - "security-scanning"
    
    triggers:
      - "git-push"
      - "pr-opened"
      - "tag-created"
      - "manual"
    
    defaultParameters:
      projectType: "fullstack"
      testingStrategy: "comprehensive"
      deploymentTarget: "staging"
      qualityGates: ["coverage-90", "security-high", "performance-p95"]
      parallelExecution: true
    
    steps:
      - name: "requirement_analysis"
        description: "Analyze requirements and generate development plan"
        agent: "researcher"
        timeout: "5m"
      - name: "code_generation"
        description: "Generate code based on requirements and templates"
        agent: "coder"
        parallel: true
        dependencies: ["requirement_analysis"]
        timeout: "15m"
      - name: "testing_execution"
        description: "Execute comprehensive test suite"
        agent: "tester"
        parallel: true
        dependencies: ["code_generation"]
        timeout: "10m"
      - name: "quality_validation"
        description: "Validate code quality and security"
        agent: "reviewer"
        dependencies: ["testing_execution"]
        timeout: "8m"
      - name: "deployment_preparation"
        description: "Prepare deployment artifacts and configuration"
        agent: "coordinator"
        dependencies: ["quality_validation"]
        timeout: "5m"

  # 3. Template & Generator Workflow (Consolidates 6 workflows)
  template-generator:
    id: "template-generator"
    name: "Template & Generator Workflow"
    description: "Unified template discovery, validation, and generation"
    consolidatedWorkflows:
      - "template-discovery-indexing"
      - "variable-extraction-validation"
      - "nunjucks-rendering-filters"
      - "file-injection-modification"
      - "template-marketplace-operations"
      - "generator-composition-patterns"
    
    capabilities:
      - "template-discovery"
      - "variable-extraction"
      - "rendering-execution"
      - "file-operations"
      - "validation-checks"
      - "marketplace-integration"
      - "generator-composition"
    
    triggers:
      - "manual"
      - "api-call"
      - "template-update"
    
    defaultParameters:
      operation: "generate"
      templateEngine: "nunjucks"
      validationLevel: "strict"
      marketplaceEnabled: true
      dryRun: false
    
    steps:
      - name: "template_discovery"
        description: "Discover and index available templates"
        agent: "coder"
        timeout: "30s"
      - name: "variable_extraction"
        description: "Extract and validate template variables"
        agent: "coder"
        dependencies: ["template_discovery"]
        timeout: "1m"
      - name: "rendering_execution"
        description: "Render templates with provided variables"
        agent: "coder"
        dependencies: ["variable_extraction"]
        timeout: "2m"
      - name: "file_operations"
        description: "Execute file creation/modification operations"
        agent: "coder"
        dependencies: ["rendering_execution"]
        timeout: "1m"
      - name: "validation_checks"
        description: "Validate generated files and structure"
        agent: "reviewer"
        dependencies: ["file_operations"]
        timeout: "30s"

  # 4. Quality Assurance Workflow (Consolidates 7 workflows)
  quality-assurance:
    id: "quality-assurance"
    name: "Quality Assurance Workflow"
    description: "Comprehensive quality gates and validation"
    consolidatedWorkflows:
      - "bdd-test-execution-cucumber"
      - "performance-testing-benchmarking"
      - "security-scanning-compliance"
      - "code-quality-analysis"
      - "cross-platform-validation"
      - "regression-testing-automation"
      - "load-testing-stress-testing"
    
    capabilities:
      - "test-execution"
      - "performance-analysis"
      - "security-scanning"
      - "quality-metrics"
      - "gate-validation"
      - "regression-testing"
      - "compliance-checking"
    
    triggers:
      - "code-change"
      - "schedule"
      - "manual"
      - "pre-deployment"
    
    defaultParameters:
      testTypes: ["unit", "integration", "e2e", "performance", "security"]
      qualityGates: ["coverage", "performance", "security", "compliance"]
      environments: ["local", "ci", "staging"]
      coverageThreshold: 90
    
    steps:
      - name: "test_execution"
        description: "Execute all configured test suites"
        agent: "tester"
        parallel: true
        timeout: "20m"
      - name: "performance_analysis"
        description: "Analyze performance metrics and benchmarks"
        agent: "optimizer"
        parallel: true
        timeout: "10m"
      - name: "security_scanning"
        description: "Scan for security vulnerabilities and compliance"
        agent: "reviewer"
        parallel: true
        timeout: "15m"
      - name: "quality_metrics"
        description: "Collect and analyze quality metrics"
        agent: "researcher"
        dependencies: ["test_execution", "performance_analysis", "security_scanning"]
        timeout: "5m"
      - name: "gate_validation"
        description: "Validate all quality gates are met"
        agent: "coordinator"
        dependencies: ["quality_metrics"]
        timeout: "2m"

  # 5. Integration & Deployment Workflow (Consolidates 7 workflows)
  integration-deployment:
    id: "integration-deployment"
    name: "Integration & Deployment Workflow"
    description: "Seamless integration across platforms and environments"
    consolidatedWorkflows:
      - "github-actions-integration"
      - "ci-cd-pipeline-automation"
      - "multi-platform-deployment"
      - "environment-provisioning"
      - "monitoring-alerting-setup"
      - "rollback-recovery-procedures"
      - "infrastructure-as-code"
    
    capabilities:
      - "platform-preparation"
      - "deployment-execution"
      - "health-monitoring"
      - "rollback-preparation"
      - "success-validation"
      - "infrastructure-provisioning"
      - "monitoring-integration"
    
    triggers:
      - "release-candidate"
      - "deployment-request"
      - "schedule"
      - "manual"
    
    defaultParameters:
      platform: "github"
      environment: "staging"
      strategy: "rolling"
      enableRollback: true
      monitoringLevel: "comprehensive"
      healthCheckTimeout: "5m"
    
    steps:
      - name: "platform_preparation"
        description: "Prepare target platform for deployment"
        agent: "coordinator"
        timeout: "10m"
      - name: "deployment_execution"
        description: "Execute deployment with chosen strategy"
        agent: "coordinator"
        dependencies: ["platform_preparation"]
        timeout: "30m"
      - name: "health_monitoring"
        description: "Monitor deployment health and performance"
        agent: "monitor"
        dependencies: ["deployment_execution"]
        continuous: true
        timeout: "10m"
      - name: "success_validation"
        description: "Validate deployment success criteria"
        agent: "tester"
        dependencies: ["health_monitoring"]
        timeout: "5m"
      - name: "rollback_preparation"
        description: "Prepare rollback procedures if needed"
        agent: "coordinator"
        conditional: "on-failure"
        timeout: "2m"

# ==================== COMPOSITION TEMPLATES ====================

compositionTemplates:
  # Enterprise Full-Stack Development
  enterprise-fullstack:
    name: "Enterprise Full-Stack Development"
    description: "Complete enterprise-grade full-stack development pipeline"
    workflows: ["meta-orchestration", "development-lifecycle", "quality-assurance"]
    strategy: "sequential"
    estimatedDuration: "45m"
    parameters:
      projectType: "fullstack"
      testingStrategy: "comprehensive"
      qualityGates: ["coverage-90", "security-high", "performance-p95"]
      topology: "hierarchical"
      maxAgents: 15
      enableNeural: true
    hooks:
      preExecution: "enterprise-setup"
      postExecution: "enterprise-validation"
      onFailure: "enterprise-rollback"

  # API Microservice Pipeline
  api-microservice:
    name: "API Microservice Pipeline"
    description: "Optimized pipeline for API microservice development"
    workflows: ["development-lifecycle", "quality-assurance", "integration-deployment"]
    strategy: "adaptive"
    estimatedDuration: "30m"
    parameters:
      projectType: "api"
      deploymentStrategy: "rolling"
      monitoringLevel: "comprehensive"
      testTypes: ["unit", "integration", "contract", "load"]
      enableRollback: true
    hooks:
      preExecution: "microservice-setup"
      postExecution: "service-mesh-integration"

  # Template Development & Publishing
  template-development:
    name: "Template Development & Publishing"
    description: "Complete template development and marketplace publishing"
    workflows: ["template-generator", "quality-assurance", "integration-deployment"]
    strategy: "parallel"
    estimatedDuration: "15m"
    parameters:
      operation: ["generate", "validate", "publish"]
      marketplace: true
      validationLevel: "strict"
      publishToMarketplace: true

  # Rapid Prototyping
  rapid-prototyping:
    name: "Rapid Prototyping"
    description: "Fast iteration for proof-of-concept development"
    workflows: ["template-generator", "development-lifecycle"]
    strategy: "parallel"
    estimatedDuration: "10m"
    parameters:
      projectType: "prototype"
      testingStrategy: "basic"
      qualityGates: ["syntax", "basic-functionality"]
      skipAdvancedValidation: true

  # Production Deployment
  production-deployment:
    name: "Production Deployment"
    description: "High-reliability production deployment with full validation"
    workflows: ["meta-orchestration", "quality-assurance", "integration-deployment"]
    strategy: "sequential"
    estimatedDuration: "60m"
    parameters:
      environment: "production"
      strategy: "blue-green"
      enableRollback: true
      qualityGates: ["comprehensive", "security-critical", "performance-critical"]
      requireApproval: true

  # Security Audit Pipeline
  security-audit:
    name: "Security Audit Pipeline"
    description: "Comprehensive security audit and compliance validation"
    workflows: ["quality-assurance", "integration-deployment"]
    strategy: "sequential"
    estimatedDuration: "25m"
    parameters:
      testTypes: ["security", "compliance", "vulnerability"]
      securityLevel: "critical"
      complianceStandards: ["SOC2", "GDPR", "HIPAA"]
      generateReports: true

# ==================== MIGRATION CONFIGURATION ====================

migration:
  strategy: "gradual"
  phases:
    phase1:
      name: "Core Workflow Deployment"
      duration: "1 week"
      description: "Deploy 5 core workflows alongside existing workflows"
      activities:
        - "Deploy core workflows in parallel mode"
        - "Validate functional equivalence"
        - "Performance baseline establishment"
    
    phase2:
      name: "Low-Risk Migration"
      duration: "1 week"
      description: "Migrate non-critical workflows to core system"
      activities:
        - "Migrate development and testing workflows"
        - "Validate composition templates"
        - "Monitor performance metrics"
    
    phase3:
      name: "Critical Workflow Migration"
      duration: "1 week"
      description: "Migrate production and deployment workflows"
      activities:
        - "Migrate production deployment workflows"
        - "Enable rollback mechanisms"
        - "Complete functional validation"
    
    phase4:
      name: "Deprecation & Cleanup"
      duration: "1 week"
      description: "Deprecate old workflows and cleanup"
      activities:
        - "Deprecate legacy workflows"
        - "Performance optimization"
        - "Documentation updates"

  rollback:
    enabled: true
    strategy: "instant"
    triggers:
      - "performance-degradation"
      - "functional-regression"
      - "user-impact"
    automation:
      - "Automatic rollback on critical failures"
      - "Gradual traffic shifting"
      - "Health check validation"

# ==================== PERFORMANCE METRICS ====================

expectedBenefits:
  operationalEfficiency:
    workflowReduction: "86.5%"  # 37 -> 5 workflows
    maintenanceOverhead: "-73%"
    onboardingTime: "-60%"
    configurationComplexity: "-45%"
  
  performanceImprovements:
    executionSpeed: "+40%"
    resourceUsage: "-65%"
    parallelEfficiency: "+50%"
    errorRecovery: "+200%"
  
  maintainabilityGains:
    singleSourceOfTruth: true
    unifiedTesting: true
    centralizedMonitoring: true
    standardizedDebugging: true
  
  featureEnhancements:
    composableWorkflows: true
    neuralOptimization: true
    advancedErrorRecovery: true
    realTimeMonitoring: true

# ==================== SUCCESS CRITERIA ====================

successCriteria:
  quantitative:
    workflowCount: "<=5"
    maintenanceReduction: ">=70%"
    executionSpeedIncrease: ">=35%"
    resourceEfficiencyGain: ">=60%"
    developerProductivity: ">=45%"
  
  qualitative:
    developerExperience: "significantly_improved"
    systemReliability: "enhanced"
    debuggingCapability: "improved"
    documentationQuality: "comprehensive"
    onboardingExperience: "streamlined"