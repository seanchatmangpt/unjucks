@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix kgen: <https://kgen.io/ontology#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix cli: <https://kgen.io/cli#> .

# SHACL Shapes for KGEN CLI Operations
# Validates CLI commands, arguments, and configurations

# ===== CLI COMMAND SHAPES =====

cli:CommandShape a sh:NodeShape ;
    sh:targetClass cli:Command ;
    sh:message "KGEN CLI Command validation" ;
    
    # Command name is required
    sh:property [
        sh:path cli:name ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:pattern "^[a-z][a-z0-9-]*[a-z0-9]$" ;
        sh:minLength 2 ;
        sh:message "Command name must be lowercase, kebab-case, 2+ chars"
    ] ;
    
    # Description is required
    sh:property [
        sh:path dct:description ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 10 ;
        sh:message "Command must have description (min 10 chars)"
    ] ;
    
    # Command category
    sh:property [
        sh:path cli:category ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ( "generate" "validate" "analyze" "transform" "utility" ) ;
        sh:message "Command category must be from approved list"
    ] ;
    
    # Usage examples
    sh:property [
        sh:path cli:example ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Command must have at least one usage example"
    ] .

# ===== CLI ARGUMENT SHAPES =====

cli:ArgumentShape a sh:NodeShape ;
    sh:targetClass cli:Argument ;
    sh:message "KGEN CLI Argument validation" ;
    
    # Argument name
    sh:property [
        sh:path cli:name ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:pattern "^[a-z][a-zA-Z0-9]*$" ;
        sh:message "Argument name must be camelCase starting with lowercase"
    ] ;
    
    # Argument type
    sh:property [
        sh:path cli:type ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ( "string" "boolean" "number" "array" "positional" ) ;
        sh:message "Argument type must be from supported list"
    ] ;
    
    # Required flag
    sh:property [
        sh:path cli:required ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Argument must specify if it's required"
    ] ;
    
    # Description
    sh:property [
        sh:path dct:description ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 5 ;
        sh:message "Argument must have description (min 5 chars)"
    ] .

# ===== CLI OPTION SHAPES =====

cli:OptionShape a sh:NodeShape ;
    sh:targetClass cli:Option ;
    sh:message "KGEN CLI Option validation" ;
    
    # Long form (required)
    sh:property [
        sh:path cli:long ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:pattern "^--[a-z][a-z0-9-]*[a-z0-9]$" ;
        sh:message "Option long form must start with '--' and be kebab-case"
    ] ;
    
    # Short form (optional)
    sh:property [
        sh:path cli:short ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:pattern "^-[a-zA-Z]$" ;
        sh:message "Option short form must be single letter with '-'"
    ] ;
    
    # Default value type validation
    sh:property [
        sh:path cli:default ;
        sh:maxCount 1 ;
        sh:message "Option can have at most one default value"
    ] ;
    
    # Help text
    sh:property [
        sh:path cli:help ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 8 ;
        sh:message "Option must have help text (min 8 chars)"
    ] .

# ===== CLI CONFIGURATION SHAPES =====

cli:ConfigShape a sh:NodeShape ;
    sh:targetClass cli:Config ;
    sh:message "KGEN CLI Configuration validation" ;
    
    # Config file path
    sh:property [
        sh:path cli:configFile ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:pattern "\\.(js|ts|json|yaml|yml)$" ;
        sh:message "Config file must have supported extension"
    ] ;
    
    # Output directory
    sh:property [
        sh:path kgen:outputDir ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Config must specify output directory"
    ] ;
    
    # Template directories
    sh:property [
        sh:path kgen:templateDirs ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Config must specify at least one template directory"
    ] ;
    
    # Validation enabled
    sh:property [
        sh:path cli:validationEnabled ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Config must specify if validation is enabled"
    ] .

# ===== CLI EXECUTION SHAPES =====

cli:ExecutionShape a sh:NodeShape ;
    sh:targetClass cli:Execution ;
    sh:message "KGEN CLI Execution validation" ;
    
    # Command that was executed
    sh:property [
        sh:path cli:command ;
        sh:class cli:Command ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Execution must reference the command"
    ] ;
    
    # Start time
    sh:property [
        sh:path cli:startedAt ;
        sh:datatype xsd:dateTime ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Execution must have start time"
    ] ;
    
    # End time
    sh:property [
        sh:path cli:endedAt ;
        sh:datatype xsd:dateTime ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Execution must have end time"
    ] ;
    
    # Exit code
    sh:property [
        sh:path cli:exitCode ;
        sh:datatype xsd:integer ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minInclusive 0 ;
        sh:maxInclusive 255 ;
        sh:message "Execution exit code must be 0-255"
    ] ;
    
    # Working directory
    sh:property [
        sh:path cli:workingDir ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Execution must record working directory"
    ] .

# ===== FILE OPERATION SHAPES =====

cli:FileOperationShape a sh:NodeShape ;
    sh:targetClass cli:FileOperation ;
    sh:message "KGEN File Operation validation" ;
    
    # Operation type
    sh:property [
        sh:path cli:operationType ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ( "create" "update" "delete" "copy" "move" ) ;
        sh:message "File operation type must be from approved list"
    ] ;
    
    # Source path (for operations that need it)
    sh:property [
        sh:path cli:sourcePath ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "Source path for copy/move operations"
    ] ;
    
    # Target path
    sh:property [
        sh:path cli:targetPath ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "File operation must have target path"
    ] ;
    
    # Timestamp
    sh:property [
        sh:path cli:performedAt ;
        sh:datatype xsd:dateTime ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "File operation must have timestamp"
    ] ;
    
    # Success indicator
    sh:property [
        sh:path cli:success ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "File operation must indicate success/failure"
    ] .

# ===== VALIDATION RESULT SHAPES =====

cli:ValidationResultShape a sh:NodeShape ;
    sh:targetClass cli:ValidationResult ;
    sh:message "KGEN CLI Validation Result validation" ;
    
    # Validates file/resource
    sh:property [
        sh:path cli:validates ;
        sh:nodeKind sh:IRI ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Validation result must reference what was validated"
    ] ;
    
    # Conforms flag
    sh:property [
        sh:path cli:conforms ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Validation result must indicate conformance"
    ] ;
    
    # Violation count
    sh:property [
        sh:path cli:violationCount ;
        sh:datatype xsd:integer ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minInclusive 0 ;
        sh:message "Validation result must report violation count (â‰¥0)"
    ] ;
    
    # Validation timestamp
    sh:property [
        sh:path cli:validatedAt ;
        sh:datatype xsd:dateTime ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Validation result must have timestamp"
    ] .

# ===== QUALITY GATES =====

# Command Quality Gate - ensures commands meet CLI standards
cli:CommandQualityGate a sh:NodeShape ;
    sh:message "CLI command quality gate validation" ;
    sh:and (
        [ sh:property [
            sh:path cli:name ;
            sh:pattern "^[a-z][a-z0-9-]*[a-z0-9]$" ;
            sh:message "Must have valid command name format"
        ] ]
        [ sh:property [
            sh:path dct:description ;
            sh:minLength 10 ;
            sh:message "Must have descriptive help text"
        ] ]
        [ sh:property [
            sh:path cli:example ;
            sh:minCount 1 ;
            sh:message "Must provide usage examples"
        ] ]
    ) .

# Argument Quality Gate - ensures arguments are well-defined
cli:ArgumentQualityGate a sh:NodeShape ;
    sh:message "CLI argument quality gate validation" ;
    sh:and (
        [ sh:property [
            sh:path cli:name ;
            sh:pattern "^[a-z][a-zA-Z0-9]*$" ;
            sh:message "Must have valid argument name format"
        ] ]
        [ sh:property [
            sh:path cli:type ;
            sh:in ( "string" "boolean" "number" "array" "positional" ) ;
            sh:message "Must have supported argument type"
        ] ]
        [ sh:property [
            sh:path dct:description ;
            sh:minLength 5 ;
            sh:message "Must have descriptive text"
        ] ]
    ) .

# Configuration Quality Gate - ensures configs are complete
cli:ConfigQualityGate a sh:NodeShape ;
    sh:message "CLI configuration quality gate validation" ;
    sh:and (
        [ sh:property [
            sh:path kgen:outputDir ;
            sh:minCount 1 ;
            sh:message "Must specify output directory"
        ] ]
        [ sh:property [
            sh:path kgen:templateDirs ;
            sh:minCount 1 ;
            sh:message "Must specify template directories"
        ] ]
        [ sh:property [
            sh:path cli:validationEnabled ;
            sh:minCount 1 ;
            sh:message "Must specify validation settings"
        ] ]
    ) .