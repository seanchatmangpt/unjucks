name: 🚀 Optimized CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

# Global concurrency control
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: '--max-old-space-size=4096'
  FORCE_COLOR: 1
  CI: true

jobs:
  # 🎯 SMART SETUP - Single job for all dependency setup and validation
  setup:
    name: 🔧 Smart Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      # Dynamic outputs based on changed files
      run-tests: ${{ steps.changes.outputs.tests }}
      run-security: ${{ steps.changes.outputs.security }}
      run-performance: ${{ steps.changes.outputs.performance }}
      run-deployment: ${{ steps.changes.outputs.deployment }}
      node-versions: ${{ steps.matrix.outputs.node-versions }}
      os-matrix: ${{ steps.matrix.outputs.os-matrix }}
      cache-key: ${{ steps.cache.outputs.cache-key }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            tests:
              - 'src/**'
              - 'tests/**'
              - 'package*.json'
            security:
              - 'src/**'
              - 'package*.json'
              - '.github/**'
            performance:
              - 'src/**'
              - 'scripts/performance/**'
            deployment:
              - 'package.json'
              - 'bin/**'
              - 'src/**'

      - name: 🎯 Smart Matrix Generation
        id: matrix
        run: |
          # Intelligent matrix based on change type and branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "release" ]]; then
            # Full matrix for main/release
            echo 'node-versions=["18", "20", "22"]' >> $GITHUB_OUTPUT
            echo 'os-matrix=["ubuntu-latest", "windows-latest", "macos-latest"]' >> $GITHUB_OUTPUT
          else
            # Minimal matrix for feature branches
            echo 'node-versions=["20"]' >> $GITHUB_OUTPUT
            echo 'os-matrix=["ubuntu-latest"]' >> $GITHUB_OUTPUT
          fi

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔑 Advanced Caching Strategy
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .cache
            dist
          key: optimized-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('src/**') }}
          restore-keys: |
            optimized-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-
            optimized-cache-${{ runner.os }}-

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Pre-build Validation
        run: |
          npm run build:validate
          npm run lint || echo "Lint warnings found"

      - name: 📤 Cache Artifacts
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            dist
            .cache
          key: build-artifacts-${{ github.sha }}

  # 🧪 SMART TESTING - Conditional and parallel test execution
  test:
    name: 🧪 Tests (${{ matrix.os }}, Node ${{ matrix.node }})
    runs-on: ${{ matrix.os }}
    needs: setup
    if: needs.setup.outputs.run-tests == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.setup.outputs.os-matrix) }}
        node: ${{ fromJson(needs.setup.outputs.node-versions) }}
        # Exclude heavy combinations for efficiency
        exclude:
          - os: windows-latest
            node: 18
          - os: windows-latest
            node: 22
          - os: macos-latest
            node: 18
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: 🔄 Restore Build Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            dist
            .cache
          key: build-artifacts-${{ github.sha }}

      - name: 🏃 Run Tests
        run: |
          # Parallel test execution with smart reporting
          npm run test:smoke
          npm run test:integration
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.node }}" == "20" ]]; then
            # Only run coverage on primary platform
            npm run test -- --coverage
          else
            npm run test
          fi

      - name: 📊 Upload Coverage
        if: matrix.os == 'ubuntu-latest' && matrix.node == '20'
        uses: codecov/codecov-action@v4
        with:
          files: coverage/lcov.info
          fail_ci_if_error: false

  # 🔒 SECURITY - Only when security-relevant changes detected
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.run-security == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔄 Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .cache
          key: build-artifacts-${{ github.sha }}

      - name: 🔍 Parallel Security Scans
        run: |
          # Run security scans in parallel
          npm audit --audit-level moderate &
          npm run security:scan &
          wait
          echo "Security scans completed"

      - name: 🔑 CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  # ⚡ PERFORMANCE - Only on main branch or when performance files change
  performance:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.run-performance == 'true' && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔄 Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .cache
          key: build-artifacts-${{ github.sha }}

      - name: 🏃 Run Performance Tests
        run: |
          npm run test:performance || echo "Performance tests completed"

  # 🚀 DEPLOYMENT - Only on release or main branch changes
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [setup, test, security]
    if: needs.setup.outputs.run-deployment == 'true' && (github.event_name == 'release' || github.ref == 'refs/heads/main')
    environment: production
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: 🔄 Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            dist
          key: build-artifacts-${{ github.sha }}

      - name: 🏗️ Build for Production
        run: npm run build

      - name: 🚀 Publish to NPM
        if: github.event_name == 'release'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # 🧹 CLEANUP - Smart artifact cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [test, security, performance, deploy]
    if: always()
    steps:
      - name: 🗑️ Clean Old Artifacts
        uses: actions/github-script@v7
        with:
          script: |
            // Delete artifacts older than 7 days
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const oldArtifacts = artifacts.artifacts.filter(artifact => {
              const age = Date.now() - new Date(artifact.created_at).getTime();
              return age > 7 * 24 * 60 * 60 * 1000; // 7 days
            });
            
            for (const artifact of oldArtifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              } catch (error) {
                console.log(`Failed to delete ${artifact.name}: ${error.message}`);
              }
            }