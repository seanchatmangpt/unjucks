name: Status Checks & Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9.12.0'

jobs:
  # Mandatory Status Check - Always Required
  lint-check:
    name: "‚úì Lint Check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - run: pnpm install --frozen-lockfile
      - run: npm run lint
      - name: Set status
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "‚úÖ Lint check passed"
          else
            echo "‚ùå Lint check failed"
            exit 1
          fi

  # Mandatory Status Check - Always Required  
  type-check:
    name: "‚úì Type Check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - run: pnpm install --frozen-lockfile
      - run: npm run typecheck
      - name: Set status
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "‚úÖ Type check passed"
          else
            echo "‚ùå Type check failed"
            exit 1
          fi

  # Mandatory Status Check - Always Required
  unit-tests:
    name: "‚úì Unit Tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - run: pnpm install --frozen-lockfile
      - run: npm run test:minimal
      - name: Upload coverage
        if: matrix.node-version == '18'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.node-version }}
          path: coverage/

  # Mandatory Status Check - Always Required
  build-check:
    name: "‚úì Build Check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - run: pnpm install --frozen-lockfile
      - run: npm run build
      - run: npm run build:validate
      - name: Test CLI binary
        run: |
          chmod +x bin/unjucks.cjs
          ./bin/unjucks.cjs --version
          echo "‚úÖ CLI binary works"

  # Mandatory Status Check - Always Required
  security-audit:
    name: "‚úì Security Audit"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - run: pnpm install --frozen-lockfile
      - name: Run security audit
        run: npm run security:scan
        continue-on-error: false
      - name: Run dependency scan
        run: npm run security:deps
        continue-on-error: true

  # Optional Status Check - Can be skipped on PR
  integration-tests:
    name: "‚ö†Ô∏è Integration Tests"
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - run: pnpm install --frozen-lockfile
      - run: npm run test:integration
      - name: Set status
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "‚úÖ Integration tests passed"
          else
            echo "‚ö†Ô∏è Integration tests failed (non-blocking)"
          fi

  # Optional Status Check - Performance validation
  performance-check:
    name: "‚ö†Ô∏è Performance Check"
    runs-on: ubuntu-latest
    continue-on-error: true
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - run: pnpm install --frozen-lockfile
      - run: npm run benchmark:latex
      - name: Performance regression check
        run: |
          # Compare against baseline metrics
          echo "‚ö†Ô∏è Performance check completed (baseline comparison needed)"

  # Status Check Summary - Required for branch protection
  status-check-summary:
    name: "Status Check Summary"
    needs: [lint-check, type-check, unit-tests, build-check, security-audit]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check mandatory results
        run: |
          # Check all mandatory status checks
          lint_result="${{ needs.lint-check.result }}"
          type_result="${{ needs.type-check.result }}"
          test_result="${{ needs.unit-tests.result }}"
          build_result="${{ needs.build-check.result }}"
          security_result="${{ needs.security-audit.result }}"
          
          echo "üìä Status Check Results:"
          echo "  Lint Check: $lint_result"
          echo "  Type Check: $type_result"
          echo "  Unit Tests: $test_result"
          echo "  Build Check: $build_result"
          echo "  Security Audit: $security_result"
          
          # All mandatory checks must pass
          if [[ "$lint_result" != "success" || \
                "$type_result" != "success" || \
                "$test_result" != "success" || \
                "$build_result" != "success" || \
                "$security_result" != "success" ]]; then
            echo "‚ùå One or more mandatory status checks failed"
            echo "üö´ This PR cannot be merged until all status checks pass"
            exit 1
          fi
          
          echo "‚úÖ All mandatory status checks passed"
          echo "üéâ This PR is ready for review and merge"

      - name: Update commit status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;
            
            const state = '${{ steps.check.outcome }}' === 'success' ? 'success' : 'failure';
            const description = state === 'success' ? 
              'All mandatory status checks passed' : 
              'One or more mandatory status checks failed';
            
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha,
              state,
              description,
              context: 'ci/status-checks-summary'
            });

  # Daily Health Check
  daily-health-check:
    name: "Daily Health Check"
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - run: pnpm install --frozen-lockfile
      
      - name: Full test suite
        run: npm run test
        continue-on-error: true
      
      - name: Security scan
        run: npm run security:sast
        continue-on-error: true
      
      - name: Performance benchmark
        run: npm run benchmark:full
        continue-on-error: true
      
      - name: Create issue if health check fails
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            const title = `Daily Health Check Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `## üö® Daily Health Check Failed
            
            The scheduled daily health check has detected issues with the codebase.
            
            **Failed Jobs:**
            - See workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            **Next Steps:**
            1. Review the failed workflow logs
            2. Address any failing tests or security issues
            3. Verify performance hasn't regressed
            
            **Auto-generated by:** Daily Health Check workflow
            **Date:** ${new Date().toISOString()}
            `;
            
            await github.rest.issues.create({
              owner,
              repo,
              title,
              body,
              labels: ['bug', 'ci/cd', 'priority/high']
            });