name: CI/CD Validation Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      run_full_suite:
        description: 'Run full test suite including stress tests'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9.12.0'
  FORCE_COLOR: 1

jobs:
  # Quality Gate - Fast Feedback
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    outputs:
      should_run_tests: ${{ steps.check.outputs.should_run_tests }}
      is_release: ${{ steps.check.outputs.is_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint check
        run: npm run lint

      - name: Type check
        run: npm run typecheck

      - name: Check build system
        run: npm run build:validate

      - name: Security audit
        run: npm run security:scan
        continue-on-error: true

      - name: Determine test scope
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_run_tests=full" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.run_full_suite }}" == "true" ]]; then
            echo "should_run_tests=full" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          else
            echo "should_run_tests=minimal" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

  # Core Test Suite
  test-core:
    name: Core Tests
    needs: quality-gate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20', '22']
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run minimal test suite
        run: npm run test:minimal
        env:
          NODE_ENV: test

      - name: Run unit tests
        if: needs.quality-gate.outputs.should_run_tests == 'full'
        run: npm run test:unit

      - name: Run integration tests
        if: needs.quality-gate.outputs.should_run_tests == 'full'
        run: npm run test:integration

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml

  # Advanced Test Suite
  test-advanced:
    name: Advanced Tests
    needs: [quality-gate, test-core]
    if: needs.quality-gate.outputs.should_run_tests == 'full'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run LaTeX filter tests
        run: npm run test:latex-filters

      - name: Run template rendering tests
        run: npm run test:template-rendering

      - name: Run security tests
        run: npm run test:security

      - name: Run chaos tests
        run: npm run test:chaos
        continue-on-error: true

  # Docker Validation
  test-docker:
    name: Docker Validation
    needs: [quality-gate, test-core]
    if: needs.quality-gate.outputs.should_run_tests == 'full'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Docker tests
        run: npm run docker:test

      - name: Run resource validation
        run: npm run test:resource-validation

      - name: Run Docker stress tests
        run: npm run test:docker-stress
        continue-on-error: true

  # Performance Validation
  test-performance:
    name: Performance Tests
    needs: [quality-gate, test-core]
    if: needs.quality-gate.outputs.should_run_tests == 'full'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run load tests
        run: npm run test:load

      - name: Run memory tests
        run: npm run test:memory

      - name: Run LaTeX benchmarks
        run: npm run benchmark:latex

      - name: Run full benchmarks
        run: npm run benchmark:full

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            benchmarks/
            performance-reports/

  # Build and Package Validation
  build-validation:
    name: Build Validation
    needs: quality-gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build system
        run: npm run build

      - name: Validate build
        run: npm run validate:build

      - name: Validate templates
        run: npm run validate:templates

      - name: Validate schema
        run: npm run validate:schema

      - name: Package audit
        run: npm run package:audit

      - name: Dry run publish
        run: npm run publish:dry

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            build/
            bin/

  # Security Scanning
  security-scan:
    name: Security Scan
    needs: quality-gate
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run SAST analysis
        run: npm run security:sast

      - name: Run dependency scan
        run: npm run security:deps

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

  # Final Validation Gate
  validation-gate:
    name: Final Validation
    needs: [quality-gate, test-core, test-advanced, test-docker, test-performance, build-validation, security-scan]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.check.outputs.success }}
    steps:
      - name: Check all jobs status
        id: check
        run: |
          # Required jobs that must pass
          required_jobs=("quality-gate" "test-core" "build-validation" "security-scan")
          
          # Optional jobs (allowed to fail on PR)
          optional_jobs=("test-advanced" "test-docker" "test-performance")
          
          all_success=true
          
          # Check required jobs
          for job in "${required_jobs[@]}"; do
            if [[ "${{ toJSON(needs) }}" != *"\"$job\":{\"result\":\"success\""* ]]; then
              echo "❌ Required job $job failed"
              all_success=false
            fi
          done
          
          # Check optional jobs (only fail on main branch)
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            for job in "${optional_jobs[@]}"; do
              if [[ "${{ toJSON(needs) }}" == *"\"$job\":{\"result\":\"failure\""* ]]; then
                echo "❌ Optional job $job failed on main branch"
                all_success=false
              fi
            done
          fi
          
          if [[ "$all_success" == "true" ]]; then
            echo "✅ All validation checks passed"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Some validation checks failed"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Deployment (only on main branch success)
  deploy:
    name: Deploy
    needs: [validation-gate]
    if: needs.validation-gate.outputs.success == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Production validation
        run: npm run package:validate

      - name: Final package prep
        run: npm run package:prep

      - name: Publish to npm
        run: npm run release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package.outputs.version }}
          release_name: Release ${{ steps.package.outputs.version }}
          draft: false
          prerelease: false