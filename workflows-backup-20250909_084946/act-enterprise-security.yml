name: 🎧 ACT - Security Testing

# Simplified version of enterprise-security.yml for local testing with act
# This workflow can be tested locally using: ./scripts/test-workflows.sh security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      scan_depth:
        description: 'Security scan depth'
        required: false
        default: 'standard'
        type: choice
        options:
          - surface
          - standard
          - comprehensive

env:
  CRITICAL_VULNERABILITY_THRESHOLD: 0
  HIGH_VULNERABILITY_THRESHOLD: 2

jobs:
  # Basic security scanning for act
  basic-security:
    name: 🔍 Basic Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      security-score: ${{ steps.assessment.outputs.security-score }}
      threat-level: ${{ steps.assessment.outputs.threat-level }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Dependency audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          
          if [ -f "npm-audit.json" ]; then
            critical_vulns=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
            high_vulns=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
            
            echo "Critical vulnerabilities: $critical_vulns"
            echo "High vulnerabilities: $high_vulns"
            
            if [ $critical_vulns -gt $CRITICAL_VULNERABILITY_THRESHOLD ]; then
              echo "❌ Critical vulnerabilities found"
            elif [ $high_vulns -gt $HIGH_VULNERABILITY_THRESHOLD ]; then
              echo "⚠️ High vulnerabilities exceed threshold"
            else
              echo "✅ Vulnerability levels acceptable"
            fi
          fi

      - name: 🕵️ Basic secret scan
        run: |
          echo "Scanning for potential secrets..."
          
          # Basic pattern check for common secrets
          secret_patterns=(
            "password\s*=\s*['\"][^'\"]{8,}['\"]" 
            "api[_-]?key\s*=\s*['\"][^'\"]{20,}['\"]" 
            "-----BEGIN"
          )
          
          found_issues=false
          for pattern in "${secret_patterns[@]}"; do
            if grep -r -E -i "$pattern" src/ bin/ --exclude-dir=node_modules 2>/dev/null; then
              echo "⚠️ Potential secret pattern: $pattern"
              found_issues=true
            fi
          done
          
          if [ "$found_issues" = false ]; then
            echo "✅ No obvious secret patterns found"
          fi

      - name: 📊 Security assessment
        id: assessment
        run: |
          security_score=100
          
          # Simple scoring based on findings
          if [ -f "npm-audit.json" ]; then
            critical_vulns=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
            high_vulns=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
            
            security_score=$((security_score - (critical_vulns * 20) - (high_vulns * 10)))
          fi
          
          if [ $security_score -ge 90 ]; then
            threat_level="LOW"
          elif [ $security_score -ge 70 ]; then
            threat_level="MEDIUM"
          else
            threat_level="HIGH"
          fi
          
          echo "security_score=$security_score" >> $GITHUB_OUTPUT
          echo "threat_level=$threat_level" >> $GITHUB_OUTPUT
          
          echo "Security Score: $security_score/100"
          echo "Threat Level: $threat_level"

  # License compliance check
  license-check:
    name: 📋 License Check
    runs-on: ubuntu-latest
    needs: basic-security
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📋 License validation
        run: |
          echo "Checking license compliance..."
          
          # Basic license check
          if [ -f "LICENSE" ]; then
            echo "✅ License file found"
          else
            echo "⚠️ No license file found"
          fi
          
          # Check package.json license
          if [ -f "package.json" ]; then
            license=$(cat package.json | jq -r '.license // "none"')
            echo "Package license: $license"
          fi

  # Security summary
  security-summary:
    name: 📋 Security Summary
    runs-on: ubuntu-latest
    needs: [basic-security, license-check]
    if: always()
    steps:
      - name: 📋 Generate security summary
        run: |
          echo "🛡️ ACT Security Scan Summary"
          echo "Security Score: ${{ needs.basic-security.outputs.security-score }}/100"
          echo "Threat Level: ${{ needs.basic-security.outputs.threat-level }}"
          echo "Basic Security: ${{ needs.basic-security.result }}"
          echo "License Check: ${{ needs.license-check.result }}"
          
          if [[ "${{ needs.basic-security.result }}" == "success" && \
                "${{ needs.license-check.result }}" == "success" ]]; then
            echo "✅ Security validation passed"
          else
            echo "❌ Security validation failed"
          fi