name: Release Pipeline

# Critical release workflow - queue without cancellation
concurrency:
  group: release-pipeline
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
      dry-run:
        description: 'Dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Run full validation
        run: npm run prepublishOnly
        
      - name: Bump version
        id: version
        run: |
          if [[ "${{ inputs.dry-run }}" == "true" ]]; then
            echo "DRY RUN: Would bump version with: npm version ${{ inputs.release-type }}"
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
            echo "tag=v${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          else
            NEW_VERSION=$(npm version ${{ inputs.release-type }} --no-git-tag-version)
            echo "version=${NEW_VERSION#v}" >> $GITHUB_OUTPUT
            echo "tag=${NEW_VERSION}" >> $GITHUB_OUTPUT
            
            git add package.json
            git commit -m "chore: bump version to ${NEW_VERSION}"
            git tag ${NEW_VERSION}
            git push origin main --tags
          fi

  build-and-test:
    name: Build and Test Release
    runs-on: ${{ matrix.os }}
    needs: [prepare-release]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run comprehensive tests
        run: |
          npm run build:validate
          npm run test:smoke
          npm test
          npm run test:cli
          
      - name: Test package installation
        run: |
          npm pack
          TARBALL=$(ls *.tgz)
          mkdir test-install
          cd test-install
          npm init -y
          npm install ../$TARBALL
          npx unjucks --version
          npx unjucks --help

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    environment: production
    if: inputs.dry-run != true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build package
        run: npm run build
        
      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          release_name: Release ${{ needs.prepare-release.outputs.tag }}
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.tag, 'pre') }}
          body: |
            ## Changes
            
            - Package published to NPM: [`@seanchatmangpt/unjucks@${{ needs.prepare-release.outputs.version }}`](https://www.npmjs.com/package/@seanchatmangpt/unjucks/v/${{ needs.prepare-release.outputs.version }})
            - Full changelog: https://github.com/${{ github.repository }}/compare/v${{ needs.prepare-release.outputs.version }}...HEAD
            
            ## Installation
            
            ```bash
            npm install -g @seanchatmangpt/unjucks@${{ needs.prepare-release.outputs.version }}
            ```
            
            ## Usage
            
            ```bash
            unjucks --help
            unjucks list
            unjucks generate component react MyComponent
            ```

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [publish-release]
    if: success() && inputs.dry-run != true
    
    steps:
      - name: Notify Slack
        if: env.SLACK_WEBHOOK_URL
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "ðŸŽ‰ Unjucks Release ${{ needs.prepare-release.outputs.tag }} published successfully!",
              "attachments": [{
                "color": "good",
                "fields": [{
                  "title": "Version",
                  "value": "${{ needs.prepare-release.outputs.version }}",
                  "short": true
                }, {
                  "title": "NPM Package", 
                  "value": "https://www.npmjs.com/package/@seanchatmangpt/unjucks",
                  "short": true
                }]
              }]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup-on-failure:
    name: Cleanup Failed Release
    runs-on: ubuntu-latest
    needs: [prepare-release, publish-release]
    if: failure() && inputs.dry-run != true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Delete failed tag
        run: |
          git tag -d ${{ needs.prepare-release.outputs.tag }} || true
          git push origin :refs/tags/${{ needs.prepare-release.outputs.tag }} || true
          
      - name: Notify failure
        run: |
          echo "Release ${{ needs.prepare-release.outputs.tag }} failed and has been cleaned up"