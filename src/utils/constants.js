/**
 * Unjucks Application Constants
 * 
 * Central location for all application constants, defaults,
 * and configuration values used throughout the system.
 */

import { createRequire } from 'module';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';

const require = createRequire(import.meta.url);
const __dirname = dirname(fileURLToPath(import.meta.url));

// Get package.json for version info
let packageJson;
try {
  packageJson = require('../../package.json');
} catch (error) {
  packageJson = { version: '3.0.0', name: 'unjucks' };
}

/**
 * Application Constants
 * 
 * @namespace CONSTANTS
 */
export const CONSTANTS = {
  // Application Information
  APP_NAME: 'unjucks',
  VERSION: packageJson.version || '3.0.0',
  DESCRIPTION: 'Next-generation template scaffolding with semantic web capabilities',
  
  // Directory Paths
  DEFAULT_TEMPLATES_DIR: '_templates',
  DEFAULT_OUTPUT_DIR: '.',
  DEFAULT_CONFIG_FILE: 'unjucks.config.js',
  
  // File Extensions
  TEMPLATE_EXTENSIONS: ['.njk', '.j2', '.hbs'],
  CONFIG_EXTENSIONS: ['.js', '.mjs', '.json', '.yaml', '.yml'],
  
  // Template Configuration
  FRONTMATTER_DELIMITER: '---',
  DEFAULT_TEMPLATE_ENGINE: 'nunjucks',
  
  // RDF/Semantic Web
  RDF_FORMATS: ['turtle', 'n3', 'rdf/xml', 'json-ld'],
  DEFAULT_RDF_FORMAT: 'turtle',
  RDF_FILE_EXTENSIONS: ['.ttl', '.n3', '.rdf', '.jsonld'],
  
  // Semantic Validation
  COMPLIANCE_FRAMEWORKS: [
    'gdpr',      // General Data Protection Regulation
    'hipaa',     // Health Insurance Portability and Accountability Act
    'sox',       // Sarbanes-Oxley Act
    'fhir',      // Fast Healthcare Interoperability Resources
    'fibo',      // Financial Industry Business Ontology
    'gs1'        // GS1 Standards
  ],
  
  // Performance Configuration
  DEFAULT_CACHE_TTL: 300000, // 5 minutes in milliseconds
  MAX_TEMPLATE_SIZE: 10 * 1024 * 1024, // 10MB
  MAX_RDF_SIZE: 100 * 1024 * 1024, // 100MB
  CONCURRENT_PROCESSING_LIMIT: 10,
  
  // CLI Configuration
  CLI_COLORS: {
    primary: '#007acc',
    success: '#28a745',
    warning: '#ffc107',
    error: '#dc3545',
    info: '#17a2b8',
    debug: '#6c757d'
  },
  
  // Command Defaults
  DEFAULT_COMMAND: 'help',
  AVAILABLE_COMMANDS: ['list', 'generate', 'help', 'init', 'version'],
  
  // File Operation Modes
  FILE_MODES: {
    WRITE: 'write',
    INJECT: 'inject',
    APPEND: 'append',
    PREPEND: 'prepend',
    LINE_INSERT: 'lineAt'
  },
  
  // Injection Markers
  DEFAULT_INJECTION_MARKERS: {
    START: '// START: Generated by Unjucks',
    END: '// END: Generated by Unjucks'
  },
  
  // Error Codes
  ERROR_CODES: {
    TEMPLATE_NOT_FOUND: 'TEMPLATE_NOT_FOUND',
    INVALID_FRONTMATTER: 'INVALID_FRONTMATTER',
    RDF_PARSE_ERROR: 'RDF_PARSE_ERROR',
    FILE_WRITE_ERROR: 'FILE_WRITE_ERROR',
    VALIDATION_ERROR: 'VALIDATION_ERROR',
    CONFIGURATION_ERROR: 'CONFIGURATION_ERROR'
  },
  
  // Logging Configuration
  LOG_LEVELS: ['debug', 'info', 'warn', 'error'],
  DEFAULT_LOG_LEVEL: 'info',
  
  // Performance Monitoring
  PERFORMANCE_THRESHOLDS: {
    TEMPLATE_PROCESSING: 1000, // 1 second
    RDF_PARSING: 5000,        // 5 seconds
    FILE_OPERATIONS: 500,      // 500ms
    SEMANTIC_VALIDATION: 2000  // 2 seconds
  },
  
  // Cache Configuration
  CACHE_TYPES: {
    TEMPLATE: 'template',
    RDF: 'rdf',
    QUERY: 'query',
    FILESYSTEM: 'filesystem'
  },
  
  // Enterprise Features
  ENTERPRISE_FEATURES: {
    MULTI_TENANCY: false,
    AUDIT_LOGGING: true,
    COMPLIANCE_REPORTING: true,
    PERFORMANCE_ANALYTICS: true,
    SECURITY_SCANNING: true
  },
  
  // Template Variable Types
  VARIABLE_TYPES: {
    STRING: 'string',
    NUMBER: 'number',
    BOOLEAN: 'boolean',
    ARRAY: 'array',
    OBJECT: 'object',
    DATE: 'date',
    URI: 'uri',
    EMAIL: 'email'
  },
  
  // Nunjucks Filter Extensions
  CUSTOM_FILTERS: [
    'camelCase',
    'kebabCase',
    'snakeCase',
    'pascalCase',
    'pluralize',
    'singularize',
    'formatDate',
    'base64',
    'minify',
    'sparql',
    'ontologyMap',
    'complianceCheck'
  ],
  
  // Default Template Context
  DEFAULT_CONTEXT: {
    timestamp: () => new Date().toISOString(),
    uuid: () => crypto.randomUUID(),
    date: () => new Date().toLocaleDateString(),
    time: () => new Date().toLocaleTimeString(),
    version: packageJson.version || '3.0.0'
  },
  
  // System Resources
  SYSTEM: {
    NODE_VERSION_MIN: '18.0.0',
    MEMORY_LIMIT_WARNING: 512 * 1024 * 1024, // 512MB
    DISK_SPACE_MIN: 100 * 1024 * 1024,       // 100MB
    TEMP_DIR_PREFIX: 'unjucks-',
    LOCK_FILE_TIMEOUT: 30000                  // 30 seconds
  },
  
  // API Configuration (for future MCP integration)
  API: {
    DEFAULT_TIMEOUT: 30000,
    MAX_RETRIES: 3,
    RETRY_DELAY: 1000,
    RATE_LIMIT: 100 // requests per minute
  },
  
  // Security Configuration
  SECURITY: {
    ALLOWED_PROTOCOLS: ['file:', 'http:', 'https:'],
    SANDBOX_MODE: true,
    PATH_TRAVERSAL_PROTECTION: true,
    SCRIPT_EXECUTION_ALLOWED: false,
    MAX_TEMPLATE_DEPTH: 10
  }
};

/**
 * Get environment-specific configuration
 * @param {string} environment - Environment name (development, production, test)
 * @returns {Object} Environment-specific constants
 */
export function getEnvironmentConfig(environment = process.env.NODE_ENV || 'development') {
  const envConfigs = {
    development: {
      LOG_LEVEL: 'debug',
      CACHE_TTL: 60000, // 1 minute for development
      PERFORMANCE_MONITORING: true,
      SECURITY_STRICT_MODE: false
    },
    
    production: {
      LOG_LEVEL: 'info',
      CACHE_TTL: CONSTANTS.DEFAULT_CACHE_TTL,
      PERFORMANCE_MONITORING: true,
      SECURITY_STRICT_MODE: true
    },
    
    test: {
      LOG_LEVEL: 'warn',
      CACHE_TTL: 0, // No caching in tests
      PERFORMANCE_MONITORING: false,
      SECURITY_STRICT_MODE: false
    }
  };
  
  return {
    ...CONSTANTS,
    ...envConfigs[environment] || envConfigs.development
  };
}

/**
 * Validate system requirements
 * @returns {Object} Validation result with any issues
 */
export function validateSystemRequirements() {
  const issues = [];
  
  // Check Node.js version
  const nodeVersion = process.version;
  const minNodeVersion = CONSTANTS.SYSTEM.NODE_VERSION_MIN;
  
  if (nodeVersion < `v${minNodeVersion}`) {
    issues.push(`Node.js version ${nodeVersion} is below minimum required ${minNodeVersion}`);
  }
  
  // Check memory availability
  const memoryUsage = process.memoryUsage();
  if (memoryUsage.heapUsed > CONSTANTS.SYSTEM.MEMORY_LIMIT_WARNING) {
    issues.push(`Memory usage ${memoryUsage.heapUsed} exceeds warning threshold`);
  }
  
  return {
    valid: issues.length === 0,
    issues,
    system: {
      nodeVersion,
      platform: process.platform,
      architecture: process.arch,
      memoryUsage
    }
  };
}