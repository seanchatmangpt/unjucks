# kgen Enterprise Knowledge Generation - Production Deployment
# Docker Compose configuration for scalable, enterprise-grade deployment

version: '3.8'

networks:
  kgen-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16

volumes:
  kgen-data:
    driver: local
  kgen-logs:
    driver: local
  kgen-cache:
    driver: local
  fuseki-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local

services:
  # Core kgen Services
  kgen-api:
    build:
      context: ../
      dockerfile: deployment/docker/Dockerfile.api
    container_name: kgen-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - KGEN_MODE=api
      - DATABASE_URL=postgresql://kgen:kgen_password@postgres:5432/kgen
      - REDIS_URL=redis://redis:6379
      - SPARQL_ENDPOINT=http://fuseki:3030/kgen/sparql
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOG_LEVEL=info
      - ENABLE_METRICS=true
      - ENABLE_TRACING=true
    volumes:
      - kgen-data:/app/data
      - kgen-logs:/app/logs
      - kgen-cache:/app/cache
    depends_on:
      - postgres
      - redis
      - fuseki
      - elasticsearch
    networks:
      - kgen-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  kgen-reasoning:
    build:
      context: ../
      dockerfile: deployment/docker/Dockerfile.reasoning
    container_name: kgen-reasoning
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - KGEN_MODE=reasoning
      - DATABASE_URL=postgresql://kgen:kgen_password@postgres:5432/kgen
      - REDIS_URL=redis://redis:6379
      - SPARQL_ENDPOINT=http://fuseki:3030/kgen/sparql
      - REASONING_THREADS=4
      - ONTOLOGY_CACHE_SIZE=2GB
      - ENABLE_DISTRIBUTED_REASONING=true
    volumes:
      - kgen-data:/app/data
      - kgen-logs:/app/logs
      - kgen-cache:/app/cache
    depends_on:
      - postgres
      - redis
      - fuseki
    networks:
      - kgen-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  kgen-query:
    build:
      context: ../
      dockerfile: deployment/docker/Dockerfile.query
    container_name: kgen-query
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - KGEN_MODE=query
      - DATABASE_URL=postgresql://kgen:kgen_password@postgres:5432/kgen
      - REDIS_URL=redis://redis:6379
      - SPARQL_ENDPOINT=http://fuseki:3030/kgen/sparql
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - QUERY_CACHE_SIZE=1GB
      - ENABLE_QUERY_OPTIMIZATION=true
    volumes:
      - kgen-data:/app/data
      - kgen-logs:/app/logs
      - kgen-cache:/app/cache
    depends_on:
      - postgres
      - redis
      - fuseki
      - elasticsearch
    networks:
      - kgen-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '3.0'
          memory: 6G
        reservations:
          cpus: '1.5'
          memory: 3G

  # Triple Store - Apache Jena Fuseki
  fuseki:
    image: stain/jena-fuseki:4.8.0
    container_name: kgen-fuseki
    ports:
      - "3030:3030"
    environment:
      - ADMIN_PASSWORD=fuseki_admin_password
      - JVM_ARGS=-Xmx4g -Xms2g
    volumes:
      - fuseki-data:/fuseki
      - ./fuseki/config:/fuseki/config
    networks:
      - kgen-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3030/$/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 6G
        reservations:
          cpus: '1.0'
          memory: 3G

  # Alternative Triple Store - Virtuoso (for high-performance scenarios)
  virtuoso:
    image: openlink/virtuoso-opensource-7:7.2.7
    container_name: kgen-virtuoso
    ports:
      - "8890:8890"
      - "1111:1111"
    environment:
      - SPARQL_UPDATE=true
      - DEFAULT_GRAPH=http://kgen.enterprise/graph
      - DBA_PASSWORD=virtuoso_dba_password
      - VIRT_Parameters_DirsAllowed=/database,/usr/share/proj
      - VIRT_SPARQL_ResultSetMaxRows=1000000
    volumes:
      - ./virtuoso/data:/database
      - ./virtuoso/dumps:/dumps
    networks:
      - kgen-network
    restart: unless-stopped
    profiles:
      - virtuoso
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # Database - PostgreSQL
  postgres:
    image: postgres:15
    container_name: kgen-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=kgen
      - POSTGRES_USER=kgen
      - POSTGRES_PASSWORD=kgen_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - kgen-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kgen"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Cache - Redis
  redis:
    image: redis:7-alpine
    container_name: kgen-redis
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --requirepass redis_password
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
    networks:
      - kgen-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Search Engine - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: kgen-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - cluster.name=kgen-cluster
      - node.name=kgen-node-1
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./elasticsearch/config:/usr/share/elasticsearch/config
    networks:
      - kgen-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Message Queue - RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: kgen-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=kgen
      - RABBITMQ_DEFAULT_PASS=rabbitmq_password
      - RABBITMQ_DEFAULT_VHOST=kgen
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
      - ./rabbitmq/logs:/var/log/rabbitmq
    networks:
      - kgen-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: kgen-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - kgen-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Visualization - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: kgen-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana_admin_password
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel,grafana-piechart-panel
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - kgen-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Log Aggregation - ELK Stack (Logstash)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: kgen-logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xmx1g -Xms1g"
    volumes:
      - ./logstash/config:/usr/share/logstash/config
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - kgen-logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - kgen-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Log Visualization - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kgen-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kgen-kibana
    depends_on:
      - elasticsearch
    networks:
      - kgen-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Load Balancer - Nginx
  nginx:
    image: nginx:alpine
    container_name: kgen-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - kgen-api
      - kgen-query
      - grafana
      - kibana
    networks:
      - kgen-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M

  # Backup Service
  backup:
    build:
      context: ../
      dockerfile: deployment/docker/Dockerfile.backup
    container_name: kgen-backup
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - POSTGRES_URL=postgresql://kgen:kgen_password@postgres:5432/kgen
      - FUSEKI_URL=http://fuseki:3030
      - S3_BUCKET=kgen-backups
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - kgen-data:/app/data:ro
      - fuseki-data:/fuseki:ro
      - ./backup/scripts:/app/scripts
    depends_on:
      - postgres
      - fuseki
    networks:
      - kgen-network
    restart: unless-stopped
    profiles:
      - backup

# Development profiles
  # Development services
  kgen-dev:
    build:
      context: ../
      dockerfile: deployment/docker/Dockerfile.dev
    container_name: kgen-dev
    ports:
      - "3010:3000"
      - "9229:9229"  # Node.js debugging
    environment:
      - NODE_ENV=development
      - DEBUG=kgen:*
      - ENABLE_HOT_RELOAD=true
    volumes:
      - ../:/app
      - /app/node_modules
    profiles:
      - development
    networks:
      - kgen-network

  # Testing services
  kgen-test:
    build:
      context: ../
      dockerfile: deployment/docker/Dockerfile.test
    container_name: kgen-test
    environment:
      - NODE_ENV=test
      - TEST_DATABASE_URL=postgresql://kgen:kgen_password@postgres-test:5432/kgen_test
    volumes:
      - ../:/app
      - /app/node_modules
    profiles:
      - testing
    networks:
      - kgen-network

  postgres-test:
    image: postgres:15
    container_name: kgen-postgres-test
    environment:
      - POSTGRES_DB=kgen_test
      - POSTGRES_USER=kgen
      - POSTGRES_PASSWORD=kgen_password
    profiles:
      - testing
    networks:
      - kgen-network