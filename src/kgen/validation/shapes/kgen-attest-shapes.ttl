# KGEN Attestation SHACL Shapes
# Comprehensive validation shapes for kgen-attest.ttl ontology
# Replaces all mixed validation approaches with deterministic SHACL-only validation

@prefix : <https://kgen.io/shapes/attest#> .@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix kgen: <https://kgen.io/ontology#> .
@prefix attest: <https://kgen.io/attest#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix dash: <http://datashapes.org/dash#> .

# Shapes Graph Declaration
<https://kgen.io/shapes/attest> a sh:ShapesGraph ;
    rdfs:label "KGEN Attestation Validation Shapes"@en ;
    rdfs:comment "SHACL validation shapes for KGEN attestation and provenance data quality assurance"@en ;
    dcterms:creator "KGEN v1 Charter" ;
    dcterms:created "2024-09-12"^^xsd:date ;
    sh:declare [
        sh:prefix "kgen" ;
        sh:namespace "https://kgen.io/ontology#" ;
    ] ;
    sh:declare [
        sh:prefix "attest" ;
        sh:namespace "https://kgen.io/attest#" ;
    ] .

#################################################################
#    Artifact Shapes - Core KGEN Artifacts
#################################################################

:ArtifactShape a sh:NodeShape ;
    sh:targetClass kgen:Artifact ;
    rdfs:label "KGEN Artifact Shape"@en ;
    rdfs:comment "Validation for KGEN generated artifacts"@en ;
    sh:severity sh:Violation ;
    
    # Required properties
    sh:property [
        sh:path kgen:hasIdentifier ;
        sh:name "Artifact Identifier"@en ;
        sh:description "Unique identifier for the artifact"@en ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 1 ;
        sh:pattern "^[a-zA-Z0-9_-]+$" ;
        sh:message "Artifact must have exactly one valid identifier (alphanumeric, underscore, hyphen only)"@en ;
    ] ;
    
    sh:property [
        sh:path dcterms:created ;
        sh:name "Creation Timestamp"@en ;
        sh:description "When the artifact was created"@en ;
        sh:datatype xsd:dateTime ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Artifact must have exactly one creation timestamp"@en ;
    ] ;
    
    sh:property [
        sh:path kgen:hasChecksum ;
        sh:name "Artifact Checksum"@en ;
        sh:description "Cryptographic checksum for integrity verification"@en ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:pattern "^[a-fA-F0-9]{64}$" ; # SHA-256 hex
        sh:message "Artifact must have exactly one SHA-256 checksum"@en ;
    ] ;
    
    sh:property [
        sh:path kgen:generatedBy ;
        sh:name "Generator Activity"@en ;
        sh:description "The activity that generated this artifact"@en ;
        sh:class prov:Activity ;
        sh:minCount 1 ;
        sh:message "Artifact must be generated by at least one activity"@en ;
    ] ;
    
    # Optional but constrained properties
    sh:property [
        sh:path kgen:hasSize ;
        sh:name "Artifact Size"@en ;
        sh:datatype xsd:long ;
        sh:minInclusive 0 ;
        sh:maxCount 1 ;
        sh:message "Artifact size must be non-negative if specified"@en ;
    ] ;
    
    sh:property [
        sh:path kgen:hasPath ;
        sh:name "Artifact Path"@en ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:pattern "^(/|\\./|[a-zA-Z]:\\\\).*" ; # Unix/Windows path patterns
        sh:message "Artifact path must be valid file system path if specified"@en ;
    ] .

:TemplateArtifactShape a sh:NodeShape ;
    sh:targetClass kgen:TemplateArtifact ;
    rdfs:label "Template Artifact Shape"@en ;
    sh:severity sh:Violation ;
    
    sh:property [
        sh:path kgen:hasTemplate ;
        sh:name "Source Template"@en ;
        sh:description "Template used to generate this artifact"@en ;
        sh:class kgen:Template ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Template artifact must reference exactly one source template"@en ;
    ] ;
    
    sh:property [
        sh:path kgen:hasVariables ;
        sh:name "Template Variables"@en ;
        sh:description "Variables used in template rendering"@en ;
        sh:class kgen:VariableSet ;
        sh:maxCount 1 ;
        sh:message "Template artifact can have at most one variable set"@en ;
    ] .

#################################################################
#    Template Shapes - Template Validation
#################################################################

:TemplateShape a sh:NodeShape ;
    sh:targetClass kgen:Template ;
    rdfs:label "Template Shape"@en ;
    sh:severity sh:Violation ;
    
    sh:property [
        sh:path kgen:hasName ;
        sh:name "Template Name"@en ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 1 ;
        sh:maxLength 255 ;
        sh:pattern "^[a-zA-Z][a-zA-Z0-9_-]*$" ;
        sh:message "Template must have valid name (start with letter, alphanumeric/underscore/hyphen, max 255 chars)"@en ;
    ] ;
    
    sh:property [
        sh:path kgen:hasContent ;
        sh:name "Template Content"@en ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 1 ;
        sh:message "Template must have non-empty content"@en ;
    ] ;
    
    sh:property [
        sh:path kgen:hasEngine ;
        sh:name "Template Engine"@en ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:in ( "nunjucks" "handlebars" "mustache" "ejs" ) ;
        sh:message "Template engine must be one of: nunjucks, handlebars, mustache, ejs"@en ;
    ] ;
    
    # Syntax validation via SPARQL constraint
    sh:sparql [
        sh:message "Template must contain valid Nunjucks syntax"@en ;
        sh:severity sh:Warning ;
        sh:select """
            SELECT ?this ?content
            WHERE {
                ?this kgen:hasContent ?content .
                ?this kgen:hasEngine "nunjucks" .
                FILTER(CONTAINS(?content, "{{") && !CONTAINS(?content, "}}"))
            }
        """ ;
    ] .

:FrontmatterShape a sh:NodeShape ;
    sh:targetClass kgen:Frontmatter ;
    rdfs:label "Template Frontmatter Shape"@en ;
    sh:severity sh:Violation ;
    
    sh:property [
        sh:path kgen:hasDestination ;
        sh:name "Output Destination"@en ;
        sh:description "Where the generated artifact should be written"@en ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 1 ;
        sh:message "Frontmatter must specify output destination"@en ;
    ] ;
    
    sh:property [
        sh:path kgen:isInjection ;
        sh:name "Injection Mode"@en ;
        sh:datatype xsd:boolean ;
        sh:maxCount 1 ;
        sh:message "Injection mode must be boolean if specified"@en ;
    ] ;
    
    sh:property [
        sh:path kgen:skipCondition ;
        sh:name "Skip Condition"@en ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "Skip condition must be valid expression if specified"@en ;
    ] ;
    
    sh:property [
        sh:path kgen:hasPermissions ;
        sh:name "File Permissions"@en ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:pattern "^[0-7]{3,4}$" ; # Octal permissions
        sh:message "File permissions must be valid octal notation (e.g., 644, 755)"@en ;
    ] .

#################################################################
#    Provenance Shapes - PROV-O Compliance
#################################################################

:GenerationActivityShape a sh:NodeShape ;
    sh:targetClass prov:Activity ;
    rdfs:label "Generation Activity Shape"@en ;
    sh:severity sh:Violation ;
    
    sh:property [
        sh:path prov:startedAtTime ;
        sh:name "Start Time"@en ;
        sh:datatype xsd:dateTime ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Generation activity must have exactly one start time"@en ;
    ] ;
    
    sh:property [
        sh:path prov:endedAtTime ;
        sh:name "End Time"@en ;
        sh:datatype xsd:dateTime ;
        sh:maxCount 1 ;
        sh:message "Generation activity can have at most one end time"@en ;
    ] ;
    
    sh:property [
        sh:path prov:wasAssociatedWith ;
        sh:name "Associated Agent"@en ;
        sh:class prov:Agent ;
        sh:minCount 1 ;
        sh:message "Generation activity must be associated with at least one agent"@en ;
    ] ;
    
    sh:property [
        sh:path prov:used ;
        sh:name "Used Entity"@en ;
        sh:class prov:Entity ;
        sh:message "Generation activity should specify used entities"@en ;
    ] ;
    
    # Time ordering constraint
    sh:sparql [
        sh:message "Activity end time must be after start time"@en ;
        sh:severity sh:Violation ;
        sh:select """
            SELECT ?this
            WHERE {
                ?this prov:startedAtTime ?start .
                ?this prov:endedAtTime ?end .
                FILTER(?end <= ?start)
            }
        """ ;
    ] .

:AgentShape a sh:NodeShape ;
    sh:targetClass prov:Agent ;
    rdfs:label "KGEN Agent Shape"@en ;
    sh:severity sh:Violation ;
    
    sh:property [
        sh:path foaf:name ;
        sh:name "Agent Name"@en ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 1 ;
        sh:maxLength 255 ;
        sh:message "Agent must have a valid name"@en ;
    ] ;
    
    sh:property [
        sh:path kgen:hasVersion ;
        sh:name "Agent Version"@en ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:pattern "^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9]+)*$" ; # Semantic versioning
        sh:message "Agent version must follow semantic versioning (e.g., 1.0.0, 1.0.0-alpha)"@en ;
    ] .

#################################################################
#    Attestation Shapes - Cryptographic Attestations
#################################################################

:AttestationShape a sh:NodeShape ;
    sh:targetClass attest:Attestation ;
    rdfs:label "Cryptographic Attestation Shape"@en ;
    sh:severity sh:Violation ;
    
    sh:property [
        sh:path attest:attestsTo ;
        sh:name "Attested Entity"@en ;
        sh:description "The entity being attested to"@en ;
        sh:class prov:Entity ;
        sh:minCount 1 ;
        sh:message "Attestation must attest to at least one entity"@en ;
    ] ;
    
    sh:property [
        sh:path attest:hasSignature ;
        sh:name "Digital Signature"@en ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 64 ; # Minimum signature length
        sh:pattern "^[a-fA-F0-9]+$" ; # Hex encoded
        sh:message "Attestation must have valid hexadecimal digital signature"@en ;
    ] ;
    
    sh:property [
        sh:path attest:hasAlgorithm ;
        sh:name "Signature Algorithm"@en ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ( "RSA-SHA256" "ECDSA-SHA256" "Ed25519" ) ;
        sh:message "Attestation must use supported signature algorithm"@en ;
    ] ;
    
    sh:property [
        sh:path attest:hasPublicKey ;
        sh:name "Public Key"@en ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minLength 32 ;
        sh:pattern "^[a-fA-F0-9]+$" ;
        sh:message "Attestation must have valid hexadecimal public key"@en ;
    ] ;
    
    sh:property [
        sh:path dcterms:created ;
        sh:name "Attestation Timestamp"@en ;
        sh:datatype xsd:dateTime ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Attestation must have exactly one creation timestamp"@en ;
    ] .

:IntegrityMeasurementShape a sh:NodeShape ;
    sh:targetClass attest:IntegrityMeasurement ;
    rdfs:label "Integrity Measurement Shape"@en ;
    sh:severity sh:Violation ;
    
    sh:property [
        sh:path attest:measuresEntity ;
        sh:name "Measured Entity"@en ;
        sh:class prov:Entity ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Integrity measurement must measure exactly one entity"@en ;
    ] ;
    
    sh:property [
        sh:path attest:hasHashValue ;
        sh:name "Hash Value"@en ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:pattern "^[a-fA-F0-9]{64}$" ; # SHA-256
        sh:message "Integrity measurement must have valid SHA-256 hash"@en ;
    ] ;
    
    sh:property [
        sh:path attest:hasHashAlgorithm ;
        sh:name "Hash Algorithm"@en ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:hasValue "SHA-256" ;
        sh:message "Integrity measurement must use SHA-256 hash algorithm"@en ;
    ] .

#################################################################
#    RDF Data Quality Shapes - Graph Structure Validation
#################################################################

:GraphStructureShape a sh:NodeShape ;
    sh:targetClass rdfs:Resource ;
    rdfs:label "RDF Graph Structure Shape"@en ;
    sh:severity sh:Warning ;
    
    # Every resource should have a label or name
    sh:or (
        [ sh:property [
            sh:path rdfs:label ;
            sh:minCount 1 ;
        ] ]
        [ sh:property [
            sh:path foaf:name ;
            sh:minCount 1 ;
        ] ]
        [ sh:property [
            sh:path dcterms:title ;
            sh:minCount 1 ;
        ] ]
    ) ;
    sh:message "Resources should have at least one label, name, or title for better readability"@en .

:NamespaceConsistencyShape a sh:NodeShape ;
    sh:targetClass rdfs:Resource ;
    rdfs:label "Namespace Consistency Shape"@en ;
    sh:severity sh:Info ;
    
    # Resources should use consistent namespace patterns
    sh:sparql [
        sh:message "Resources should use consistent KGEN namespace patterns"@en ;
        sh:severity sh:Info ;
        sh:select """
            SELECT ?this
            WHERE {
                ?this ?p ?o .
                FILTER(STRSTARTS(STR(?this), "http://") && !STRSTARTS(STR(?this), "https://kgen.io/"))
                FILTER(!STRSTARTS(STR(?this), "http://www.w3.org/"))
                FILTER(!STRSTARTS(STR(?this), "http://purl.org/"))
                FILTER(!STRSTARTS(STR(?this), "http://xmlns.com/"))
            }
        """ ;
    ] .

#################################################################
#    Performance Validation Shapes
#################################################################

:LargeGraphValidationShape a sh:NodeShape ;
    sh:targetClass kgen:Artifact ;
    rdfs:label "Large Graph Validation Shape"@en ;
    sh:severity sh:Warning ;
    
    # Warn if graph becomes too large for fast validation
    sh:sparql [
        sh:message "Large graphs may impact validation performance"@en ;
        sh:severity sh:Info ;
        sh:select """
            SELECT ?this (COUNT(*) as ?tripleCount)
            WHERE {
                ?s ?p ?o .
            }
            GROUP BY ?this
            HAVING (COUNT(*) > 10000)
        """ ;
    ] .

:ValidationPerformanceShape a sh:NodeShape ;
    sh:targetClass kgen:ValidationReport ;
    rdfs:label "Validation Performance Shape"@en ;
    sh:severity sh:Info ;
    
    sh:property [
        sh:path kgen:validationTime ;
        sh:name "Validation Time"@en ;
        sh:datatype xsd:long ;
        sh:maxInclusive 20 ; # 20ms target
        sh:message "Validation should complete within 20ms for optimal performance"@en ;
    ] .

#################################################################
#    Custom Validation Functions
#################################################################

:validateTemplateReferences a sh:SPARQLFunction ;
    rdfs:label "Validate Template References"@en ;
    rdfs:comment "Validates that all template references can be resolved"@en ;
    sh:parameter [
        sh:path :template ;
        sh:datatype xsd:string ;
    ] ;
    sh:returnType xsd:boolean ;
    sh:select """
        SELECT ?result
        WHERE {
            BIND(EXISTS {
                ?templateRef kgen:hasName ?template .
                ?templateRef a kgen:Template .
            } AS ?result)
        }
    """ .

:calculateIntegrityScore a sh:SPARQLFunction ;
    rdfs:label "Calculate Integrity Score"@en ;
    rdfs:comment "Calculates overall integrity score for artifacts"@en ;
    sh:parameter [
        sh:path :artifact ;
        sh:class kgen:Artifact ;
    ] ;
    sh:returnType xsd:decimal ;
    sh:select """
        SELECT ?score
        WHERE {
            ?artifact kgen:hasChecksum ?checksum .
            ?artifact kgen:generatedBy ?activity .
            ?activity prov:wasAssociatedWith ?agent .
            
            # Base score calculation (simplified)
            BIND(1.0 AS ?baseScore)
            BIND(IF(BOUND(?checksum), ?baseScore + 0.3, ?baseScore) AS ?checksumScore)
            BIND(IF(BOUND(?agent), ?checksumScore + 0.2, ?checksumScore) AS ?score)
        }
    """ .

# End of KGEN Attestation SHACL Shapes
# Total shapes: 12 node shapes, 2 functions
# Validation level: strict
# Performance target: ≤20ms for typical graphs, ≤100ms for large graphs