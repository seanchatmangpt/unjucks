apiVersion: v1
kind: Secret
metadata:
  name: kgen-database-secret
  namespace: kgen
  labels:
    app.kubernetes.io/name: kgen
    app.kubernetes.io/component: database-credentials
type: Opaque
data:
  # These should be base64 encoded values
  # In production, use external secret management tools like:
  # - AWS Secrets Manager with External Secrets Operator
  # - HashiCorp Vault
  # - Azure Key Vault
  host: cG9zdGdyZXNxbA==  # postgresql (base64)
  port: NTQzMg==  # 5432 (base64)
  database: a2dlbg==  # kgen (base64)
  username: a2dlbl91c2Vy  # kgen_user (base64)
  password: ""  # TO BE PROVIDED AT DEPLOYMENT TIME

---
apiVersion: v1
kind: Secret
metadata:
  name: kgen-redis-secret
  namespace: kgen
  labels:
    app.kubernetes.io/name: kgen
    app.kubernetes.io/component: redis-credentials
type: Opaque
data:
  host: cmVkaXM=  # redis (base64)
  port: NjM3OQ==  # 6379 (base64)
  password: ""  # TO BE PROVIDED AT DEPLOYMENT TIME

---
apiVersion: v1
kind: Secret
metadata:
  name: kgen-app-secrets
  namespace: kgen
  labels:
    app.kubernetes.io/name: kgen
    app.kubernetes.io/component: application-secrets
type: Opaque
data:
  # API keys and secrets for external services
  jwt-secret: ""  # TO BE PROVIDED AT DEPLOYMENT TIME
  session-secret: ""  # TO BE PROVIDED AT DEPLOYMENT TIME
  encryption-key: ""  # TO BE PROVIDED AT DEPLOYMENT TIME
  
  # External service API keys
  github-token: ""  # Optional: for GitHub integration
  slack-webhook: ""  # Optional: for notifications
  
---
# Certificate secret (managed by cert-manager)
apiVersion: v1
kind: Secret
metadata:
  name: kgen-tls
  namespace: kgen
  labels:
    app.kubernetes.io/name: kgen
    app.kubernetes.io/component: tls-certificates
type: kubernetes.io/tls
data:
  # These will be populated by cert-manager
  tls.crt: ""
  tls.key: ""

---
# External Secrets Operator configuration (if using AWS Secrets Manager)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: kgen-aws-secretstore
  namespace: kgen
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        jwt:
          serviceAccountRef:
            name: kgen-external-secrets-sa

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kgen-database-external
  namespace: kgen
spec:
  refreshInterval: 300s
  secretStoreRef:
    name: kgen-aws-secretstore
    kind: SecretStore
  target:
    name: kgen-database-secret
    creationPolicy: Owner
  data:
  - secretKey: password
    remoteRef:
      key: kgen/production/database
      property: password
  - secretKey: username
    remoteRef:
      key: kgen/production/database
      property: username
  - secretKey: host
    remoteRef:
      key: kgen/production/database
      property: host
  - secretKey: database
    remoteRef:
      key: kgen/production/database
      property: database

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kgen-app-external
  namespace: kgen
spec:
  refreshInterval: 300s
  secretStoreRef:
    name: kgen-aws-secretstore
    kind: SecretStore
  target:
    name: kgen-app-secrets
    creationPolicy: Owner
  data:
  - secretKey: jwt-secret
    remoteRef:
      key: kgen/production/app
      property: jwt-secret
  - secretKey: session-secret
    remoteRef:
      key: kgen/production/app
      property: session-secret
  - secretKey: encryption-key
    remoteRef:
      key: kgen/production/app
      property: encryption-key

---
# Service account for external secrets
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kgen-external-secrets-sa
  namespace: kgen
  labels:
    app.kubernetes.io/name: kgen
    app.kubernetes.io/component: external-secrets
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT-ID:role/KgenExternalSecretsRole

---
# ClusterRole for external secrets (if needed)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kgen-external-secrets-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "patch", "delete", "get", "list", "watch"]
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores", "externalsecrets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kgen-external-secrets-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kgen-external-secrets-role
subjects:
- kind: ServiceAccount
  name: kgen-external-secrets-sa
  namespace: kgen