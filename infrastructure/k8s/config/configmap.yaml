apiVersion: v1
kind: ConfigMap
metadata:
  name: kgen-config
  namespace: kgen
  labels:
    app.kubernetes.io/name: kgen
    app.kubernetes.io/component: configuration
data:
  kgen.config.ts: |
    export default {
      directories: {
        out: './generated',
        state: './.kgen/state',
        cache: './.kgen/cache',
        templates: '_templates',
        rules: './rules',
        knowledge: './knowledge'
      },
      generate: {
        defaultTemplate: 'base',
        attestByDefault: true,
        enableContentAddressing: true,
        staticBuildTime: '2024-01-01T00:00:00.000Z',
        enableCaching: true,
        enableRDF: true,
        enableAttestation: true,
        enableSemanticEnrichment: true,
        strictMode: true
      },
      drift: {
        onDrift: 'fail',
        exitCode: 3,
        tolerance: 0.95
      },
      impact: {
        maxBlastRadius: 5,
        includeInverseRelationships: true
      },
      server: {
        port: process.env.PORT || 3000,
        host: '0.0.0.0',
        cors: {
          origin: process.env.CORS_ORIGIN?.split(',') || ['http://localhost:3000'],
          credentials: true
        }
      },
      database: {
        type: 'postgresql',
        host: process.env.DATABASE_HOST || 'localhost',
        port: parseInt(process.env.DATABASE_PORT || '5432'),
        database: process.env.DATABASE_NAME || 'kgen',
        username: process.env.DATABASE_USERNAME || 'kgen_user',
        password: process.env.DATABASE_PASSWORD || '',
        ssl: process.env.NODE_ENV === 'production',
        pool: {
          min: 2,
          max: 10,
          acquireTimeoutMillis: 30000,
          idleTimeoutMillis: 30000
        }
      },
      redis: {
        host: process.env.REDIS_HOST || 'localhost',
        port: parseInt(process.env.REDIS_PORT || '6379'),
        password: process.env.REDIS_PASSWORD || '',
        db: parseInt(process.env.REDIS_DB || '0'),
        retryDelayOnFailover: 100,
        maxRetriesPerRequest: 3
      },
      logging: {
        level: process.env.LOG_LEVEL || 'info',
        format: process.env.LOG_FORMAT || 'json',
        enableConsole: true,
        enableFile: false
      },
      metrics: {
        enabled: true,
        port: parseInt(process.env.METRICS_PORT || '9090'),
        path: '/metrics',
        collectDefaultMetrics: true,
        histogram: {
          buckets: [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10]
        }
      },
      security: {
        rateLimiting: {
          enabled: true,
          windowMs: 15 * 60 * 1000, // 15 minutes
          max: 100 // requests per window per IP
        },
        helmet: {
          enabled: true,
          contentSecurityPolicy: {
            directives: {
              defaultSrc: ["'self'"],
              styleSrc: ["'self'", "'unsafe-inline'"],
              scriptSrc: ["'self'"],
              imgSrc: ["'self'", "data:", "https:"],
              connectSrc: ["'self'"],
              fontSrc: ["'self'"],
              objectSrc: ["'none'"],
              mediaSrc: ["'self'"],
              frameSrc: ["'none'"]
            }
          }
        }
      },
      health: {
        enabled: true,
        path: '/health',
        readinessPath: '/ready',
        livenessPath: '/live'
      }
    };

  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        upstream kgen_backend {
            least_conn;
            server kgen:3000 max_fails=3 fail_timeout=30s;
        }
        
        server {
            listen 80;
            server_name _;
            
            location /health {
                proxy_pass http://kgen_backend/health;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location / {
                proxy_pass http://kgen_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Timeout settings
                proxy_connect_timeout 5s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kgen-monitoring-config
  namespace: kgen
  labels:
    app.kubernetes.io/name: kgen
    app.kubernetes.io/component: monitoring-configuration
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    scrape_configs:
      - job_name: 'kgen-application'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - kgen
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__

  alerting_rules.yml: |
    groups:
      - name: kgen-application
        rules:
          - alert: KgenHighErrorRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "KGEN application has high error rate"
              description: "KGEN error rate is {{ $value | humanizePercentage }} for the last 5 minutes"
          
          - alert: KgenHighLatency
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "KGEN application has high latency"
              description: "KGEN 95th percentile latency is {{ $value }}s"
          
          - alert: KgenPodCrashLooping
            expr: rate(kube_pod_container_status_restarts_total{namespace="kgen"}[15m]) > 0
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "KGEN pod is crash looping"
              description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is crash looping"
          
          - alert: KgenDatabaseConnectionFailure
            expr: up{job="postgresql"} == 0
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "KGEN database connection failed"
              description: "Unable to connect to KGEN database"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kgen-grafana-dashboards
  namespace: kgen
  labels:
    app.kubernetes.io/name: kgen
    app.kubernetes.io/component: monitoring-dashboards
    grafana_dashboard: "1"
data:
  kgen-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "KGEN Overview",
        "tags": ["kgen", "application"],
        "style": "dark",
        "timezone": "browser",
        "refresh": "30s",
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "panels": [
          {
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"kgen-application\"}[5m])",
                "legendFormat": "{{method}} {{status}}"
              }
            ],
            "yAxes": [
              {
                "label": "Requests/sec"
              }
            ]
          },
          {
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"kgen-application\"}[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, rate(http_request_duration_seconds_bucket{job=\"kgen-application\"}[5m]))",
                "legendFormat": "50th percentile"
              }
            ],
            "yAxes": [
              {
                "label": "Seconds"
              }
            ]
          }
        ]
      }
    }