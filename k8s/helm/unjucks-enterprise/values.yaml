# =============================================================================
# UNJUCKS ENTERPRISE HELM VALUES
# Production-ready configuration with security hardening
# =============================================================================

# Global configuration
global:
  imageRegistry: ghcr.io
  imagePullSecrets:
    - name: ghcr-secret
  storageClass: fast-ssd

# Application configuration
app:
  name: unjucks
  version: 2.0.8
  environment: production
  
# Image configuration
image:
  registry: ghcr.io
  repository: unjucks/unjucks-distroless-production
  tag: latest
  pullPolicy: Always
  pullSecrets:
    - name: ghcr-secret

# Alternative images for different use cases
images:
  distroless:
    repository: unjucks/unjucks-distroless-production
    tag: latest
  hardened:
    repository: unjucks/unjucks-security-hardened
    tag: latest
  performance:
    repository: unjucks/unjucks-performance-optimized
    tag: latest

# Deployment configuration
deployment:
  replicaCount: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 2
    maxUnavailable: 1

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  annotations: {}
  labels: {}

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: unjucks.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: unjucks-tls
      hosts:
        - unjucks.example.com

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60

# Resource configuration
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 128Mi

# Security context (enterprise-grade security)
securityContext:
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534
  fsGroup: 65534
  seccompProfile:
    type: RuntimeDefault
  supplementalGroups: []

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534
  fsGroup: 65534
  fsGroupChangePolicy: OnRootMismatch

containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault

# Network policies
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: unjucks
  egress:
    enabled: true
    to:
      - {}  # Allow all outbound traffic
    ports:
      - port: 53
        protocol: UDP  # DNS
      - port: 53
        protocol: TCP  # DNS
      - port: 443
        protocol: TCP  # HTTPS
      - port: 80
        protocol: TCP  # HTTP

# Pod Security Policy (deprecated, use Pod Security Standards)
podSecurityStandards:
  enabled: true
  enforce: restricted
  audit: restricted
  warn: restricted

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: unjucks
  automountServiceAccountToken: false

# RBAC
rbac:
  create: true
  rules: []

# ConfigMap and Secrets
config:
  # Application configuration
  nodeEnv: production
  logLevel: info
  port: 3000
  
secrets:
  # External secrets operator integration
  enabled: false
  secretStore:
    name: vault-backend
    kind: SecretStore
  
# Persistent volumes
persistence:
  enabled: true
  storageClass: fast-ssd
  accessMode: ReadWriteOnce
  size: 10Gi
  mountPath: /app/data
  annotations: {}

# Monitoring and observability
monitoring:
  enabled: true
  
  # Prometheus metrics
  prometheus:
    enabled: true
    port: 9090
    path: /metrics
    scrapeInterval: 30s
    
  # ServiceMonitor for Prometheus Operator
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    annotations: {}

# Health checks
healthChecks:
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
    
  readinessProbe:
    enabled: true
    httpGet:
      path: /ready
      port: 3000
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3
    
  startupProbe:
    enabled: true
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 30

# Node affinity and tolerations
nodeAffinity:
  enabled: false
  requiredDuringSchedulingIgnoredDuringExecution: {}
  preferredDuringSchedulingIgnoredDuringExecution: []

podAffinity:
  enabled: false
  requiredDuringSchedulingIgnoredDuringExecution: {}
  preferredDuringSchedulingIgnoredDuringExecution: []

podAntiAffinity:
  enabled: true
  preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - unjucks
        topologyKey: kubernetes.io/hostname

tolerations: []

# Environment variables
env:
  NODE_ENV: production
  PORT: "3000"
  LOG_LEVEL: info
  NPM_CONFIG_FUND: "false"

envFrom: []

# Init containers
initContainers: []

# Sidecar containers
sidecars: []

# Volumes and volume mounts
volumes:
  - name: tmp
    emptyDir: {}
  - name: cache
    emptyDir: {}

volumeMounts:
  - name: tmp
    mountPath: /tmp
    readOnly: false
  - name: cache
    mountPath: /app/.cache
    readOnly: false

# Pod annotations and labels
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "3000"
  prometheus.io/path: "/metrics"

podLabels:
  app.kubernetes.io/component: backend
  app.kubernetes.io/part-of: unjucks
  version: v2.0.8

# Deployment annotations and labels
annotations: {}
labels: {}

# Tests
tests:
  enabled: true
  image:
    repository: unjucks/unjucks-cleanroom-testing
    tag: latest
    pullPolicy: Always

# Enterprise features
enterprise:
  # Multi-cluster support
  multiCluster:
    enabled: false
    clusters: []
  
  # Backup and disaster recovery
  backup:
    enabled: false
    schedule: "0 2 * * *"
    retention: 30
    
  # Security scanning
  security:
    enabled: true
    scanOnDeploy: true
    blockOnCritical: true
    
  # Compliance
  compliance:
    enabled: true
    standards:
      - cis
      - nist
      - sox
      - pci
    
# External dependencies
dependencies:
  # PostgreSQL
  postgresql:
    enabled: false
    auth:
      postgresPassword: ""
      username: unjucks
      password: ""
      database: unjucks
    
  # Redis
  redis:
    enabled: false
    auth:
      enabled: true
      password: ""
    
# Metrics and logging
metrics:
  # Prometheus metrics
  prometheus:
    enabled: true
    
  # Grafana dashboards
  grafana:
    enabled: false
    dashboards: {}
    
logging:
  # Centralized logging
  enabled: true
  level: info
  format: json
  
  # Log aggregation
  aggregation:
    enabled: false
    endpoint: ""