#!/usr/bin/env node
/**
 * Demo workflow for kgen project commands
 * 
 * Demonstrates:
 * - kgen project lock - Generate deterministic lockfiles
 * - kgen project attest - Create attestation bundles
 * - kgen project verify - Verify reproducibility
 * - kgen project version - Manage component versions
 */

import { promises as fs } from 'fs';
import path from 'path';
import os from 'os';
import consola from 'consola';
import { ProjectManager } from '../packages/kgen-core/src/project/index.js';

const logger = consola.withTag('demo-project-workflow');

async function runProjectWorkflowDemo() {
  try {
    logger.info('🚀 Starting kgen project workflow demonstration...');

    // Create temporary demo directory
    const demoDir = await fs.mkdtemp(path.join(os.tmpdir(), 'kgen-project-demo-'));
    logger.info(`📁 Demo directory: ${demoDir}`);

    // Initialize project manager
    const projectManager = new ProjectManager({
      projectRoot: demoDir,
      lockfileName: 'demo.lock.json'
    });

    await projectManager.initialize();
    logger.success('✅ Project manager initialized');

    // 1. Demonstrate lockfile generation
    logger.info('📋 Step 1: Generate deterministic lockfile...');
    
    const lockOptions = {
      projectName: 'demo-project',
      projectVersion: '1.0.0',
      templates: [
        {
          id: 'demo-template-1',
          version: '1.0.0',
          name: 'Demo Template 1',
          content: 'Hello {{ name }}!',
          dependencies: []
        },
        {
          id: 'demo-template-2', 
          version: '2.1.0',
          name: 'Demo Template 2',
          content: 'Goodbye {{ name }}!',
          dependencies: ['demo-template-1']
        }
      ],
      rules: [
        {
          id: 'demo-rule-1',
          version: '1.0.0',
          name: 'Demo Validation Rule',
          type: 'validation',
          content: 'function validate(data) { return data.name; }'
        }
      ]
    };

    const lockResult = await projectManager.lock(lockOptions);
    logger.success(`✅ Lockfile generated: ${lockResult.lockfilePath}`);
    logger.info(`📊 Templates locked: ${Object.keys(lockResult.lockfile.templates).length}`);
    logger.info(`📊 Rules locked: ${Object.keys(lockResult.lockfile.rules).length}`);

    // 2. Create demo artifacts for attestation
    logger.info('📦 Step 2: Create demo artifacts...');
    
    const artifact1Path = path.join(demoDir, 'generated-output-1.js');
    const artifact1Content = `// Generated by demo-template-1
console.log("Hello World!");
`;
    await fs.writeFile(artifact1Path, artifact1Content);

    const artifact2Path = path.join(demoDir, 'generated-output-2.json');
    const artifact2Content = JSON.stringify({
      message: "Goodbye World!",
      timestamp: this.getDeterministicDate().toISOString(),
      generator: "demo-template-2"
    }, null, 2);
    await fs.writeFile(artifact2Path, artifact2Content);

    // Create mock attestation files
    const attestation1 = {
      artifactPath: artifact1Path,
      artifactHash: 'mock-hash-1',
      generatedAt: this.getDeterministicDate().toISOString(),
      templateId: 'demo-template-1',
      operationId: 'demo-op-1',
      engineVersion: '1.0.0'
    };
    await fs.writeFile(`${artifact1Path}.attest.json`, JSON.stringify(attestation1, null, 2));

    const attestation2 = {
      artifactPath: artifact2Path,
      artifactHash: 'mock-hash-2',
      generatedAt: this.getDeterministicDate().toISOString(),
      templateId: 'demo-template-2',
      operationId: 'demo-op-2',
      engineVersion: '1.0.0'
    };
    await fs.writeFile(`${artifact2Path}.attest.json`, JSON.stringify(attestation2, null, 2));

    logger.success('✅ Demo artifacts created with attestations');

    // 3. Create attestation bundle (mock since we can't test actual archiving easily)
    logger.info('📦 Step 3: Create attestation bundle...');
    
    // Mock the actual bundle creation for demo purposes
    projectManager.attestationBundler.createAttestationBundle = async (request) => {
      const bundlePath = path.join(demoDir, 'demo-attestation-bundle.zip');
      // Create a mock zip file for demo
      await fs.writeFile(bundlePath, 'Mock bundle content');
      
      return {
        bundleId: 'demo-bundle-123',
        bundlePath,
        bundleHash: 'mock-bundle-hash',
        signature: null,
        manifest: {
          bundleId: 'demo-bundle-123',
          artifacts: request.artifactPaths.map(p => ({ path: p, name: path.basename(p) })),
          attestations: request.artifactPaths.length,
          purpose: request.purpose
        },
        size: 1024,
        createdAt: this.getDeterministicDate().toISOString()
      };
    };

    const attestOptions = {
      paths: [artifact1Path, artifact2Path],
      purpose: 'demonstration',
      description: 'Demo attestation bundle showing reproducible build artifacts',
      framework: 'enterprise',
      user: 'demo-user'
    };

    const attestResult = await projectManager.attest(attestOptions);
    logger.success(`✅ Attestation bundle created: ${attestResult.bundlePath}`);
    logger.info(`📊 Bundle ID: ${attestResult.bundleId}`);
    logger.info(`📊 Artifacts bundled: ${attestResult.manifest.artifacts.length}`);

    // 4. Demonstrate version management
    logger.info('🏷️ Step 4: Demonstrate version management...');
    
    // Register component versions
    const registerOptions = {
      action: 'register',
      componentType: 'template',
      componentInfo: {
        id: 'demo-template-3',
        version: '1.0.0',
        name: 'Demo Template 3',
        content: 'Welcome {{ user }}!',
        dependencies: []
      }
    };

    const registerResult = await projectManager.version(registerOptions);
    logger.success(`✅ Template registered: ${registerResult.registrationResult.templateKey}`);

    // List versions
    const listOptions = {
      action: 'list',
      component: 'demo-template-3'
    };

    const listResult = await projectManager.version(listOptions);
    logger.success(`✅ Version history retrieved for ${listResult.componentId}`);
    logger.info(`📊 Latest version: ${listResult.latest}`);

    // 5. Demonstrate verification (mock)
    logger.info('🔍 Step 5: Demonstrate reproducibility verification...');
    
    // Mock verification for demo
    projectManager.reproducibilityVerifier.verifyReproducibility = async () => ({
      verificationId: 'demo-verification-123',
      reproducible: true,
      confidence: 1.0,
      totalBuilds: 2,
      successfulBuilds: 2,
      identicalBuilds: 2,
      issues: [],
      warnings: []
    });

    const verifyOptions = {
      type: 'build',
      lockfile: lockResult.lockfilePath,
      command: 'echo "demo build"'
    };

    const verifyResult = await projectManager.verify(verifyOptions);
    logger.success(`✅ Reproducibility verified: ${verifyResult.verification.reproducible}`);
    logger.info(`📊 Confidence: ${(verifyResult.verification.confidence * 100).toFixed(1)}%`);
    logger.info(`📊 Successful builds: ${verifyResult.verification.successfulBuilds}/${verifyResult.verification.totalBuilds}`);

    // Summary
    logger.info('📋 DEMO SUMMARY:');
    logger.info('================');
    logger.info(`🔒 Lockfile: ${path.basename(lockResult.lockfilePath)} (${Object.keys(lockResult.lockfile.templates).length} templates, ${Object.keys(lockResult.lockfile.rules).length} rules)`);
    logger.info(`📦 Bundle: ${path.basename(attestResult.bundlePath)} (${attestResult.manifest.artifacts.length} artifacts)`);
    logger.info(`🏷️ Versions: ${registerResult.registrationResult.templateKey} registered`);
    logger.info(`🔍 Verification: ${verifyResult.verification.reproducible ? 'REPRODUCIBLE' : 'NOT REPRODUCIBLE'}`);
    
    logger.success('🎉 Demo workflow completed successfully!');
    
    // Cleanup
    logger.info('🧹 Cleaning up demo directory...');
    await fs.rm(demoDir, { recursive: true, force: true });
    logger.success('✅ Cleanup completed');

    return {
      success: true,
      demoDir,
      results: {
        lockfile: lockResult,
        attestation: attestResult,
        registration: registerResult,
        verification: verifyResult
      }
    };

  } catch (error) {
    logger.error('❌ Demo workflow failed:', error);
    throw error;
  }
}

// Run demo if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  runProjectWorkflowDemo()
    .then((result) => {
      logger.success('🎉 All kgen project commands demonstrated successfully!');
      process.exit(0);
    })
    .catch((error) => {
      logger.error('💥 Demo failed:', error);
      process.exit(1);
    });
}

export { runProjectWorkflowDemo };