/**
 * Simple validation script for KGEN Template Engine
 * 
 * Tests basic functionality without requiring test framework
 */

import { promises as fs } from 'fs';
import { join } from 'path';
import { createTemplateEngine } from '../packages/kgen-core/src/templating/index.js';

async function validateTemplateEngine() {
  console.log('🚀 Validating KGEN Template Engine...\n');

  // Create temp directories
  const tempDir = join(process.cwd(), 'temp-validation-' + this.getDeterministicTimestamp());
  const templatesDir = join(tempDir, 'templates');
  const outputDir = join(tempDir, 'output');
  
  try {
    await fs.mkdir(templatesDir, { recursive: true });
    await fs.mkdir(outputDir, { recursive: true });

    // Test 1: Basic template creation
    console.log('✅ Test 1: Create template engine');
    const engine = createTemplateEngine({
      templatesDir,
      outputDir,
      debug: true
    });
    console.log('   Template engine created successfully');

    // Test 2: Simple template rendering
    console.log('\n✅ Test 2: Simple template rendering');
    const simpleTemplate = 'Hello {{ name }}! Today is {{ _utils.now() | truncate(10) }}.';
    const simplePath = join(templatesDir, 'simple.njk');
    await fs.writeFile(simplePath, simpleTemplate);

    const simpleResult = await engine.render('simple.njk', { name: 'KGEN' });
    console.log('   Rendered:', simpleResult.content);
    console.log('   Render time:', simpleResult.renderTime.toFixed(2) + 'ms');

    // Test 3: Template with frontmatter
    console.log('\n✅ Test 3: Template with frontmatter');
    const frontmatterTemplate = `---
to: greeting-{{ name | kebabCase }}.txt
description: Personalized greeting
---
# Welcome {{ name | pascalCase }}!

This file was generated by KGEN.
Generated at: {{ _kgen.generatedAt }}

Features demonstrated:
- String case filters: {{ name | camelCase }}, {{ name | snakeCase }}
- Path generation: {{ name | kebabCase }}
- Metadata access: {{ _kgen.template }}`;

    const frontmatterPath = join(templatesDir, 'greeting.njk');
    await fs.writeFile(frontmatterPath, frontmatterTemplate);

    const frontmatterResult = await engine.render('greeting.njk', { name: 'test user' });
    console.log('   Output path:', frontmatterResult.outputPath);
    console.log('   Frontmatter:', JSON.stringify(frontmatterResult.frontmatter, null, 2));

    // Test 4: File generation
    console.log('\n✅ Test 4: File generation');
    const generateResult = await engine.generate('greeting.njk', { name: 'validation test' });
    console.log('   Write result:', generateResult.writeResult);
    
    // Verify file was created
    const generatedFile = generateResult.writeResult.path;
    const fileContent = await fs.readFile(generatedFile, 'utf-8');
    console.log('   Generated file content preview:');
    console.log('   ' + fileContent.split('\n').slice(0, 3).join('\n   '));

    // Test 5: Template listing
    console.log('\n✅ Test 5: Template discovery');
    const templates = await engine.listTemplates();
    console.log('   Found templates:', templates);

    // Test 6: Statistics
    console.log('\n✅ Test 6: Rendering statistics');
    const stats = engine.getStats();
    console.log('   Statistics:', {
      renders: stats.renders,
      errors: stats.errors,
      templates: stats.uniqueTemplates,
      variables: stats.uniqueVariables
    });

    // Test 7: Filter functionality
    console.log('\n✅ Test 7: Built-in filters');
    const filterTemplate = `---
to: filters-demo.txt
---
Text transformations:
- Original: "{{ text }}"
- camelCase: "{{ text | camelCase }}"
- PascalCase: "{{ text | pascalCase }}"
- kebab-case: "{{ text | kebabCase }}"
- snake_case: "{{ text | snakeCase }}"
- KGEN ID: "{{ text | kgenId }}"

URI utilities:
- Local name: "{{ uri | localName }}"
- Namespace: "{{ uri | namespace }}"

Utilities:
- Unique array: {{ items | unique | join(', ') }}
- Timestamp: {{ _utils.timestamp() }}`;

    const filterPath = join(templatesDir, 'filters.njk');
    await fs.writeFile(filterPath, filterTemplate);

    const filterResult = await engine.render('filters.njk', {
      text: 'hello world example',
      uri: 'http://example.org/ns#Property',
      items: ['a', 'b', 'a', 'c', 'b']
    });
    console.log('   Filter demo output:');
    console.log(filterResult.content.split('\n').map(line => '   ' + line).join('\n'));

    console.log('\n🎉 All validation tests passed!');
    console.log('\n📊 Final Statistics:');
    const finalStats = engine.getStats();
    console.log('   - Total renders:', finalStats.renders);
    console.log('   - Total templates:', finalStats.uniqueTemplates);
    console.log('   - Total variables used:', finalStats.uniqueVariables);
    console.log('   - Error rate:', (finalStats.errorRate * 100).toFixed(1) + '%');

  } catch (error) {
    console.error('❌ Validation failed:', error.message);
    if (error.stack) {
      console.error('\nStack trace:');
      console.error(error.stack);
    }
    process.exit(1);

  } finally {
    // Cleanup
    try {
      await fs.rm(tempDir, { recursive: true, force: true });
      console.log('\n🧹 Cleanup completed');
    } catch (error) {
      console.warn('⚠️ Cleanup failed:', error.message);
    }
  }
}

// Run validation
validateTemplateEngine().catch(console.error);