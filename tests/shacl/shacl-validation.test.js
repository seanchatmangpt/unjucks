/**\n * SHACL Validation Engine Tests\n * Tests for the working SHACL validation implementation\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from 'vitest';\nimport { SHACLEngine } from '../../packages/kgen-core/src/shacl/validator.js';\nimport { SHACLReporter } from '../../packages/kgen-core/src/shacl/reporter.js';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst testDataDir = path.join(__dirname, '../test-data/shacl');\n\ndescribe('SHACL Validation Engine', () => {\n  let validator;\n  let reporter;\n\n  beforeEach(async () => {\n    validator = new SHACLEngine();\n    reporter = new SHACLReporter();\n    \n    // Ensure test data directory exists\n    await fs.mkdir(testDataDir, { recursive: true });\n  });\n\n  afterEach(async () => {\n    // Cleanup test files\n    try {\n      const files = await fs.readdir(testDataDir);\n      await Promise.all(\n        files.map(file => fs.unlink(path.join(testDataDir, file)).catch(() => {}))\n      );\n    } catch {}\n  });\n\n  describe('SHACLEngine', () => {\n    it('should initialize correctly', async () => {\n      expect(validator).toBeDefined();\n      expect(validator.factory).toBeDefined();\n      expect(validator.initialized).toBe(false);\n      \n      await validator.initialize();\n      // Note: initialization may fail if rdf-validate-shacl is not available\n      // That's OK - the engine should handle this gracefully\n    });\n\n    it('should validate valid RDF data', async () => {\n      const validData = `\n        @prefix kgen: <https://kgen.io/ontology#> .\n        @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n        \n        <artifact1> a kgen:Artifact ;\n            kgen:contentHash \"sha256:abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890\" ;\n            kgen:filePath \"src/example.js\" ;\n            kgen:createdAt \"2024-01-15T10:30:00Z\"^^xsd:dateTime ;\n            kgen:fileSize 1024 ;\n            kgen:mimeType \"application/javascript\" .\n      `;\n\n      const shapes = `\n        @prefix sh: <http://www.w3.org/ns/shacl#> .\n        @prefix kgen: <https://kgen.io/ontology#> .\n        @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n        \n        kgen:ArtifactShape a sh:NodeShape ;\n            sh:targetClass kgen:Artifact ;\n            sh:property [\n                sh:path kgen:contentHash ;\n                sh:datatype xsd:string ;\n                sh:minCount 1 ;\n                sh:pattern \"^sha256:[a-f0-9]{64}$\" ;\n            ] ;\n            sh:property [\n                sh:path kgen:filePath ;\n                sh:datatype xsd:string ;\n                sh:minCount 1 ;\n            ] .\n      `;\n\n      // Write test files\n      const dataFile = path.join(testDataDir, 'valid-data.ttl');\n      const shapesFile = path.join(testDataDir, 'artifact-shapes.ttl');\n      \n      await fs.writeFile(dataFile, validData);\n      await fs.writeFile(shapesFile, shapes);\n\n      const result = await validator.validateFile(dataFile, shapesFile);\n      \n      expect(result).toBeDefined();\n      expect(result.conforms).toBe(true);\n      expect(result.violations).toEqual([]);\n      expect(result.timestamp).toBeDefined();\n      expect(result.engine).toBeDefined();\n    });\n\n    it('should detect constraint violations', async () => {\n      const invalidData = `\n        @prefix kgen: <https://kgen.io/ontology#> .\n        @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n        \n        <artifact1> a kgen:Artifact ;\n            kgen:contentHash \"invalid-hash\" ;\n            kgen:fileSize -100 ;\n            kgen:mimeType \"invalid/type\" .\n      `;\n\n      const shapes = `\n        @prefix sh: <http://www.w3.org/ns/shacl#> .\n        @prefix kgen: <https://kgen.io/ontology#> .\n        @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n        \n        kgen:ArtifactShape a sh:NodeShape ;\n            sh:targetClass kgen:Artifact ;\n            sh:property [\n                sh:path kgen:contentHash ;\n                sh:datatype xsd:string ;\n                sh:minCount 1 ;\n                sh:pattern \"^sha256:[a-f0-9]{64}$\" ;\n                sh:message \"Content hash must be valid SHA-256\" ;\n            ] ;\n            sh:property [\n                sh:path kgen:fileSize ;\n                sh:datatype xsd:integer ;\n                sh:minInclusive 0 ;\n                sh:message \"File size must be non-negative\" ;\n            ] .\n      `;\n\n      const dataFile = path.join(testDataDir, 'invalid-data.ttl');\n      const shapesFile = path.join(testDataDir, 'artifact-shapes.ttl');\n      \n      await fs.writeFile(dataFile, invalidData);\n      await fs.writeFile(shapesFile, shapes);\n\n      const result = await validator.validateFile(dataFile, shapesFile);\n      \n      expect(result).toBeDefined();\n      expect(result.conforms).toBe(false);\n      expect(result.violations.length).toBeGreaterThan(0);\n      \n      // Check for expected violations\n      const hashViolation = result.violations.find(v => \n        v.path.includes('contentHash') || v.message.includes('hash')\n      );\n      expect(hashViolation).toBeDefined();\n    });\n\n    it('should handle missing files gracefully', async () => {\n      const nonExistentFile = path.join(testDataDir, 'does-not-exist.ttl');\n      const shapesFile = path.join(testDataDir, 'shapes.ttl');\n      \n      await fs.writeFile(shapesFile, '@prefix sh: <http://www.w3.org/ns/shacl#> .');\n\n      const result = await validator.validateFile(nonExistentFile, shapesFile);\n      \n      expect(result).toBeDefined();\n      expect(result.conforms).toBe(false);\n      expect(result.violations.length).toBeGreaterThan(0);\n      \n      const fileError = result.violations.find(v => \n        v.constraint === 'file-access' || v.message.includes('Failed to load')\n      );\n      expect(fileError).toBeDefined();\n    });\n\n    it('should generate validation summary', async () => {\n      const result = {\n        conforms: false,\n        violations: [\n          { severity: 'violation', message: 'Test violation 1' },\n          { severity: 'warning', message: 'Test warning 1' },\n          { severity: 'violation', message: 'Test violation 2' }\n        ],\n        timestamp: '2024-01-15T10:30:00Z',\n        engine: 'test-engine'\n      };\n\n      const summary = validator.generateSummary(result);\n      \n      expect(summary).toBeDefined();\n      expect(summary.conforms).toBe(false);\n      expect(summary.totalViolations).toBe(3);\n      expect(summary.violationsBySeverity.violation).toBe(2);\n      expect(summary.violationsBySeverity.warning).toBe(1);\n    });\n  });\n\n  describe('SHACLReporter', () => {\n    const sampleResult = {\n      conforms: false,\n      violations: [\n        {\n          focusNode: 'https://example.org/artifact1',\n          path: 'kgen:contentHash',\n          value: 'invalid-hash',\n          message: 'Content hash must be valid SHA-256',\n          severity: 'violation',\n          constraint: 'pattern-constraint',\n          shape: 'kgen:ArtifactShape'\n        },\n        {\n          focusNode: 'https://example.org/artifact1',\n          path: 'kgen:fileSize',\n          value: '-100',\n          message: 'File size must be non-negative',\n          severity: 'warning',\n          constraint: 'minInclusive-constraint',\n          shape: 'kgen:ArtifactShape'\n        }\n      ],\n      timestamp: '2024-01-15T10:30:00Z',\n      engine: 'test-shacl-engine'\n    };\n\n    it('should generate JSON report', () => {\n      const report = reporter.generateReport(sampleResult, 'json');\n      \n      expect(report).toBeDefined();\n      expect(typeof report).toBe('string');\n      \n      const parsed = JSON.parse(report);\n      expect(parsed.summary.conforms).toBe(false);\n      expect(parsed.violations).toHaveLength(2);\n      expect(parsed.metadata.generatedBy).toBe('KGEN SHACL Reporter');\n    });\n\n    it('should generate summary report', () => {\n      const report = reporter.generateReport(sampleResult, 'summary');\n      \n      expect(report).toBeDefined();\n      expect(typeof report).toBe('string');\n      expect(report).toContain('SHACL Validation Report');\n      expect(report).toContain('Conforms: ❌ NO');\n      expect(report).toContain('Total Violations: 2');\n      expect(report).toContain('Content hash must be valid SHA-256');\n    });\n\n    it('should generate detailed report', () => {\n      const report = reporter.generateReport(sampleResult, 'detailed');\n      \n      expect(report).toBeDefined();\n      expect(typeof report).toBe('string');\n      expect(report).toContain('DETAILED SHACL VALIDATION REPORT');\n      expect(report).toContain('VIOLATION BREAKDOWN');\n      expect(report).toContain('BY CONSTRAINT TYPE');\n      expect(report).toContain('DETAILED VIOLATIONS');\n      expect(report).toContain('pattern-constraint');\n    });\n\n    it('should generate CSV report', () => {\n      const report = reporter.generateReport(sampleResult, 'csv');\n      \n      expect(report).toBeDefined();\n      expect(typeof report).toBe('string');\n      expect(report).toContain('Index,Severity,Message');\n      expect(report).toContain('violation,\"Content hash must be valid SHA-256\"');\n      expect(report).toContain('warning,\"File size must be non-negative\"');\n    });\n\n    it('should generate Turtle report', () => {\n      const report = reporter.generateReport(sampleResult, 'turtle');\n      \n      expect(report).toBeDefined();\n      expect(typeof report).toBe('string');\n      expect(report).toContain('@prefix sh:');\n      expect(report).toContain('sh:ValidationReport');\n      expect(report).toContain('sh:conforms false');\n      expect(report).toContain('sh:ValidationResult');\n    });\n\n    it('should save report to file', async () => {\n      const outputFile = path.join(testDataDir, 'test-report.json');\n      \n      await reporter.saveReport(sampleResult, 'json', outputFile);\n      \n      const exists = await fs.access(outputFile).then(() => true).catch(() => false);\n      expect(exists).toBe(true);\n      \n      const content = await fs.readFile(outputFile, 'utf-8');\n      const parsed = JSON.parse(content);\n      expect(parsed.summary.conforms).toBe(false);\n    });\n\n    it('should generate multiple reports', async () => {\n      const basePath = path.join(testDataDir, 'multi-report');\n      const formats = ['json', 'summary', 'csv'];\n      \n      const generatedFiles = await reporter.generateMultipleReports(\n        sampleResult, \n        basePath, \n        formats\n      );\n      \n      expect(generatedFiles).toHaveLength(3);\n      expect(generatedFiles[0]).toBe(`${basePath}.json`);\n      expect(generatedFiles[1]).toBe(`${basePath}.txt`);\n      expect(generatedFiles[2]).toBe(`${basePath}.csv`);\n      \n      // Verify files exist\n      for (const file of generatedFiles) {\n        const exists = await fs.access(file).then(() => true).catch(() => false);\n        expect(exists).toBe(true);\n      }\n    });\n\n    it('should group violations correctly', () => {\n      const violations = [\n        { severity: 'violation' },\n        { severity: 'warning' },\n        { severity: 'violation' },\n        { severity: 'info' }\n      ];\n      \n      const grouped = reporter.groupViolationsBySeverity(violations);\n      \n      expect(grouped.violation).toBe(2);\n      expect(grouped.warning).toBe(1);\n      expect(grouped.info).toBe(1);\n    });\n  });\n\n  describe('Integration Tests', () => {\n    it('should validate real artifact shapes', async () => {\n      // Use the actual artifact shapes file\n      const shapesFile = path.resolve('ontologies/shacl/artifact-shapes.ttl');\n      \n      // Create a test artifact that should pass validation\n      const validArtifact = `\n        @prefix kgen: <https://kgen.io/ontology#> .\n        @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n        \n        <https://example.org/artifact1> a kgen:Artifact ;\n            kgen:contentHash \"sha256:abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890\" ;\n            kgen:filePath \"src/example.js\" ;\n            kgen:createdAt \"2024-01-15T10:30:00Z\"^^xsd:dateTime ;\n            kgen:fileSize 1024 ;\n            kgen:mimeType \"application/javascript\" .\n      `;\n      \n      const dataFile = path.join(testDataDir, 'real-artifact.ttl');\n      await fs.writeFile(dataFile, validArtifact);\n      \n      // Check if shapes file exists\n      const shapesExists = await fs.access(shapesFile).then(() => true).catch(() => false);\n      \n      if (shapesExists) {\n        const result = await validator.validateFile(dataFile, shapesFile);\n        \n        expect(result).toBeDefined();\n        expect(result.timestamp).toBeDefined();\n        expect(result.engine).toBeDefined();\n        \n        // If there are violations, they should be meaningful\n        if (!result.conforms) {\n          expect(result.violations.length).toBeGreaterThan(0);\n          result.violations.forEach(violation => {\n            expect(violation.message).toBeDefined();\n            expect(violation.severity).toBeDefined();\n            expect(violation.path).toBeDefined();\n          });\n        }\n      } else {\n        console.warn('Skipping real shapes test - artifact-shapes.ttl not found');\n      }\n    });\n  });\n});"