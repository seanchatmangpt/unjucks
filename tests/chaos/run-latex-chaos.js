#!/usr/bin/env node

/**
 * LaTeX Chaos Test Runner
 * Execute comprehensive chaos tests against LaTeX functionality
 */

import LaTeXChaosEngine from './latex-chaos-tests.js';
import { promises as fs } from 'fs';
import path from 'path';

async function main() {
  console.log('üî• LaTeX Chaos Engineering Suite');
  console.log('=================================');
  console.log('Breaking LaTeX to find real failure modes...\n');

  const chaosEngine = new LaTeXChaosEngine({
    timeout: 30000 // 30 second timeout for each test
  });

  try {
    const report = await chaosEngine.runAllTests();
    
    // Save detailed report
    const reportPath = path.join(process.cwd(), 'tests/chaos/latex-chaos-report.json');
    await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
    
    console.log(`\nüìä Detailed report saved to: ${reportPath}`);
    
    // Save summary report
    const summaryPath = path.join(process.cwd(), 'tests/chaos/latex-chaos-summary.md');
    const summaryContent = generateMarkdownReport(report);
    await fs.writeFile(summaryPath, summaryContent);
    
    console.log(`üìã Summary report saved to: ${summaryPath}`);
    
    // Exit with error code if critical issues found
    if (report.criticalFindings.length > 0) {
      console.log('\nüö® CRITICAL ISSUES DETECTED - Exiting with error code 1');
      process.exit(1);
    }
    
    console.log('\n‚úÖ Chaos testing completed');
    
  } catch (error) {
    console.error('‚ùå Chaos testing failed:', error);
    process.exit(1);
  }
}

function generateMarkdownReport(report) {
  return `# LaTeX Chaos Engineering Report

Generated: ${this.getDeterministicDate().toISOString()}

## Executive Summary

- **Total Tests:** ${report.summary.total}
- **Failures:** ${report.summary.failures} (${report.summary.failureRate})
- **Success Rate:** ${(100 - parseFloat(report.summary.failureRate)).toFixed(2)}%

## Critical Findings

${report.criticalFindings.map(finding => `- ‚ö†Ô∏è  ${finding}`).join('\n')}

## Test Categories

${Object.entries(report.categories).map(([category, stats]) => 
  `### ${category.toUpperCase()}\n- Total: ${stats.total}\n- Failures: ${stats.failures}\n- Success Rate: ${((stats.total - stats.failures) / stats.total * 100).toFixed(1)}%`
).join('\n\n')}

## Recommendations

${report.recommendations.map(rec => `- üí° ${rec}`).join('\n')}

## Detailed Test Results

${report.fullResults.map(result => 
  `### ${result.test} ${result.failed ? '‚ùå' : '‚úÖ'}
- **Status:** ${result.failed ? 'FAILED' : 'PASSED'}
- **Timestamp:** ${result.timestamp}
- **Details:** ${typeof result.details === 'string' ? result.details : JSON.stringify(result.details, null, 2)}
`).join('\n')}

---

*Report generated by LaTeX Chaos Engineering Suite*
`;
}

// Run if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { main as runLatexChaosTests };