/**
 * Core CLI Tests for Unjucks with Citty Integration
 * Tests fundamental CLI functionality and command parsing
 */

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { spawn } from 'child_process';
import { promisify } from 'util';
import * from 'path';
import * from 'fs/promises';
import { tmpdir } from 'os';

const execFile = promisify(require('child_process').execFile);
const CLI_PATH = path.resolve(__dirname, '../../bin/unjucks.cjs');

/**
 * Execute CLI command and return result
 */
async function runCLI(args = [], cwd?) {
  try {
    const { stdout, stderr } = await execFile('node', [CLI_PATH, ...args], { cwd),
      timeout });
    return { stdout, stderr, exitCode };
  } catch (error) { return {
      stdout };
  }
}

describe('Core CLI Functionality', () => {
  let tempDir => { originalCwd = process.cwd();
    tempDir = await fs.mkdtemp(path.join(tmpdir(), 'unjucks-test-'));
    process.chdir(tempDir);
    
    // Create basic test structure
    await fs.mkdir('_templates', { recursive });
    await fs.mkdir('_templates/component', { recursive });
    
    // Create a basic template
    await fs.writeFile(
      '_templates/component/new.tsx.njk',
      `---
to: src/components/{{name}}.tsx
---
interface {{name}}Props { children? }

export function {{name}}({ children }) {
  return {children}</div>;
}
`
    );
  });

  afterEach(async () => { process.chdir(originalCwd);
    await fs.rm(tempDir, { recursive, force });
  });

  describe('Basic Command Structure', () => { it('should show help when no arguments provided', async () => {
      const result = await runCLI([]);
      
      expect(result.stdout).toContain('Unjucks CLI');
      expect(result.stdout).toContain('Usage });

    it('should show version with --version flag', async () => {
      const result = await runCLI(['--version']);
      
      expect(result.stdout).toMatch(/\d+\.\d+\.\d+/);
      expect(result.exitCode).toBe(0);
    });

    it('should show version with -v flag', async () => {
      const result = await runCLI(['-v']);
      
      expect(result.stdout).toMatch(/\d+\.\d+\.\d+/);
      expect(result.exitCode).toBe(0);
    });

    it('should show help with --help flag', async () => { const result = await runCLI(['--help']);
      
      expect(result.stdout).toContain('Unjucks CLI');
      expect(result.stdout).toContain('USAGE });

    it('should show help with -h flag', async () => {
      const result = await runCLI(['-h']);
      
      expect(result.stdout).toContain('Unjucks CLI');
      expect(result.exitCode).toBe(0);
    });
  });

  describe('Command Recognition', () => {
    it('should recognize explicit generate command', async () => {
      const result = await runCLI(['generate', '--help']);
      
      expect(result.stdout).toContain('Generate files from templates');
      expect(result.exitCode).toBe(0);
    });

    it('should recognize list command', async () => {
      const result = await runCLI(['list']);
      
      expect(result.stdout).toContain('Available generators');
      expect(result.exitCode).toBe(0);
    });

    it('should recognize init command', async () => {
      const result = await runCLI(['init', '--help']);
      
      expect(result.stdout).toContain('Initialize');
      expect(result.exitCode).toBe(0);
    });

    it('should recognize version command', async () => {
      const result = await runCLI(['version']);
      
      expect(result.stdout).toMatch(/\d+\.\d+\.\d+/);
      expect(result.exitCode).toBe(0);
    });

    it('should recognize help command', async () => {
      const result = await runCLI(['help', 'component', 'new']);
      
      // Should show help for specific template
      expect(result.stdout).toContain('Help for component/new');
      expect(result.exitCode).toBe(0);
    });
  });

  describe('Hygen-style Positional Arguments', () => {
    it('should transform component new MyButton to generate command', async () => {
      const result = await runCLI(['component', 'new', 'MyButton', '--dry']);
      
      expect(result.stdout).toContain('Dry run');
      expect(result.stdout).toContain('MyButton');
      expect(result.exitCode).toBe(0);
    });

    it('should handle generator template syntax', async () => {
      const result = await runCLI(['component', 'new', '--dry']);
      
      expect(result.stdout).toContain('Dry run');
      expect(result.exitCode).toBe(0);
    });

    it('should not transform explicit commands', async () => {
      const result = await runCLI(['generate', 'component', 'new', '--dry']);
      
      expect(result.stdout).toContain('Dry run');
      expect(result.exitCode).toBe(0);
    });

    it('should not transform flag arguments', async () => {
      const result = await runCLI(['--help']);
      
      expect(result.stdout).toContain('Unjucks CLI');
      expect(result.exitCode).toBe(0);
    });

    it('should show help for single non-command argument', async () => {
      const result = await runCLI(['unknown']);
      
      expect(result.stdout).toContain('Unjucks CLI');
      expect(result.exitCode).toBe(0);
    });
  });

  describe('Argument Environment Variables', () => {
    it('should set UNJUCKS_POSITIONAL_ARGS for Hygen-style syntax', async () => {
      // This tests the internal mechanism by checking the generated files
      const result = await runCLI(['component', 'new', 'TestComponent', '--dry']);
      
      expect(result.stdout).toContain('TestComponent');
      expect(result.exitCode).toBe(0);
    });

    it('should clean up environment variables after processing', async () => {
      await runCLI(['component', 'new', 'TestComponent', '--dry']);
      
      // Environment should be clean for subsequent calls
      const result = await runCLI(['list']);
      expect(result.exitCode).toBe(0);
    });
  });

  describe('Error Handling', () => {
    it('should handle invalid generator gracefully', async () => {
      const result = await runCLI(['invalid-generator', 'new', '--dry']);
      
      expect(result.exitCode).toBe(1);
      expect(result.stderr).toContain('Error');
    });

    it('should handle missing template gracefully', async () => {
      const result = await runCLI(['component', 'invalid-template', '--dry']);
      
      expect(result.exitCode).toBe(1);
      expect(result.stderr).toContain('Error');
    });

    it('should handle file system errors gracefully', async () => {
      // Try to write to read-only directory
      await fs.chmod(tempDir, 0o444);
      
      const result = await runCLI(['component', 'new', 'Test', '--dest', './readonly']);
      
      // Restore permissions for cleanup
      await fs.chmod(tempDir, 0o755);
      
      expect(result.exitCode).toBe(1);
    });
  });

  describe('Flag Processing', () => { it('should process --dest flag correctly', async () => {
      await fs.mkdir('custom-dest', { recursive });
      
      const result = await runCLI(['component', 'new', 'TestComponent', '--dest', 'custom-dest', '--dry']);
      
      expect(result.stdout).toContain('custom-dest');
      expect(result.exitCode).toBe(0);
    });

    it('should process --force flag correctly', async () => {
      const result = await runCLI(['component', 'new', 'TestComponent', '--force', '--dry']);
      
      expect(result.exitCode).toBe(0);
    });

    it('should process --dry flag correctly', async () => {
      const result = await runCLI(['component', 'new', 'TestComponent', '--dry']);
      
      expect(result.stdout).toContain('Dry run');
      expect(result.stdout).toContain('no files were created');
      expect(result.exitCode).toBe(0);
    });
  });
});
