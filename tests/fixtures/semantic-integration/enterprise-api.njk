---
to: src/api/{{ serviceName }}.ts
inject: false
rdf: |
  @prefix template: <http://unjucks.dev/template/> .
  @prefix api: <http://unjucks.dev/api/> .
  
  <http://unjucks.dev/template/current>
    api:generatesEndpoint true ;
    api:isPublic {{ isPublic }} ;
    template:processesFinancialData {{ processesFinancialData || false }} ;
    template:hasUserAuth {{ hasUserAuth || false }} .
---
/**
 * {{ serviceName }} API Service
 * Generated by Unjucks with semantic validation
 */
import { Request, Response } from 'express';
import { authenticate, authorize } from '../middleware/auth';
import { validateInput, sanitizeOutput } from '../middleware/security';
import { auditLogger } from '../utils/audit';

export class {{ serviceName }}Service {
  {% if processesFinancialData %}
  /**
   * SOX Compliance: Financial data processing with audit trail
   */
  async processFinancialData(data: FinancialData): Promise<ProcessResult> {
    auditLogger.logFinancialAccess(data.id, 'READ');
    // Financial processing logic
    return this.financialProcessor.process(data);
  }
  {% endif %}
  
  {% if isPublic %}
  /**
   * Public API endpoint - requires authentication and rate limiting
   */
  @authenticate
  @authorize(['user'])
  @validateInput
  @sanitizeOutput
  async getPublicData(req: Request, res: Response): Promise<void> {
    // Public API logic with security controls
    const data = await this.dataService.getPublicData(req.params.id);
    res.json(data);
  }
  {% endif %}
}