---
to: generated/ontologies/<%= appName | kebabCase %>-app.owl
inject: false
sh: "echo 'Generated application ontology for: <%= appName %>'"
---
@prefix {{ nsPrefix | kebabCase }}: <{{ namespace | rdfResource }}/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/RDF/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@base <{{ namespace | rdfResource }}/> .

# Application-Specific Ontology: {{ appName | titleCase }}
<{{ namespace | rdfResource }}/> rdf:type owl:Ontology ;
    owl:versionIRI <{{ namespace | rdfResource }}/{{ version | default('1.0.0') }}/> ;
    owl:versionInfo "{{ version | default('1.0.0') | rdfLiteral('en') }}" ;
    rdfs:label "{{ appName | titleCase }} Application Ontology" ;
    rdfs:comment "{{ description | default('Application-specific ontological extensions for ' + appName) | rdfLiteral('en') }}" ;
    dcterms:created "{{ createdDate | isoDate | rdfLiteral('xsd:dateTime') }}" ;
    dcterms:modified "{{ modifiedDate | isoDate | rdfLiteral('xsd:dateTime') }}" ;
    dcterms:creator {{ creator | rdfLiteral('en') if creator else 'foaf:Person' }} ;
    prov:wasGeneratedBy [
        rdf:type prov:Activity ;
        prov:used {{ generationTool | rdfLiteral('en') if generationTool else '"Unjucks Ontology Generator"' }} ;
        prov:endedAtTime "{{ generationTime | isoDate | rdfLiteral('xsd:dateTime') }}"
    ] ;
    owl:imports <http://www.w3.org/2002/07/owl#> ,
                <http://xmlns.com/foaf/0.1/> ,
                <http://purl.org/dc/terms/> ,
                <http://www.w3.org/ns/prov#> ,
                <http://www.w3.org/2004/02/skos/core#> {% if baseOntology %},
                <{{ baseOntology | rdfResource }}>{% endif %} .

# Application Entity Hierarchy
{% for module in modules %}
## Module: {{ module.name | titleCase }}
{% for entity in module.entities %}
{{ nsPrefix | kebabCase }}:{{ entity.name | pascalCase }} rdf:type owl:Class ;
    rdfs:label "{{ entity.name | humanize | rdfLiteral('en') }}" ;
    skos:prefLabel "{{ entity.name | humanize | rdfLiteral('en') }}" ;
    {% if entity.altLabels -%}
    {% for altLabel in entity.altLabels -%}
    skos:altLabel "{{ altLabel | rdfLiteral('en') }}" ;
    {% endfor -%}
    {%- endif %}
    {% if entity.description -%}
    rdfs:comment "{{ entity.description | rdfLiteral('en') }}" ;
    skos:definition "{{ entity.description | rdfLiteral('en') }}" ;
    {%- endif %}
    {% if entity.superClass -%}
    rdfs:subClassOf {{ entity.superClass | pascalCase | rdfClass(nsPrefix) }} ;
    {%- elif baseOntology -%}
    rdfs:subClassOf <{{ baseOntology | rdfResource }}#Entity> ;
    {%- endif %}
    {% if entity.interfaces -%}
    {% for interface in entity.interfaces -%}
    rdfs:subClassOf {{ interface | pascalCase | rdfClass(nsPrefix) }} ;
    {% endfor -%}
    {%- endif %}
    {% if entity.businessRules -%}
    {% for rule in entity.businessRules -%}
    rdfs:subClassOf [
        rdf:type owl:Restriction ;
        owl:onProperty {{ rule.property | camelCase | rdfProperty(nsPrefix) }} ;
        {% if rule.type == 'required' -%}
        owl:someValuesFrom {{ rule.valueClass | pascalCase | rdfClass(nsPrefix) if rule.valueClass else 'owl:Thing' }} ;
        {%- elif rule.type == 'unique' -%}
        owl:maxCardinality "1"^^xsd:nonNegativeInteger ;
        {%- elif rule.type == 'range' -%}
        owl:allValuesFrom {{ rule.valueClass | pascalCase | rdfClass(nsPrefix) }} ;
        {%- endif %}
        rdfs:comment "{{ rule.description | rdfLiteral('en') }}"
    ] ;
    {% endfor -%}
    {%- endif %}
    {% if entity.lifecycle -%}
    {{ nsPrefix | kebabCase }}:hasLifecycleStage {{ nsPrefix | kebabCase }}:{{ entity.lifecycle | pascalCase }}Stage ;
    {%- endif %}
    dcterms:isPartOf {{ nsPrefix | kebabCase }}:{{ module.name | pascalCase }}Module ;
    rdfs:isDefinedBy <{{ namespace | rdfResource }}/> .

{% endfor %}
{% endfor %}

# Application-specific Properties
{% for propGroup in propertyGroups %}
## Property Group: {{ propGroup.name | titleCase }}
{% for prop in propGroup.properties %}
{{ nsPrefix | kebabCase }}:{{ prop.name | camelCase }} rdf:type 
    {%- if prop.type == 'datatype' %}owl:DatatypeProperty
    {%- elif prop.type == 'object' %}owl:ObjectProperty
    {%- elif prop.type == 'annotation' %}owl:AnnotationProperty
    {%- else %}rdf:Property{% endif %} ;
    rdfs:label "{{ prop.name | humanize | rdfLiteral('en') }}" ;
    skos:prefLabel "{{ prop.name | humanize | rdfLiteral('en') }}" ;
    {% if prop.description -%}
    rdfs:comment "{{ prop.description | rdfLiteral('en') }}" ;
    skos:definition "{{ prop.description | rdfLiteral('en') }}" ;
    {%- endif %}
    {% if prop.domain -%}
    rdfs:domain {{ prop.domain | pascalCase | rdfClass(nsPrefix) }} ;
    {%- endif %}
    {% if prop.range -%}
    rdfs:range {% if prop.type == 'datatype' %}{{ prop.range | rdfDatatype }}{% else %}{{ prop.range | pascalCase | rdfClass(nsPrefix) }}{% endif %} ;
    {%- endif %}
    {% if prop.characteristics -%}
    {% for char in prop.characteristics -%}
    rdf:type owl:{{ char | pascalCase }}Property ;
    {% endfor -%}
    {%- endif %}
    {% if prop.validation -%}
    {% if prop.validation.pattern -%}
    owl:withRestrictions ( [ xsd:pattern "{{ prop.validation.pattern }}" ] ) ;
    {%- endif %}
    {% if prop.validation.minLength -%}
    owl:withRestrictions ( [ xsd:minLength {{ prop.validation.minLength }} ] ) ;
    {%- endif %}
    {% if prop.validation.maxLength -%}
    owl:withRestrictions ( [ xsd:maxLength {{ prop.validation.maxLength }} ] ) ;
    {%- endif %}
    {%- endif %}
    {% if prop.businessContext -%}
    dcterms:subject "{{ prop.businessContext | rdfLiteral('en') }}" ;
    {%- endif %}
    dcterms:isPartOf {{ nsPrefix | kebabCase }}:{{ propGroup.name | pascalCase }}PropertyGroup ;
    rdfs:isDefinedBy <{{ namespace | rdfResource }}/> .

{% endfor %}
{% endfor %}

# Business Process Classes
{% for process in businessProcesses %}
{{ nsPrefix | kebabCase }}:{{ process.name | pascalCase }}Process rdf:type owl:Class ;
    rdfs:label "{{ process.name | humanize }} Process" ;
    rdfs:comment "{{ process.description | rdfLiteral('en') }}" ;
    {% if baseOntology -%}
    rdfs:subClassOf <{{ baseOntology | rdfResource }}#Process> ;
    {%- else -%}
    rdfs:subClassOf owl:Thing ;
    {%- endif %}
    {% for step in process.steps -%}
    rdfs:subClassOf [
        rdf:type owl:Restriction ;
        owl:onProperty {{ nsPrefix | kebabCase }}:hasProcessStep ;
        owl:someValuesFrom {{ nsPrefix | kebabCase }}:{{ step.name | pascalCase }}Step
    ] ;
    {% endfor -%}
    {% if process.triggers -%}
    {% for trigger in process.triggers -%}
    {{ nsPrefix | kebabCase }}:triggeredBy {{ nsPrefix | kebabCase }}:{{ trigger | pascalCase }}Event ;
    {% endfor -%}
    {%- endif %}
    rdfs:isDefinedBy <{{ namespace | rdfResource }}/> .

{% for step in process.steps %}
{{ nsPrefix | kebabCase }}:{{ step.name | pascalCase }}Step rdf:type owl:Class ;
    rdfs:label "{{ step.name | humanize }} Step" ;
    rdfs:comment "{{ step.description | rdfLiteral('en') }}" ;
    {% if baseOntology -%}
    rdfs:subClassOf <{{ baseOntology | rdfResource }}#Event> ;
    {%- else -%}
    rdfs:subClassOf owl:Thing ;
    {%- endif %}
    {% if step.preconditions -%}
    {% for precond in step.preconditions -%}
    {{ nsPrefix | kebabCase }}:hasPrecondition {{ nsPrefix | kebabCase }}:{{ precond | pascalCase }}Condition ;
    {% endfor -%}
    {%- endif %}
    {% if step.postconditions -%}
    {% for postcond in step.postconditions -%}
    {{ nsPrefix | kebabCase }}:hasPostcondition {{ nsPrefix | kebabCase }}:{{ postcond | pascalCase }}Condition ;
    {% endfor -%}
    {%- endif %}
    rdfs:isDefinedBy <{{ namespace | rdfResource }}/> .
{% endfor %}

{% endfor %}

# Integration Points
{% for integration in integrations %}
{{ nsPrefix | kebabCase }}:{{ integration.name | pascalCase }}Integration rdf:type owl:Class ;
    rdfs:label "{{ integration.name | humanize }} Integration" ;
    rdfs:comment "{{ integration.description | rdfLiteral('en') }}" ;
    rdfs:subClassOf owl:Thing ;
    {{ nsPrefix | kebabCase }}:integratesWith <{{ integration.externalOntology | rdfResource }}> ;
    {% for mapping in integration.mappings -%}
    owl:equivalentClass <{{ integration.externalOntology | rdfResource }}#{{ mapping.externalClass }}> ;
    {% endfor -%}
    rdfs:isDefinedBy <{{ namespace | rdfResource }}/> .

{% endfor %}

# Application-specific Individuals
{% for individual in individuals %}
{{ nsPrefix | kebabCase }}:{{ individual.name | pascalCase }} rdf:type owl:NamedIndividual ,
    {{ individual.type | pascalCase | rdfClass(nsPrefix) }} ;
    rdfs:label "{{ individual.name | humanize | rdfLiteral('en') }}" ;
    {% if individual.description -%}
    rdfs:comment "{{ individual.description | rdfLiteral('en') }}" ;
    {%- endif %}
    {% for prop, value in individual.properties -%}
    {{ prop | camelCase | rdfProperty(nsPrefix) }} {% if value is string %}"{{ value | rdfLiteral('en') }}"{% else %}{{ value | rdfResource }}{% endif %} ;
    {% endfor -%}
    rdfs:isDefinedBy <{{ namespace | rdfResource }}/> .

{% endfor %}