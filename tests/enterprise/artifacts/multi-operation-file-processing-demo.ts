/**
 * Multi-Operation File Processing Demonstration
 * Generated by Unjucks Enterprise Template System
 * 
 * Demonstrates:
 * - inject: Inject code into existing files at specific markers
 * - append: Add content to end of files
 * - prepend: Add content to beginning of files  
 * - lineAt: Insert content at specific line numbers
 * - skipIf: Conditional processing with skip conditions
 * - atomic operations with dry-run and force modes
 */

import { FileProcessor, InjectOperation, AppendOperation, PrependOperation, LineAtOperation } from '@unjucks/file-operations';

/**
 * Enterprise File Processing Service
 * Handles complex multi-operation file modifications with atomic guarantees
 */
export class EnterpriseFileProcessor {
  private readonly processor: FileProcessor;
  
  constructor() {
    this.processor = new FileProcessor({
      atomic: true,
      backup: true,
      validation: true
    });
  }

  /**
   * Demonstrate inject operations with compliance markers
   */
  async demonstrateInjectOperations(): Promise<void> {
    // Example 1: Inject compliance imports into existing service
    await this.processor.inject({
      file: 'src/services/user.service.ts',
      after: '// COMPLIANCE_IMPORTS_HERE',
      content: `
import { AuditLogger } from '@enterprise/compliance';
import { DataClassification } from '@enterprise/decorators';
import { AccessControl } from '@enterprise/security';`,
      skipIf: 'AuditLogger already imported'
    });

    // Example 2: Inject method into existing class
    await this.processor.inject({
      file: 'src/controllers/payment.controller.ts', 
      after: '// INJECT_COMPLIANCE_METHODS_HERE',
      content: `
  /**
   * SOX compliance validation method
   * Auto-generated by enterprise template system
   */
  @AuditTrail({ operation: 'COMPLIANCE_CHECK', framework: 'SOX' })
  private async validateSOXCompliance(transaction: Transaction): Promise<boolean> {
    return await this.complianceService.validateSOX(transaction);
  }`,
      skipIf: 'validateSOXCompliance method exists'
    });

    // Example 3: Inject route registration
    await this.processor.inject({
      file: 'src/app.module.ts',
      after: '// INJECT_ROUTES_HERE', 
      content: `
    ComplianceModule,
    AuditModule,
    SecurityModule,`,
      skipIf: 'ComplianceModule already registered'
    });
  }

  /**
   * Demonstrate append operations for configuration and documentation
   */
  async demonstrateAppendOperations(): Promise<void> {
    // Example 1: Append compliance configuration
    await this.processor.append({
      file: 'config/compliance.yml',
      content: `
# Enterprise compliance configuration
# Auto-generated by Unjucks template system

sox_compliance:
  enabled: true
  audit_level: comprehensive
  retention_period: 7_years
  real_time_monitoring: true

gdpr_compliance:
  enabled: true
  data_subject_rights: true
  consent_management: true
  right_to_be_forgotten: true
  
hipaa_compliance:
  enabled: true
  phi_encryption: true
  minimum_necessary: true
  breach_notification: true`,
      skipIf: 'sox_compliance section exists'
    });

    // Example 2: Append test cases
    await this.processor.append({
      file: 'tests/compliance.test.ts',
      content: `
// Auto-generated compliance test cases
describe('Enterprise Compliance Tests', () => {
  it('should enforce SOX controls for financial transactions', async () => {
    const transaction = createMockFinancialTransaction();
    const result = await complianceService.validateSOX(transaction);
    expect(result.compliant).toBe(true);
    expect(result.auditTrail).toBeDefined();
  });

  it('should enforce GDPR data subject rights', async () => {
    const request = createDataSubjectRequest();
    const result = await gdprService.processRequest(request);
    expect(result.processed).toBe(true);
    expect(result.responseTime).toBeLessThan(30); // days
  });
});`
    });

    // Example 3: Append API documentation
    await this.processor.append({
      file: 'docs/api/compliance-endpoints.md',
      content: `
## Compliance Endpoints

### POST /api/v1/compliance/validate
Validate transaction compliance against configured frameworks.

**Request:**
\`\`\`json
{
  "transaction": {},
  "framework": "SOX|GDPR|HIPAA"
}
\`\`\`

**Response:**
\`\`\`json
{
  "compliant": true,
  "violations": [],
  "auditId": "audit_123456789"
}
\`\`\`
`
    });
  }

  /**
   * Demonstrate prepend operations for headers and imports
   */
  async demonstratePrependOperations(): Promise<void> {
    // Example 1: Prepend compliance headers
    await this.processor.prepend({
      file: 'src/services/financial.service.ts',
      content: `/**
 * ENTERPRISE COMPLIANCE NOTICE
 * 
 * This file contains SOX-regulated financial transaction processing.
 * All modifications must be approved by Compliance Officer.
 * 
 * Compliance Frameworks: SOX, GDPR, PCI-DSS
 * Data Classification: CONFIDENTIAL
 * Retention Period: 7 years
 * 
 * Auto-generated compliance header by Unjucks Enterprise Template System
 * Generated: ${new Date().toISOString()}
 */

`,
      skipIf: 'ENTERPRISE COMPLIANCE NOTICE exists'
    });

    // Example 2: Prepend security imports
    await this.processor.prepend({
      file: 'src/middleware/auth.middleware.ts',
      content: `// Enterprise Security Imports - Auto-generated
import { SecurityConfig } from '@enterprise/security';
import { ComplianceValidator } from '@enterprise/compliance';
import { AuditLogger } from '@enterprise/audit';

`,
      skipIf: 'Enterprise Security Imports exists'
    });
  }

  /**
   * Demonstrate lineAt operations for precise insertions
   */
  async demonstrateLineAtOperations(): Promise<void> {
    // Example 1: Insert compliance decorator at specific line
    await this.processor.lineAt({
      file: 'src/controllers/payment.controller.ts',
      lineNumber: 15, // After class declaration
      content: `@ComplianceDecorator({ framework: 'SOX', level: 'COMPREHENSIVE' })`,
      skipIf: '@ComplianceDecorator exists'
    });

    // Example 2: Insert audit logging at specific line in method
    await this.processor.lineAt({
      file: 'src/services/user.service.ts',
      lineNumber: 45, // Inside create method
      content: `    // Auto-generated audit logging
    await this.auditLogger.log({ operation: 'USER_CREATE', userId: result.id });`,
      skipIf: 'auditLogger.log exists'
    });

    // Example 3: Insert error handling at specific line
    await this.processor.lineAt({
      file: 'src/services/payment.service.ts',
      lineNumber: 78, // In catch block
      content: `    // Auto-generated compliance error handling
    await this.complianceErrorHandler.handle(error, { context: 'payment_processing' });`,
      skipIf: 'complianceErrorHandler.handle exists'
    });
  }

  /**
   * Demonstrate complex conditional processing with skipIf
   */
  async demonstrateConditionalProcessing(): Promise<void> {
    // Example 1: Skip if environment is production
    await this.processor.inject({
      file: 'src/config/database.ts',
      after: '// DEVELOPMENT_CONFIG_HERE',
      content: `
  // Development-only configuration
  logging: true,
  synchronize: true,
  dropSchema: false, // Safety first!`,
      skipIf: 'NODE_ENV === production'
    });

    // Example 2: Skip if feature flag is disabled
    await this.processor.append({
      file: 'src/features/experimental.ts',
      content: `
// Experimental features - only add if enabled
export const experimentalFeatures = {
  advancedAnalytics: true,
  realTimeReporting: true,
  predictiveCompliance: true
};`,
      skipIf: 'EXPERIMENTAL_FEATURES !== true'
    });

    // Example 3: Skip if dependency already exists
    await this.processor.inject({
      file: 'package.json',
      after: '"dependencies": {',
      content: `    "@enterprise/compliance": "^1.0.0",`,
      skipIf: '@enterprise/compliance exists in package.json'
    });
  }

  /**
   * Demonstrate atomic operations with dry-run mode
   */
  async demonstrateAtomicOperations(): Promise<void> {
    // Example 1: Dry run to preview changes
    const dryRunResult = await this.processor.executeWithOptions({
      operations: [
        {
          type: 'inject',
          file: 'src/app.ts',
          after: '// MIDDLEWARE_HERE',
          content: 'app.use(complianceMiddleware);'
        },
        {
          type: 'append', 
          file: 'src/types/compliance.ts',
          content: 'export interface ComplianceReport { /* ... */ }'
        }
      ],
      options: {
        dryRun: true,
        verbose: true
      }
    });

    console.log('Dry run results:', dryRunResult);

    // Example 2: Atomic execution with rollback capability
    try {
      await this.processor.executeWithOptions({
        operations: [
          { type: 'inject', file: 'src/controllers/user.controller.ts', after: '// COMPLIANCE_HERE', content: '/* compliance code */' },
          { type: 'append', file: 'tests/user.test.ts', content: '/* compliance tests */' },
          { type: 'prepend', file: 'docs/user-api.md', content: '<!-- compliance docs -->' }
        ],
        options: {
          atomic: true,
          backup: true,
          rollbackOnError: true
        }
      });
    } catch (error) {
      console.log('Operation failed, changes rolled back automatically');
    }
  }

  /**
   * Demonstrate force mode for overriding skip conditions
   */
  async demonstrateForceMode(): Promise<void> {
    // Force injection even if skipIf condition is met
    await this.processor.inject({
      file: 'src/services/critical.service.ts',
      after: '// CRITICAL_SECURITY_HERE',
      content: `
  // FORCED UPDATE: Critical security patch applied
  private validateSecurityToken(token: string): boolean {
    return this.securityService.validateWithLatestRules(token);
  }`,
      skipIf: 'validateSecurityToken method exists',
      force: true // Override skipIf condition
    });
  }

  /**
   * Real-world enterprise scenario: Compliance framework upgrade
   */
  async upgradeComplianceFramework(): Promise<void> {
    console.log('Starting enterprise compliance framework upgrade...');

    // Step 1: Inject new compliance imports across all services
    const serviceFiles = await this.processor.findFiles('src/services/*.service.ts');
    
    for (const file of serviceFiles) {
      await this.processor.inject({
        file,
        after: '// IMPORT_COMPLIANCE_HERE',
        content: `import { EnterpriseCompliance } from '@enterprise/compliance-v2';`,
        skipIf: '@enterprise/compliance-v2 already imported'
      });
    }

    // Step 2: Prepend compliance headers to all controllers
    const controllerFiles = await this.processor.findFiles('src/controllers/*.controller.ts');
    
    for (const file of controllerFiles) {
      await this.processor.prepend({
        file,
        content: `/**
 * COMPLIANCE FRAMEWORK v2.0 UPGRADE
 * Enhanced SOX, GDPR, and HIPAA compliance
 * Upgraded: ${new Date().toISOString()}
 */

`,
        skipIf: 'COMPLIANCE FRAMEWORK v2.0 exists'
      });
    }

    // Step 3: Append new test suites
    await this.processor.append({
      file: 'tests/compliance-v2.test.ts',
      content: `
// Compliance Framework v2.0 Test Suite
describe('Compliance Framework v2.0', () => {
  // Comprehensive test cases for enhanced compliance features
});`
    });

    console.log('Compliance framework upgrade completed successfully!');
  }
}

// Example usage
export async function demonstrateEnterpriseFileProcessing(): Promise<void> {
  const processor = new EnterpriseFileProcessor();
  
  await processor.demonstrateInjectOperations();
  await processor.demonstrateAppendOperations();
  await processor.demonstratePrependOperations();
  await processor.demonstrateLineAtOperations();
  await processor.demonstrateConditionalProcessing();
  await processor.demonstrateAtomicOperations();
  await processor.demonstrateForceMode();
  
  // Real-world scenario
  await processor.upgradeComplianceFramework();
}