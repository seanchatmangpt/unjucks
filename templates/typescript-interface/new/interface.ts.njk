---
to: <%= to || 'src/types/' + (className || 'Generated') + '.ts' %>
unless_exists: true
---
/**
 * <%= className || 'Generated' %> TypeScript Interfaces
 * Auto-generated from RDF ontology: <%= ontologyUri || 'Unknown' %>
 * 
 * Generated by Unjucks semantic template system
 * @see https://github.com/unjucks/unjucks
 */

{% if rdf %}
{%- set ontologyData = rdf -%}
{% else %}
{%- set ontologyData = loadRdfData(ontologySource) -%}
{% endif %}

{% if namespace %}
export namespace {{ namespace }} {
{% endif %}

{%- for classUri, classData in ontologyData.subjects %}
{%- if classData.type and classData.type.includes('Class') %}

  /**
  {%- if classData.label %}
   * {{ classData.label[0] }}
  {%- endif %}
  {%- if classData.comment %}
   * 
   * {{ classData.comment[0] | wordwrap(75, false, '   * ') | safe }}
  {%- endif %}
   * @source {{ classUri }}
   */
  export interface {{ classUri | classNameFromUri }} {
  {%- for propUri, propTriples in ontologyData.triples | groupby('predicate.value') %}
  {%- if propTriples[0].subject.value == classUri and propTriples[0].predicate.value != 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' %}
    
    {%- set propName = propUri | propertyNameFromUri %}
    {%- set propRange = propTriples | selectattr('predicate.value', 'equalto', 'http://www.w3.org/2000/01/rdf-schema#range') | first %}
    {%- set propLabel = propTriples | selectattr('predicate.value', 'equalto', 'http://www.w3.org/2000/01/rdf-schema#label') | first %}
    {%- set propComment = propTriples | selectattr('predicate.value', 'equalto', 'http://www.w3.org/2000/01/rdf-schema#comment') | first %}
    {%- set tsType = (propRange.object.value if propRange else 'string') | getTypeForProperty %}
    
    {%- if propLabel or propComment %}
    /**
    {%- if propLabel %}
     * {{ propLabel.object.value }}
    {%- endif %}
    {%- if propComment %}
     * {{ propComment.object.value | wordwrap(75, false, '     * ') | safe }}
    {%- endif %}
     */
    {%- endif %}
    {{ propName }}?: {{ tsType }};
  {%- endif %}
  {%- endfor %}
  }
{%- endif %}
{%- endfor %}

{% if namespace %}
}
{% endif %}

{%- if generateValidation %}

/**
 * Validation helpers for {{ className || 'Generated' }} interfaces
 */
export const {{ className || 'Generated' }}Validators = {
{%- for classUri, classData in ontologyData.subjects %}
{%- if classData.type and classData.type.includes('Class') %}
  
  /**
   * Validate {{ classUri | classNameFromUri }} instance
   */
  validate{{ classUri | classNameFromUri }}(data: any): ValidationResult {
    const errors: string[] = [];
    
    {%- for propUri, propTriples in ontologyData.triples | groupby('predicate.value') %}
    {%- if propTriples[0].subject.value == classUri %}
    {%- set propName = propUri | propertyNameFromUri %}
    {%- set propRange = propTriples | selectattr('predicate.value', 'equalto', 'http://www.w3.org/2000/01/rdf-schema#range') | first %}
    {%- set required = propTriples | selectattr('predicate.value', 'contains', 'minCount') | first %}
    
    {%- if required %}
    if (!data.{{ propName }}) {
      errors.push('{{ propName }} is required');
    }
    {%- endif %}
    
    {%- if propRange %}
    {%- set rangeType = propRange.object.value | getTypeForProperty %}
    if (data.{{ propName }} !== undefined && typeof data.{{ propName }} !== '{{ rangeType }}') {
      errors.push('{{ propName }} must be of type {{ rangeType }}');
    }
    {%- endif %}
    {%- endif %}
    {%- endfor %}
    
    return {
      valid: errors.length === 0,
      errors
    };
  },
{%- endif %}
{%- endfor %}
};

interface ValidationResult {
  valid: boolean;
  errors: string[];
}
{%- endif %}