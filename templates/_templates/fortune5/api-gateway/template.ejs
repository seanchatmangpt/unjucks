---
to: <%= dest %>/<%= gatewayName %>/docker-compose.yml
---
version: '3.8'

services:
  <% if (gatewayType === 'kong') { %>
  # Kong API Gateway
  kong:
    image: kong/kong-gateway:3.4-alpine
    container_name: <%= gatewayName %>-kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:<%= adminPort %>
      KONG_ADMIN_GUI_URL: http://localhost:<%= adminPort + 1 %>
      <% if (tlsTermination) { %>
      KONG_SSL_CERT: /etc/ssl/certs/gateway.crt
      KONG_SSL_CERT_KEY: /etc/ssl/private/gateway.key
      <% } %>
      <% if (rateLimitStrategy) { %>
      KONG_PLUGINS: rate-limiting,prometheus,jwt,oauth2,cors,request-transformer,response-transformer
      <% } %>
    ports:
      - "<%= gatewayPort %>:8000"
      - "<%= adminPort %>:8001"
      - "<%= adminPort + 1 %>:8002"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./config/kong:/etc/kong
      <% if (tlsTermination) { %>
      - ./certs:/etc/ssl
      <% } %>
    networks:
      - gateway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  <% } else if (gatewayType === 'nginx-plus') { %>
  # NGINX Plus API Gateway
  nginx-plus:
    image: nginx/nginx-plus:latest
    container_name: <%= gatewayName %>-nginx
    ports:
      - "<%= gatewayPort %>:80"
      <% if (tlsTermination) { %>
      - "443:443"
      <% } %>
      - "<%= adminPort %>:8080"
    volumes:
      - ./config/nginx:/etc/nginx
      - ./logs/nginx:/var/log/nginx
      <% if (tlsTermination) { %>
      - ./certs:/etc/ssl/certs
      <% } %>
    depends_on:
      - redis
    networks:
      - gateway-network
    restart: unless-stopped
    
  <% } else if (gatewayType === 'envoy') { %>
  # Envoy Proxy
  envoy:
    image: envoyproxy/envoy:v1.28-latest
    container_name: <%= gatewayName %>-envoy
    ports:
      - "<%= gatewayPort %>:8080"
      - "<%= adminPort %>:8001"
    volumes:
      - ./config/envoy/envoy.yaml:/etc/envoy/envoy.yaml
      <% if (tlsTermination) { %>
      - ./certs:/etc/ssl/certs
      <% } %>
    networks:
      - gateway-network
    restart: unless-stopped
  <% } %>

  # PostgreSQL Database (for Kong)
  <% if (gatewayType === 'kong') { %>
  postgres:
    image: postgres:15-alpine
    container_name: <%= gatewayName %>-postgres
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gateway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 10s
      retries: 3
  <% } %>

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    container_name: <%= gatewayName %>-redis
    command: redis-server --appendonly yes --requirepass redispass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - gateway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  <% if (wafEnabled) { %>
  # ModSecurity WAF
  modsecurity:
    image: owasp/modsecurity-crs:latest
    container_name: <%= gatewayName %>-waf
    environment:
      PARANOIA: 2
      ANOMALY_INBOUND: 5
      ANOMALY_OUTBOUND: 4
      BLOCKING_PARANOIA: 2
    volumes:
      - ./config/modsecurity:/etc/modsecurity.d
    networks:
      - gateway-network
    restart: unless-stopped
  <% } %>

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: <%= gatewayName %>-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - gateway-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: <%= gatewayName %>-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - gateway-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  <% if (gatewayType === 'kong') { %>
  postgres_data:
  <% } %>
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  gateway-network:
    driver: bridge