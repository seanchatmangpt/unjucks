---
to: <%= dest %>/<%= stackName %>/docker-compose.yml
---
version: '3.8'

services:
  <% if (metricsBackend === 'prometheus') { %>
  # Prometheus - Metrics Collection & Storage
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: <%= stackName %>-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=<%= retentionPeriod %>d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      <% if (highAvailability) { %>
      - '--storage.tsdb.min-block-duration=2h'
      - '--storage.tsdb.max-block-duration=2h'
      <% } %>
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    networks:
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - node-exporter
      - cadvisor

  # PROMETHEUS TARGETS INJECTION
  # Additional monitoring targets can be injected here

  # AlertManager - Alerting
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: <%= stackName %>-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    networks:
      - monitoring-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'

  # Node Exporter - Host Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: <%= stackName %>-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring-network
    restart: unless-stopped

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: <%= stackName %>-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    networks:
      - monitoring-network
    restart: unless-stopped
  <% } %>

  # Grafana - Visualization & Dashboards
  grafana:
    image: grafana/grafana:10.1.2
    container_name: <%= stackName %>-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
      <% if (highAvailability) { %>
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: grafana
      GF_DATABASE_PASSWORD: grafana
      <% } %>
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring-network
    restart: unless-stopped
    <% if (highAvailability) { %>
    depends_on:
      - postgres
    <% } %>

  # GRAFANA DASHBOARDS INJECTION
  # Additional dashboards can be injected here

  <% if (logsBackend === 'elk-stack') { %>
  # Elasticsearch - Log Storage & Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: <%= stackName %>-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      bootstrap.memory_lock: true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Logstash - Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.2
    container_name: <%= stackName %>-logstash
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
      - ./config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    networks:
      - monitoring-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"

  # Kibana - Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: <%= stackName %>-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      XPACK_SECURITY_ENABLED: false
    networks:
      - monitoring-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Filebeat - Log Shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.10.2
    container_name: <%= stackName %>-filebeat
    user: root
    volumes:
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log:/var/log:ro
    networks:
      - monitoring-network
    depends_on:
      - logstash
    restart: unless-stopped
  <% } %>

  <% if (tracingBackend === 'jaeger') { %>
  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: <%= stackName %>-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "6831:6831/udp"  # UDP collector
      - "6832:6832/udp"  # UDP collector
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
      SPAN_STORAGE_TYPE: memory
      <% if (highAvailability) { %>
      SPAN_STORAGE_TYPE: elasticsearch
      ES_SERVER_URLS: http://elasticsearch:9200
      <% } %>
    networks:
      - monitoring-network
    restart: unless-stopped
    <% if (highAvailability && logsBackend === 'elk-stack') { %>
    depends_on:
      - elasticsearch
    <% } %>
  <% } %>

  <% if (highAvailability) { %>
  # PostgreSQL - Database for HA Grafana
  postgres:
    image: postgres:15-alpine
    container_name: <%= stackName %>-postgres
    environment:
      POSTGRES_DB: grafana
      POSTGRES_USER: grafana
      POSTGRES_PASSWORD: grafana
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U grafana"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Cache for high-performance queries
  redis:
    image: redis:7-alpine
    container_name: <%= stackName %>-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
  <% } %>

  # Blackbox Exporter - Endpoint Monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: <%= stackName %>-blackbox-exporter
    ports:
      - "9115:9115"
    volumes:
      - ./config/blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml
    networks:
      - monitoring-network
    restart: unless-stopped

  # Pushgateway - Batch Job Metrics
  pushgateway:
    image: prom/pushgateway:v1.6.2
    container_name: <%= stackName %>-pushgateway
    ports:
      - "9091:9091"
    networks:
      - monitoring-network
    restart: unless-stopped

volumes:
  <% if (metricsBackend === 'prometheus') { %>
  prometheus_data:
  alertmanager_data:
  <% } %>
  grafana_data:
  <% if (logsBackend === 'elk-stack') { %>
  elasticsearch_data:
  <% } %>
  <% if (highAvailability) { %>
  postgres_data:
  redis_data:
  <% } %>

networks:
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16