---
to: <%= dest %>/<%= serviceName %>/k8s/deployment.yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: <%= serviceName %>
  namespace: <%= process.env.KUBERNETES_NAMESPACE || 'default' %>
  labels:
    app: <%= serviceName %>
    version: "1.0.0"
    tier: microservice
    compliance: <%= complianceMode %>
  annotations:
    deployment.kubernetes.io/revision: "1"
    <% if (complianceMode === 'soc2' || complianceMode === 'hipaa') { %>
    security.kubernetes.io/policy: "restricted"
    <% } %>
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: <%= serviceName %>
  template:
    metadata:
      labels:
        app: <%= serviceName %>
        version: "1.0.0"
        tier: microservice
      annotations:
        <% if (observabilityStack === 'datadog') { %>
        ad.datadoghq.com/tags: '{"service":"<%= serviceName %>","env":"production"}'
        <% } else if (observabilityStack === 'prometheus') { %>
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        <% } %>
    spec:
      <% if (complianceMode === 'soc2' || complianceMode === 'hipaa') { %>
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      <% } %>
      containers:
      - name: <%= serviceName %>
        image: <%= serviceName %>:latest
        imagePullPolicy: Always
        ports:
        - containerPort: <%= servicePort %>
          name: http
          protocol: TCP
        <% if (observabilityStack === 'prometheus') { %>
        - containerPort: 9090
          name: metrics
          protocol: TCP
        <% } %>
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "<%= servicePort %>"
        - name: SERVICE_VERSION
          value: "1.0.0"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        <% if (databaseType === 'postgresql') { %>
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: <%= serviceName %>-secrets
              key: db-host
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: <%= serviceName %>-secrets
              key: db-password
        <% } %>
        <% if (authProvider === 'jwt') { %>
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: <%= serviceName %>-secrets
              key: jwt-secret
        <% } else if (authProvider === 'oauth2') { %>
        - name: OAUTH2_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: <%= serviceName %>-secrets
              key: oauth2-client-secret
        <% } %>
        <% if (observabilityStack === 'datadog') { %>
        - name: DD_API_KEY
          valueFrom:
            secretKeyRef:
              name: <%= serviceName %>-secrets
              key: datadog-api-key
        - name: DD_TRACE_ENABLED
          value: "true"
        - name: DD_ENV
          value: "production"
        <% } %>
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        <% if (complianceMode === 'soc2' || complianceMode === 'hipaa') { %>
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        <% } %>
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        <% if (complianceMode === 'soc2' || complianceMode === 'hipaa') { %>
        - name: audit-logs
          mountPath: /app/audit-logs
        <% } %>
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      <% if (complianceMode === 'soc2' || complianceMode === 'hipaa') { %>
      - name: audit-logs
        persistentVolumeClaim:
          claimName: <%= serviceName %>-audit-logs
      <% } %>
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      <% if (complianceMode === 'soc2' || complianceMode === 'hipaa') { %>
      serviceAccountName: <%= serviceName %>-sa
      <% } %>