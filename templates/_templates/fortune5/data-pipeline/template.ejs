---
to: <%= dest %>/<%= pipelineName %>/docker-compose.yml
---
version: '3.8'

services:
  <% if (orchestrator === 'airflow') { %>
  # Apache Airflow
  airflow-webserver:
    image: apache/airflow:2.7.1-python3.11
    container_name: <%= pipelineName %>-airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      <% if (complianceFramework === 'gdpr' || complianceFramework === 'ccpa') { %>
      AIRFLOW__LOGGING__ENCRYPT_S3_LOGS: 'true'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'false'
      <% } %>
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    command: webserver

  airflow-scheduler:
    image: apache/airflow:2.7.1-python3.11
    container_name: <%= pipelineName %>-airflow-scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    command: scheduler
  <% } %>

  <% if (streamingEngine === 'kafka') { %>
  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: <%= pipelineName %>-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - pipeline-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: <%= pipelineName %>-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      <% if (complianceFramework === 'gdpr' || complianceFramework === 'hipaa') { %>
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      <% } %>
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - pipeline-network

  # Kafka Connect for data ingestion
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.4.0
    container_name: <%= pipelineName %>-kafka-connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: localhost
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: '[%d] %p %X{connector.context}%m (%c:%L)%n'
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components'
    depends_on:
      - kafka
    networks:
      - pipeline-network
  <% } %>

  <% if (processingEngine === 'spark') { %>
  # Apache Spark
  spark-master:
    image: bitnami/spark:3.5
    container_name: <%= pipelineName %>-spark-master
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
      SPARK_USER: spark
    ports:
      - "8081:8080"
      - "7077:7077"
    volumes:
      - ./spark-apps:/opt/bitnami/spark/apps
      - ./spark-data:/opt/bitnami/spark/data
    networks:
      - pipeline-network

  spark-worker:
    image: bitnami/spark:3.5
    container_name: <%= pipelineName %>-spark-worker
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: 2
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
      SPARK_USER: spark
    depends_on:
      - spark-master
    volumes:
      - ./spark-apps:/opt/bitnami/spark/apps
      - ./spark-data:/opt/bitnami/spark/data
    networks:
      - pipeline-network
  <% } %>

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: <%= pipelineName %>-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pipeline-network
    restart: unless-stopped

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    container_name: <%= pipelineName %>-redis
    volumes:
      - redis_data:/data
    networks:
      - pipeline-network
    restart: unless-stopped

  <% if (catalogTool === 'datahub') { %>
  # DataHub for data governance
  datahub-gms:
    image: acryldata/datahub-gms:latest
    container_name: <%= pipelineName %>-datahub-gms
    ports:
      - "8080:8080"
    environment:
      EBEAN_DATASOURCE_USERNAME: datahub
      EBEAN_DATASOURCE_PASSWORD: datahub
      EBEAN_DATASOURCE_HOST: postgres:5432
      EBEAN_DATASOURCE_URL: jdbc:postgresql://postgres:5432/datahub
      KAFKA_BOOTSTRAP_SERVER: kafka:29092
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
    depends_on:
      - postgres
      - kafka
      - elasticsearch
    networks:
      - pipeline-network

  datahub-frontend:
    image: acryldata/datahub-frontend-react:latest
    container_name: <%= pipelineName %>-datahub-frontend
    ports:
      - "9002:9002"
    environment:
      DATAHUB_GMS_HOST: datahub-gms
      DATAHUB_GMS_PORT: 8080
    depends_on:
      - datahub-gms
    networks:
      - pipeline-network

  # Elasticsearch for DataHub
  elasticsearch:
    image: elasticsearch:7.17.0
    container_name: <%= pipelineName %>-elasticsearch
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - pipeline-network
  <% } %>

  # MinIO for S3-compatible storage
  <% if (dataLake === 'minio') { %>
  minio:
    image: minio/minio:latest
    container_name: <%= pipelineName %>-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - pipeline-network
  <% } %>

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: <%= pipelineName %>-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - pipeline-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: <%= pipelineName %>-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - pipeline-network

volumes:
  postgres_data:
  redis_data:
  <% if (streamingEngine === 'kafka') { %>
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  <% } %>
  <% if (catalogTool === 'datahub') { %>
  elasticsearch_data:
  <% } %>
  <% if (dataLake === 'minio') { %>
  minio_data:
  <% } %>
  prometheus_data:
  grafana_data:

networks:
  pipeline-network:
    driver: bridge