/**
 * {% if service %}{{ service.label }}{% else %}Generated API Service{% endif %}
 * {% if service %}{{ service.description }}{% else %}A REST API service generated from knowledge graph{% endif %}
 * Generated by KGEN at {{ metadata.generatedAt }}
 */

const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());

// Entity model
const EntityModel = {
  // Properties from graph
  {% if entity and entity.properties %}
  {% for property in entity.properties %}
  {{ property.name }}: {
    type: '{{ property.type }}',
    required: {{ property.isRequired }},
    {% if property.hasMinLength %}minLength: {{ property.hasMinLength }},{% endif %}
    {% if property.hasMaxLength %}maxLength: {{ property.hasMaxLength }},{% endif %}
    label: '{{ property.label }}'
  },
  {% endfor %}
  {% else %}
  id: { type: 'string', required: true, label: 'ID' },
  name: { type: 'string', required: true, label: 'Name' }
  {% endif %}
};

// In-memory storage (for demo)
let entities = [];
let nextId = 1;

// Routes
{% if endpoints %}
{% for endpoint in endpoints %}
app.{{ endpoint.method | lower }}('{{ endpoint.path }}', (req, res) => {
  {% if endpoint.method == 'GET' and endpoint.hasPathParameter %}
  const id = parseInt(req.params.id);
  const entity = entities.find(e => e.id === id);
  
  if (!entity) {
    return res.status(404).json({ error: 'Entity not found' });
  }
  
  res.status({{ endpoint.response.statusCode }}).json(entity);
  {% elif endpoint.method == 'POST' %}
  const newEntity = {
    id: nextId++,
    ...req.body
  };
  
  entities.push(newEntity);
  res.status({{ endpoint.response.statusCode }}).json(newEntity);
  {% elif endpoint.method == 'PUT' and endpoint.hasPathParameter %}
  const id = parseInt(req.params.id);
  const entityIndex = entities.findIndex(e => e.id === id);
  
  if (entityIndex === -1) {
    return res.status(404).json({ error: 'Entity not found' });
  }
  
  entities[entityIndex] = { id, ...req.body };
  res.status({{ endpoint.response.statusCode }}).json(entities[entityIndex]);
  {% elif endpoint.method == 'DELETE' and endpoint.hasPathParameter %}
  const id = parseInt(req.params.id);
  const entityIndex = entities.findIndex(e => e.id === id);
  
  if (entityIndex === -1) {
    return res.status(404).json({ error: 'Entity not found' });
  }
  
  entities.splice(entityIndex, 1);
  res.status({{ endpoint.response.statusCode }}).send();
  {% endif %}
});

{% endfor %}
{% else %}
// Default CRUD endpoints
app.get('/entities', (req, res) => {
  res.json(entities);
});

app.get('/entities/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const entity = entities.find(e => e.id === id);
  
  if (!entity) {
    return res.status(404).json({ error: 'Entity not found' });
  }
  
  res.json(entity);
});

app.post('/entities', (req, res) => {
  const newEntity = {
    id: nextId++,
    ...req.body
  };
  
  entities.push(newEntity);
  res.status(201).json(newEntity);
});

app.put('/entities/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const entityIndex = entities.findIndex(e => e.id === id);
  
  if (entityIndex === -1) {
    return res.status(404).json({ error: 'Entity not found' });
  }
  
  entities[entityIndex] = { id, ...req.body };
  res.json(entities[entityIndex]);
});

app.delete('/entities/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const entityIndex = entities.findIndex(e => e.id === id);
  
  if (entityIndex === -1) {
    return res.status(404).json({ error: 'Entity not found' });
  }
  
  entities.splice(entityIndex, 1);
  res.status(204).send();
});
{% endif %}

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    service: '{% if service %}{{ service.label }}{% else %}Generated API{% endif %}',
    version: '{% if service %}{{ service.version }}{% else %}1.0.0{% endif %}',
    timestamp: new Date().toISOString()
  });
});

// Statistics endpoint
app.get('/stats', (req, res) => {
  res.json({
    totalEntities: entities.length,
    model: EntityModel,
    {% if graph %}
    graph: {
      entities: {{ graph.entities | length }},
      triples: {{ graph.triples | length }}
    },
    {% endif %}
    generatedAt: '{{ metadata.generatedAt }}'
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`{% if service %}{{ service.label }}{% else %}Generated API{% endif %} running on port ${PORT}`);
  console.log(`Health check: http://localhost:${PORT}/health`);
  console.log(`Statistics: http://localhost:${PORT}/stats`);
});

module.exports = app;