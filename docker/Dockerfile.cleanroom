# Multi-stage Docker build for Unjucks cleanroom testing
# This container provides an isolated environment for testing package functionality
# Security-hardened with minimal attack surface

# Stage 1: Security-hardened base environment
FROM node:20-alpine AS base

# Security: Install only essential dependencies
RUN apk add --no-cache \
    bash \
    curl \
    git \
    build-base \
    python3 \
    python3-dev \
    py3-pip \
    ca-certificates \
    openssl \
    tzdata \
    dumb-init \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Security: Set timezone and remove unnecessary packages
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Set working directory
WORKDIR /app

# Security: Create non-root user with minimal privileges
RUN addgroup -g 1001 -S unjucks && \
    adduser -S testuser -u 1001 -G unjucks \
    --disabled-password \
    --no-create-home \
    --shell /bin/false \
    && mkdir -p /home/testuser \
    && chown testuser:unjucks /home/testuser

# Stage 2: Verdaccio registry setup (isolated)
FROM base AS registry

# Security: Install specific Verdaccio version
RUN npm install -g verdaccio@5.29.0 --no-audit --no-fund \
    && npm cache clean --force

# Copy Verdaccio configuration with security settings
COPY docker/configs/verdaccio.yaml /app/verdaccio.yaml

# Security: Create necessary directories with proper permissions
RUN mkdir -p /app/verdaccio-storage /app/verdaccio-plugins /app/logs && \
    chown -R testuser:unjucks /app && \
    chmod 755 /app/verdaccio-storage /app/logs

# Security: Expose only necessary port
EXPOSE 4873

# Stage 3: Secure testing environment
FROM base AS testing

# Security: Copy package files with verification
COPY package*.json ./
COPY bin/ ./bin/
COPY src/ ./src/
COPY _templates/ ./_templates/
COPY scripts/ ./scripts/

# Security: Install dependencies with audit and verification
RUN npm ci --only=production --no-audit --no-fund \
    && npm audit fix --audit-level=high || true \
    && npm cache clean --force

# Security: Make CLI executable with minimal permissions
RUN chmod 755 bin/unjucks.cjs src/cli/index.js \
    && find bin/ -type f -exec chmod 755 {} \; \
    && find src/ -type f -exec chmod 644 {} \; \
    && find _templates/ -type f -exec chmod 644 {} \; \
    && find scripts/ -type f -exec chmod 755 {} \;

# Security: Create test directories with proper permissions
RUN mkdir -p \
    /app/test-workspace \
    /app/test-results \
    /app/cleanroom-output \
    /app/security-reports \
    /app/performance-reports \
    && chown -R testuser:unjucks /app \
    && chmod 755 /app/test-workspace /app/test-results

# Stage 4: Complete cleanroom environment with security hardening
FROM testing AS cleanroom

# Security: Install testing tools with specific versions
RUN npm install -g \
    npm-check-updates@16.14.12 \
    npm-audit-html@1.5.0 \
    npm-license-checker@25.0.1 \
    clinic@12.1.0 \
    0x@5.7.0 \
    snyk@1.1291.0 \
    --no-audit --no-fund \
    && npm cache clean --force

# Security: Copy and validate test scripts
COPY docker/scripts/cleanroom-test.sh /app/cleanroom-test.sh
COPY docker/scripts/validation-checklist.js /app/validation-checklist.js
COPY docker/scripts/security-scan.sh /app/security-scan.sh
COPY docker/scripts/performance-monitor.sh /app/performance-monitor.sh

# Security: Set executable permissions only where needed
RUN chmod 755 /app/cleanroom-test.sh /app/validation-checklist.js \
    /app/security-scan.sh /app/performance-monitor.sh

# Security: Environment variables with secure defaults
ENV NODE_ENV=test
ENV CLEANROOM_MODE=docker
ENV VERDACCIO_PORT=4873
ENV NPM_REGISTRY=http://localhost:4873/
ENV NODE_OPTIONS="--max-old-space-size=512 --no-deprecation"
ENV FORCE_COLOR=1
ENV CI=true

# Copy comprehensive cleanroom test script wrapper
COPY docker/scripts/cleanroom-test-wrapper.sh /app/run-cleanroom-tests.sh

RUN chmod 755 /app/run-cleanroom-tests.sh

# Security: Switch to non-root user
USER testuser

# Enhanced health check with timeout
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl -sf http://localhost:4873/ --max-time 5 || exit 1

# Security: Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Default command runs comprehensive tests
CMD ["/app/run-cleanroom-tests.sh"]

# Security and metadata labels
LABEL maintainer="Unjucks Team <team@unjucks.dev>"
LABEL description="Security-hardened cleanroom testing environment for Unjucks"
LABEL version="2.0.0"
LABEL org.opencontainers.image.title="Unjucks Cleanroom Security Edition"
LABEL org.opencontainers.image.description="Isolated, security-hardened testing environment for Unjucks package validation"
LABEL org.opencontainers.image.vendor="Unjucks"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.source="https://github.com/unjucks/unjucks"
LABEL security.scan.enabled="true"
LABEL security.user.nonroot="true"
LABEL security.verdaccio.isolated="true"
LABEL testing.comprehensive="true"
LABEL testing.performance="true"