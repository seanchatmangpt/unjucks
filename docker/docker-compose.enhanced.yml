# =============================================================================
# UNJUCKS BULLETPROOF CLEANROOM TESTING ENVIRONMENT
# Enhanced Docker Compose Configuration
# CIS Docker Benchmark & NIST SP 800-190 Compliant
# =============================================================================

version: '3.8'

# -----------------------------------------------------------------------------
# NETWORKS: Zero-trust isolated networks
# -----------------------------------------------------------------------------
networks:
  unjucks-testing:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: "unjucks-test-br"
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
      com.docker.network.driver.mtu: "1500"

  unjucks-monitoring:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1

  unjucks-security:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/16
          gateway: 172.22.0.1

# -----------------------------------------------------------------------------
# VOLUMES: Secure persistent and temporary storage
# -----------------------------------------------------------------------------
volumes:
  unjucks-test-data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=2g,uid=65534,gid=65534,mode=1777,noexec,nosuid,nodev

  unjucks-logs:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/docker/logs
      o: bind,uid=65534,gid=65534

  unjucks-coverage:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/coverage
      o: bind,uid=65534,gid=65534

  unjucks-reports:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/reports
      o: bind,uid=65534,gid=65534

  unjucks-cache:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=1g,uid=65534,gid=65534,mode=1777,noexec,nosuid,nodev

  unjucks-security-data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=512m,uid=65534,gid=65534,mode=1700,noexec,nosuid,nodev

# -----------------------------------------------------------------------------
# SECRETS: Secure secrets management
# -----------------------------------------------------------------------------
secrets:
  test-env:
    file: ./secrets/test.env
  ci-token:
    external: true
    external_name: unjucks_ci_token
  security-key:
    external: true
    external_name: unjucks_security_key

# -----------------------------------------------------------------------------
# CONFIGS: Configuration management
# -----------------------------------------------------------------------------
configs:
  prometheus-config:
    file: ./monitoring/prometheus.yml
  logstash-config:
    file: ./logging/logstash.conf
  seccomp-profile:
    file: ./security/seccomp.json
  apparmor-profile:
    file: ./security/apparmor.profile

# -----------------------------------------------------------------------------
# SERVICES: Multi-container cleanroom environment
# -----------------------------------------------------------------------------
services:

  # ---------------------------------------------------------------------------
  # PRIMARY CLEANROOM TESTING CONTAINER
  # ---------------------------------------------------------------------------
  unjucks-cleanroom:
    build:
      context: ..
      dockerfile: docker/Dockerfile.enhanced
      target: security-hardened
      args:
        NODE_VERSION: ${NODE_VERSION:-20.11.0}
        ALPINE_VERSION: ${ALPINE_VERSION:-3.19}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION:-latest}
    image: unjucks:cleanroom-${VERSION:-latest}
    container_name: unjucks-cleanroom-primary
    hostname: unjucks-cleanroom
    
    # Maximum Security Configuration
    security_opt:
      - no-new-privileges:true
      - seccomp:./security/seccomp.json
      - apparmor:./security/apparmor.profile
      - label:type:container_runtime_t
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    read_only: false  # Required for test execution
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=256m,uid=65534,gid=65534
      - /app/tmp:noexec,nosuid,nodev,size=512m,uid=65534,gid=65534
      - /var/tmp:noexec,nosuid,nodev,size=128m,uid=65534,gid=65534
    ulimits:
      nproc: 1024
      nofile:
        soft: 1024
        hard: 2048
      fsize: 1073741824  # 1GB
      memlock:
        soft: -1
        hard: -1
    
    # Resource Limits (Fortune 500 standards)
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
          pids: 2048
        reservations:
          cpus: '2.0'
          memory: 4G
    
    # Environment Configuration
    environment:
      - NODE_ENV=test
      - CI=true
      - CONTAINER_MODE=cleanroom
      - LOG_LEVEL=info
      - TEST_TIMEOUT=600000
      - COVERAGE_THRESHOLD=90
      - SECURITY_SCAN=enabled
      - PERFORMANCE_MONITORING=enabled
      - VULNERABILITY_SCAN=enabled
      - COMPLIANCE_CHECK=enabled
      - CHROME_BIN=/usr/bin/chromium-browser
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
      - FIREFOX_PATH=/usr/bin/firefox
      - FORCE_COLOR=1
      - NPM_CONFIG_AUDIT_LEVEL=high
      - NPM_CONFIG_FUND=false
      - NODE_OPTIONS=--max-old-space-size=6144 --unhandled-rejections=strict --trace-warnings
      - KEEP_RUNNING=${KEEP_RUNNING:-false}
    
    # Volume Mounts (Principle of Least Privilege)
    volumes:
      - type: volume
        source: unjucks-test-data
        target: /app/cleanroom
      - type: volume
        source: unjucks-logs
        target: /app/logs
      - type: volume
        source: unjucks-reports
        target: /app/reports
      - type: volume
        source: unjucks-coverage
        target: /app/coverage
      - type: volume
        source: unjucks-cache
        target: /home/unjucks/.cache
      # Read-only source mount for development
      - type: bind
        source: ../src
        target: /app/src
        read_only: true
      - type: bind
        source: ../bin
        target: /app/bin
        read_only: true
      - type: bind
        source: ../_templates
        target: /app/_templates
        read_only: true
      - type: bind
        source: ../tests
        target: /app/tests
        read_only: true
    
    # Network Configuration
    networks:
      - unjucks-testing
      - unjucks-monitoring
    
    # Secrets and Configurations
    secrets:
      - test-env
      - security-key
    configs:
      - source: seccomp-profile
        target: /etc/seccomp.json
        mode: 0444
    
    # Enhanced Health Check
    healthcheck:
      test: [
        "CMD-SHELL", 
        "node -e 'process.exit(0)' && test -f /app/bin/unjucks.cjs"
      ]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 45s
    
    # Restart Policy
    restart: unless-stopped
    
    # Labels for monitoring and management
    labels:
      - "com.unjucks.service=cleanroom-testing"
      - "com.unjucks.environment=bulletproof"
      - "com.unjucks.version=${VERSION:-latest}"
      - "com.unjucks.security.level=maximum"
      - "com.unjucks.compliance.cis=true"
      - "com.unjucks.compliance.nist=true"
      - "traefik.enable=false"
    
    # Logging Configuration
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "5"
        labels: "com.unjucks.service,com.unjucks.environment"
    
    # Override for interactive mode
    # command: ["tail", "-f", "/dev/null"]

  # ---------------------------------------------------------------------------
  # SECURITY SCANNING CONTAINER
  # ---------------------------------------------------------------------------
  unjucks-security-scanner:
    build:
      context: ..
      dockerfile: docker/Dockerfile.enhanced
      target: security-scanner
    image: unjucks:security-scanner-${VERSION:-latest}
    container_name: unjucks-security-scanner
    hostname: security-scanner
    
    # Maximum Security
    security_opt:
      - no-new-privileges:true
      - seccomp:./security/seccomp.json
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=512m
      - /var/tmp:noexec,nosuid,nodev,size=256m
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    environment:
      - SCAN_MODE=comprehensive
      - OUTPUT_FORMAT=json
      - SEVERITY_LEVEL=HIGH
      - TRIVY_CACHE_DIR=/tmp/trivy
      - GRYPE_DB_CACHE_DIR=/tmp/grype
    
    volumes:
      - type: volume
        source: unjucks-security-data
        target: /tmp
      - type: volume
        source: unjucks-reports
        target: /app/reports
      - type: bind
        source: ..
        target: /scan-target
        read_only: true
    
    networks:
      - unjucks-security
    
    profiles:
      - security
      - full
    
    command: [
      "sh", "-c",
      "trivy fs --format json --output /app/reports/trivy-scan.json /scan-target && grype /scan-target --output json --file /app/reports/grype-scan.json && syft /scan-target -o json --file /app/reports/sbom.json"
    ]

  # ---------------------------------------------------------------------------
  # PERFORMANCE MONITORING CONTAINER
  # ---------------------------------------------------------------------------
  unjucks-prometheus:
    image: prom/prometheus:v2.45.0
    container_name: unjucks-performance-monitor
    hostname: prometheus
    
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    user: "65534:65534"
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=256m
      - /prometheus:size=1g
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    ports:
      - "127.0.0.1:9090:9090"
    
    configs:
      - source: prometheus-config
        target: /etc/prometheus/prometheus.yml
        mode: 0444
    
    volumes:
      - type: volume
        source: unjucks-logs
        target: /var/log/unjucks
        read_only: true
    
    networks:
      - unjucks-monitoring
    
    profiles:
      - monitoring
      - full
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.listen-address=0.0.0.0:9090'
      - '--storage.tsdb.retention.time=24h'
      - '--storage.tsdb.retention.size=8GB'
      - '--query.timeout=30s'
      - '--query.max-concurrency=20'

  # ---------------------------------------------------------------------------
  # DATABASE CONTAINER (Hardened PostgreSQL)
  # ---------------------------------------------------------------------------
  unjucks-postgres:
    image: postgres:16-alpine
    container_name: unjucks-test-database
    hostname: postgres-db
    
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    user: "999:999"
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=256m
      - /var/run/postgresql:size=64m
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    environment:
      - POSTGRES_DB=unjucks_test
      - POSTGRES_USER=unjucks_test
      - POSTGRES_PASSWORD=secure_test_password_2024
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --data-checksums
      - PGDATA=/var/lib/postgresql/data
    
    volumes:
      - type: volume
        source: unjucks-test-data
        target: /var/lib/postgresql/data
      - ./sql/init-secure.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    networks:
      - unjucks-testing
    
    profiles:
      - integration
      - full
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U unjucks_test -d unjucks_test -h localhost"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    command: [
      "postgres",
      "-c", "log_statement=all",
      "-c", "log_destination=stderr",
      "-c", "logging_collector=on",
      "-c", "max_connections=100",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB",
      "-c", "ssl=off"
    ]

  # ---------------------------------------------------------------------------
  # REDIS CONTAINER (Hardened)
  # ---------------------------------------------------------------------------
  unjucks-redis:
    image: redis:7.2-alpine
    container_name: unjucks-test-cache
    hostname: redis-cache
    
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "999:999"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=128m
      - /data:size=512m
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    
    networks:
      - unjucks-testing
    
    profiles:
      - integration
      - full
    
    command: [
      "redis-server",
      "--appendonly", "yes",
      "--maxmemory", "512mb",
      "--maxmemory-policy", "allkeys-lru",
      "--save", "60", "1000",
      "--tcp-keepalive", "60",
      "--timeout", "300",
      "--databases", "1"
    ]
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s

  # ---------------------------------------------------------------------------
  # LOG AGGREGATION CONTAINER
  # ---------------------------------------------------------------------------
  unjucks-logstash:
    image: elastic/logstash:8.11.0
    container_name: unjucks-log-aggregator
    hostname: logstash
    
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    user: "1000:1000"
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=512m
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    environment:
      - "LS_JAVA_OPTS=-Xmx1g -Xms1g"
      - XPACK_MONITORING_ENABLED=false
      - LOG_LEVEL=info
    
    configs:
      - source: logstash-config
        target: /usr/share/logstash/pipeline/logstash.conf
        mode: 0444
    
    volumes:
      - type: volume
        source: unjucks-logs
        target: /var/log/unjucks
        read_only: true
    
    networks:
      - unjucks-monitoring
    
    profiles:
      - logging
      - full
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats?pretty || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s

  # ---------------------------------------------------------------------------
  # DISTROLESS PRODUCTION CONTAINER (Optional)
  # ---------------------------------------------------------------------------
  unjucks-distroless:
    build:
      context: ..
      dockerfile: docker/Dockerfile.enhanced
      target: distroless-production
      args:
        NODE_VERSION: ${NODE_VERSION:-20.11.0}
        VERSION: ${VERSION:-latest}
    image: unjucks:distroless-${VERSION:-latest}
    container_name: unjucks-distroless-prod
    hostname: distroless-prod
    
    # Maximum Security (Distroless)
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    user: "65534:65534"
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    
    networks:
      - unjucks-testing
    
    profiles:
      - distroless
    
    labels:
      - "com.unjucks.service=distroless-production"
      - "com.unjucks.security.level=maximum"
      - "com.unjucks.distroless=true"

# =============================================================================
# PROFILE CONFIGURATIONS
# =============================================================================
# Usage examples:
# docker-compose --profile security up              # Security scanning only
# docker-compose --profile monitoring up            # Performance monitoring
# docker-compose --profile integration up           # With database & redis
# docker-compose --profile full up                  # Complete environment
# docker-compose up unjucks-cleanroom               # Primary testing only
# =============================================================================