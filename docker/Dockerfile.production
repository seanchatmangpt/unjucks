# Multi-stage production-grade Dockerfile for unjucks
# Container Specialist #3 - Bulletproof cleanroom environment

# =============================================================================
# Stage 1: Base Alpine with security hardening
# =============================================================================
FROM node:20-alpine3.19 AS base
LABEL maintainer="Container Specialist #3"
LABEL version="1.0.0"
LABEL description="Production-grade unjucks with cleanroom testing"

# Security hardening - non-root user with minimal privileges
RUN addgroup -g 1001 -S unjucks && \
    adduser -S -D -H -u 1001 -s /sbin/nologin unjucks -G unjucks

# Install security updates and minimal required packages
RUN apk update && \
    apk upgrade && \
    apk add --no-cache \
        dumb-init \
        tini \
        ca-certificates \
        tzdata && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Set secure environment
ENV NODE_ENV=production \
    NPM_CONFIG_CACHE=/tmp/.npm \
    PATH=/app/node_modules/.bin:$PATH \
    TERM=xterm

# =============================================================================
# Stage 2: Dependencies and security validation
# =============================================================================
FROM base AS deps
WORKDIR /app

# Copy package files with validation
COPY --chown=unjucks:unjucks package*.json ./
COPY --chown=unjucks:unjucks .npmrc* ./

# Install production dependencies with strict security
RUN npm install --only=production \
        --no-audit \
        --no-fund \
        --prefer-offline \
        --ignore-scripts && \
    npm cache clean --force && \
    rm -rf /tmp/.npm

# Validate dependencies for security issues after install
RUN npm audit --audit-level high --production || \
    (echo "Warning: Security vulnerabilities detected in dependencies")

# =============================================================================
# Stage 3: Build and validation
# =============================================================================
FROM base AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps --chown=unjucks:unjucks /app/node_modules ./node_modules
COPY --from=deps --chown=unjucks:unjucks /app/package*.json ./

# Copy source code
COPY --chown=unjucks:unjucks src/ ./src/
COPY --chown=unjucks:unjucks bin/ ./bin/
COPY --chown=unjucks:unjucks _templates/ ./_templates/
COPY --chown=unjucks:unjucks types/ ./types/
COPY --chown=unjucks:unjucks scripts/build-system.js ./scripts/

# Build application with validation
RUN npm run build && \
    chmod +x bin/unjucks.cjs && \
    chmod +x src/cli/index.js

# Validate build artifacts
RUN node bin/unjucks.cjs --version && \
    node bin/unjucks.cjs --help

# =============================================================================
# Stage 4: Testing environment (cleanroom)
# =============================================================================
FROM builder AS testing
WORKDIR /app

# Install test dependencies in isolated layer
COPY --chown=unjucks:unjucks package*.json ./
RUN npm install --include=dev \
        --no-audit \
        --no-fund \
        --prefer-offline && \
    npm cache clean --force

# Copy test files
COPY --chown=unjucks:unjucks tests/ ./tests/
COPY --chown=unjucks:unjucks features/ ./features/
COPY --chown=unjucks:unjucks cucumber*.config.cjs ./
COPY --chown=unjucks:unjucks vitest*.config.js ./
COPY --chown=unjucks:unjucks .eslintrc*.cjs ./

# Create test results directories
RUN mkdir -p /app/test-results/{unit,integration,e2e,security,performance} && \
    chown -R unjucks:unjucks /app/test-results

# Health check for testing stage
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node -e "console.log('Testing environment healthy')" || exit 1

# =============================================================================
# Stage 5: Production runtime
# =============================================================================
FROM base AS production
WORKDIR /app

# Copy only production artifacts
COPY --from=builder --chown=unjucks:unjucks /app/node_modules ./node_modules
COPY --from=builder --chown=unjucks:unjucks /app/package.json ./
COPY --from=builder --chown=unjucks:unjucks /app/src ./src
COPY --from=builder --chown=unjucks:unjucks /app/bin ./bin
COPY --from=builder --chown=unjucks:unjucks /app/_templates ./_templates
COPY --from=builder --chown=unjucks:unjucks /app/types ./types

# Create necessary directories with proper permissions
RUN mkdir -p /app/{logs,tmp,cache} && \
    chown -R unjucks:unjucks /app && \
    chmod -R 755 /app && \
    chmod +x /app/bin/unjucks.cjs

# Security: Remove package managers and unnecessary tools
RUN apk del --purge npm && \
    rm -rf /usr/local/lib/node_modules/npm

# Switch to non-root user
USER unjucks

# Expose application port (if needed)
EXPOSE 3000

# Health check for production
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node /app/bin/unjucks.cjs --version || exit 1

# Use tini as init system for proper signal handling
ENTRYPOINT ["tini", "--"]
CMD ["node", "/app/bin/unjucks.cjs"]

# =============================================================================
# Stage 6: Security scanning (optional)
# =============================================================================
FROM builder AS security-scan
RUN npm audit --audit-level moderate && \
    npm ls --depth=0

# =============================================================================
# Metadata and labels for container registry
# =============================================================================
LABEL org.opencontainers.image.title="unjucks"
LABEL org.opencontainers.image.description="Nunjucks + Hygen style scaffolding with RDF/Turtle support"
LABEL org.opencontainers.image.version="2.0.8"
LABEL org.opencontainers.image.vendor="Unjucks Team"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.source="https://github.com/unjucks/unjucks"
LABEL security.scan.date="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
LABEL security.non-root-user="unjucks"
LABEL security.uid="1001"
LABEL security.gid="1001"