# =============================================================================
# LOGSTASH CONFIGURATION
# Unjucks Cleanroom Testing Environment Log Processing
# =============================================================================

input {
  # Read application logs
  file {
    path => "/app/logs/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    tags => ["unjucks", "application"]
  }

  # Read test logs
  file {
    path => "/app/logs/test-*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    tags => ["unjucks", "testing"]
  }

  # Read security scan logs
  file {
    path => "/app/logs/security-*.json"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    tags => ["unjucks", "security"]
  }

  # Read performance logs
  file {
    path => "/app/logs/performance-*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    tags => ["unjucks", "performance"]
  }

  # Container logs from Docker
  beats {
    port => 5044
    tags => ["docker", "containers"]
  }
}

filter {
  # Parse application logs
  if "application" in [tags] {
    json {
      source => "message"
      target => "app"
    }
    
    date {
      match => [ "[app][timestamp]", "ISO8601" ]
      target => "@timestamp"
    }
    
    mutate {
      add_field => { "log_type" => "application" }
      add_field => { "environment" => "testing" }
      add_field => { "service" => "unjucks" }
    }
  }

  # Parse test logs
  if "testing" in [tags] {
    json {
      source => "message"
      target => "test"
    }
    
    if [test][status] {
      mutate {
        add_field => { "test_status" => "%{[test][status]}" }
        add_field => { "test_suite" => "%{[test][suite]}" }
        add_field => { "test_duration" => "%{[test][duration]}" }
      }
    }
    
    mutate {
      add_field => { "log_type" => "testing" }
      add_field => { "environment" => "testing" }
    }
  }

  # Parse security scan logs
  if "security" in [tags] {
    json {
      source => "message"
      target => "security"
    }
    
    if [security][vulnerabilities] {
      ruby {
        code => "
          vulns = event.get('[security][vulnerabilities]')
          if vulns.is_a?(Array)
            event.set('vulnerability_count', vulns.length)
            high_severity = vulns.select { |v| v['severity'] == 'HIGH' || v['severity'] == 'CRITICAL' }
            event.set('high_severity_count', high_severity.length)
          end
        "
      }
    }
    
    mutate {
      add_field => { "log_type" => "security" }
      add_field => { "scan_type" => "vulnerability" }
    }
  }

  # Parse performance logs
  if "performance" in [tags] {
    json {
      source => "message"
      target => "perf"
    }
    
    if [perf][metrics] {
      ruby {
        code => "
          metrics = event.get('[perf][metrics]')
          if metrics.is_a?(Hash)
            metrics.each do |key, value|
              event.set(key, value) if value.is_a?(Numeric)
            end
          end
        "
      }
    }
    
    mutate {
      add_field => { "log_type" => "performance" }
    }
  }

  # Parse Docker container logs
  if "docker" in [tags] {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:log_message}" 
      }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    mutate {
      add_field => { "log_type" => "container" }
      add_field => { "environment" => "testing" }
    }
  }

  # Add common fields
  mutate {
    add_field => { "[@metadata][index_name]" => "unjucks-logs-%{+YYYY.MM.dd}" }
    add_field => { "host_ip" => "%{[@metadata][ip_address]}" }
  }

  # Clean up fields
  mutate {
    remove_field => [ "path", "host" ]
  }
}

output {
  # Output to Elasticsearch (if available)
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index_name]}"
    template_name => "unjucks-logs"
    template_pattern => "unjucks-logs-*"
    template => {
      "index_patterns" => ["unjucks-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "log_type" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
          "service" => { "type" => "keyword" }
          "level" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "test_status" => { "type" => "keyword" }
          "vulnerability_count" => { "type" => "integer" }
          "high_severity_count" => { "type" => "integer" }
        }
      }
    }
  }

  # Output to file for backup
  file {
    path => "/app/logs/processed-%{+YYYY-MM-dd}.log"
    codec => json_lines
  }

  # Debug output to stdout (remove in production)
  stdout {
    codec => rubydebug
  }
}