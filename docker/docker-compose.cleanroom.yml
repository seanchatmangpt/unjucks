# Comprehensive Docker testing environment for Unjucks
# Includes cleanroom testing, security scanning, performance monitoring, and production simulation

services:
  # ==================================================
  # CLEANROOM TESTING ENVIRONMENT
  # ==================================================
  unjucks-cleanroom:
    build:
      context: ..
      dockerfile: docker/Dockerfile.cleanroom
      target: cleanroom
      args:
        NODE_ENV: test
        CLEANROOM_MODE: docker
    container_name: unjucks-cleanroom-test
    hostname: cleanroom-test
    environment:
      - NODE_ENV=test
      - CLEANROOM_MODE=docker
      - CI=true
      - FORCE_COLOR=1
      - VERDACCIO_PORT=4873
      - NPM_REGISTRY=http://localhost:4873/
    volumes:
      # Development volume mounts (read-only for safety)
      - ../src:/app/src:ro
      - ../bin:/app/bin:ro
      - ../_templates:/app/_templates:ro
      - ../scripts:/app/scripts:ro
      - ../package.json:/app/package.json:ro
      - ../package-lock.json:/app/package-lock.json:ro
      # Output volumes for test results
      - cleanroom-output:/output
      - cleanroom-reports:/app/cleanroom-output
      - security-reports:/app/security-reports
      - performance-reports:/app/performance-reports
      - validation-reports:/app/validation-reports
    networks:
      - unjucks-test-network
    security_opt:
      - no-new-privileges:true
    read_only: false  # Needed for test execution
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    mem_limit: 1g
    cpus: 2.0
    restart: no
    profiles:
      - cleanroom
      - all

  # ==================================================
  # PRODUCTION SIMULATION ENVIRONMENT
  # ==================================================
  unjucks-production:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
      target: production
      args:
        NODE_ENV: production
    container_name: unjucks-production-test
    hostname: production-test
    environment:
      - NODE_ENV=production
      - PORT=3000
      - UNJUCKS_LOG_LEVEL=info
      - UNJUCKS_METRICS_ENABLED=true
    volumes:
      # Production configuration
      - ../docker/configs/production.json:/app/config/production.json:ro
      # Logs and data persistence
      - production-logs:/app/logs
      - production-data:/app/data
    ports:
      - "3000:3000"
    networks:
      - unjucks-test-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /app/tmp:noexec,nosuid,size=50m
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:3000/health", "--max-time", "5"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    mem_limit: 512m
    cpus: 1.0
    restart: unless-stopped
    profiles:
      - production
      - all

  # ==================================================
  # SECURITY SCANNING SERVICE
  # ==================================================
  unjucks-security-scan:
    build:
      context: ..
      dockerfile: docker/Dockerfile.cleanroom
      target: cleanroom
    container_name: unjucks-security-scan
    hostname: security-scanner
    environment:
      - NODE_ENV=test
      - SECURITY_SCAN_MODE=true
      - CI=true
    volumes:
      - ../src:/app/src:ro
      - ../bin:/app/bin:ro
      - ../package.json:/app/package.json:ro
      - security-reports:/app/security-reports
    command: ["/app/security-scan.sh"]
    networks:
      - unjucks-test-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    mem_limit: 768m
    cpus: 1.5
    restart: no
    profiles:
      - security
      - all

  # ==================================================
  # PERFORMANCE MONITORING SERVICE
  # ==================================================
  unjucks-performance:
    build:
      context: ..
      dockerfile: docker/Dockerfile.cleanroom
      target: cleanroom
    container_name: unjucks-performance-test
    hostname: performance-test
    environment:
      - NODE_ENV=test
      - PERFORMANCE_TEST_MODE=true
      - CI=true
    volumes:
      - ../src:/app/src:ro
      - ../bin:/app/bin:ro
      - performance-reports:/app/performance-reports
    command: ["/app/performance-monitor.sh"]
    networks:
      - unjucks-test-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=200m
    mem_limit: 2g
    cpus: 3.0
    restart: no
    profiles:
      - performance
      - all

  # ==================================================
  # DEVELOPMENT ENVIRONMENT
  # ==================================================
  unjucks-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile.testing
      target: testing
    container_name: unjucks-dev
    hostname: dev-environment
    environment:
      - NODE_ENV=development
      - WATCH_MODE=true
      - FORCE_COLOR=1
    volumes:
      # Development volume mounts (read-write for development)
      - ../src:/app/src
      - ../bin:/app/bin
      - ../_templates:/app/_templates
      - ../scripts:/app/scripts
      - ../tests:/app/tests
      - ../package.json:/app/package.json
      - ../package-lock.json:/app/package-lock.json
      # Development outputs
      - dev-node-modules:/app/node_modules
      - dev-output:/app/output
    working_dir: /app
    command: ["tail", "-f", "/dev/null"]  # Keep container running for development
    networks:
      - unjucks-test-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    mem_limit: 1g
    cpus: 2.0
    restart: unless-stopped
    profiles:
      - development
      - dev

  # ==================================================
  # MULTI-ARCHITECTURE TEST RUNNER
  # ==================================================
  unjucks-multi-arch:
    build:
      context: ..
      dockerfile: docker/Dockerfile.testing
      target: testing
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: unjucks-multi-arch-test
    hostname: multi-arch-test
    environment:
      - NODE_ENV=test
      - MULTI_ARCH_TEST=true
      - CI=true
    volumes:
      - ../src:/app/src:ro
      - ../tests:/app/tests:ro
      - multi-arch-reports:/app/test-results
    command: ["npm", "run", "test:architecture"]
    networks:
      - unjucks-test-network
    mem_limit: 1g
    cpus: 2.0
    restart: no
    profiles:
      - multi-arch
      - all

  # ==================================================
  # TEST AGGREGATOR AND REPORTER
  # ==================================================
  test-aggregator:
    image: node:20-alpine
    container_name: unjucks-test-aggregator
    hostname: test-aggregator
    environment:
      - NODE_ENV=test
      - AGGREGATOR_MODE=true
    volumes:
      - cleanroom-reports:/reports/cleanroom:ro
      - security-reports:/reports/security:ro
      - performance-reports:/reports/performance:ro
      - validation-reports:/reports/validation:ro
      - aggregated-reports:/output
      - ../docker/scripts:/scripts:ro
    working_dir: /scripts
    command: sh -c "sleep 10 && node aggregate-test-results.js"
    networks:
      - unjucks-test-network
    depends_on:
      - unjucks-cleanroom
      - unjucks-security-scan
      - unjucks-performance
    mem_limit: 256m
    cpus: 0.5
    restart: no
    profiles:
      - aggregation
      - all

# ==================================================
# NETWORKS
# ==================================================
networks:
  unjucks-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: unjucks-test-br

# ==================================================
# VOLUMES
# ==================================================
volumes:
  # Cleanroom testing volumes
  cleanroom-output:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/test-results/cleanroom
  cleanroom-reports:
    driver: local
  
  # Security scanning volumes
  security-reports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/test-results/security
  
  # Performance testing volumes
  performance-reports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/test-results/performance
  
  # Validation reports
  validation-reports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/test-results/validation
  
  # Production volumes
  production-logs:
    driver: local
  production-data:
    driver: local
  
  # Development volumes
  dev-node-modules:
    driver: local
  dev-output:
    driver: local
  
  # Multi-architecture test volumes
  multi-arch-reports:
    driver: local
  
  # Aggregated reports
  aggregated-reports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/test-results/aggregated

# ==================================================
# CONFIGURATION
# ==================================================
x-common-security: &common-security
  security_opt:
    - no-new-privileges:true
  read_only: true
  tmpfs:
    - /tmp:noexec,nosuid,size=100m

x-common-resources: &common-resources
  mem_limit: 1g
  cpus: 2.0
  restart: no