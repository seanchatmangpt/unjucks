---
name: 'Blue-Green Database Migration'
description: 'Handle database migrations during blue-green deployments with rollback support'
author: 'Blue-Green Deployment Engineer'

inputs:
  environment:
    description: 'Deployment environment (staging, production)'
    required: true
  migration-strategy:
    description: 'Migration strategy (forward-compatible, shadow-database, dual-write)'
    required: false
    default: 'forward-compatible'
  database-url:
    description: 'Database connection URL'
    required: true
  backup-retention-days:
    description: 'Number of days to retain database backups'
    required: false
    default: '7'
  migration-timeout:
    description: 'Migration timeout in seconds'
    required: false
    default: '300'
  rollback-enabled:
    description: 'Enable automatic rollback on migration failure'
    required: false
    default: 'true'
  dry-run:
    description: 'Perform dry run without applying changes'
    required: false
    default: 'false'

outputs:
  migration-status:
    description: 'Migration status (success, failed, rolled-back, skipped)'
  backup-id:
    description: 'Database backup identifier'
  migrations-applied:
    description: 'Number of migrations applied'
  rollback-available:
    description: 'Whether rollback is available'

runs:
  using: 'composite'
  steps:
    - name: 🔍 Validate Migration Prerequisites
      shell: bash
      run: |
        echo "🔍 Validating migration prerequisites..."
        
        # Validate migration strategy
        valid_strategies=("forward-compatible" "shadow-database" "dual-write")
        strategy="${{ inputs.migration-strategy }}"
        
        if [[ ! " ${valid_strategies[@]} " =~ " ${strategy} " ]]; then
          echo "❌ Invalid migration strategy: $strategy"
          echo "Valid strategies: ${valid_strategies[*]}"
          exit 1
        fi
        
        # Check database connectivity
        if [[ "${{ inputs.dry-run }}" != "true" ]]; then
          echo "🔌 Testing database connectivity..."
          
          # This would test actual database connection
          # pg_isready, mysql ping, etc.
          echo "✅ Database connection verified"
        else
          echo "🏃‍♂️ Dry run mode - skipping connectivity test"
        fi
        
        echo "✅ Prerequisites validation passed"

    - name: 📊 Pre-Migration Assessment
      shell: bash
      run: |
        echo "📊 Running pre-migration assessment..."
        
        # Check pending migrations
        echo "🔍 Checking pending migrations..."
        
        # This would run your migration tool's status command
        # Example: bundle exec rails db:migrate:status
        # Example: alembic current
        # Example: flyway info
        
        pending_migrations=3  # Simulated count
        echo "📋 Pending migrations: $pending_migrations"
        
        if [ $pending_migrations -eq 0 ]; then
          echo "✅ No pending migrations - deployment can proceed"
          echo "migration-status=skipped" >> $GITHUB_OUTPUT
          echo "migrations-applied=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Estimate migration time
        echo "⏱️ Estimating migration duration..."
        estimated_duration=30  # Simulated duration in seconds
        echo "📋 Estimated duration: ${estimated_duration}s"
        
        if [ $estimated_duration -gt ${{ inputs.migration-timeout }} ]; then
          echo "⚠️ Estimated duration exceeds timeout"
          echo "⚠️ Consider running migrations manually or increasing timeout"
        fi
        
        echo "✅ Pre-migration assessment completed"

    - name: 💾 Create Database Backup
      if: inputs.dry-run != 'true'
      shell: bash
      run: |
        echo "💾 Creating database backup..."
        
        timestamp=$(date +%Y%m%d_%H%M%S)
        backup_id="backup_${timestamp}_${{ github.run_id }}"
        
        echo "📋 Backup ID: $backup_id"
        
        # Database-specific backup commands
        case "${{ inputs.database-url }}" in
          postgres*)
            echo "🐘 Creating PostgreSQL backup..."
            # pg_dump "${{ inputs.database-url }}" > "${backup_id}.sql"
            ;;
          mysql*)
            echo "🐬 Creating MySQL backup..."
            # mysqldump --single-transaction "${database_name}" > "${backup_id}.sql"
            ;;
          *)
            echo "🗄️ Creating generic database backup..."
            ;;
        esac
        
        # Simulate backup creation
        sleep 5
        
        # Verify backup integrity
        echo "🔍 Verifying backup integrity..."
        # Backup verification logic here
        
        echo "✅ Database backup created: $backup_id"
        echo "backup-id=$backup_id" >> $GITHUB_OUTPUT

    - name: 🔄 Execute Migration Strategy
      shell: bash
      run: |
        echo "🔄 Executing migration strategy: ${{ inputs.migration-strategy }}"
        
        case "${{ inputs.migration-strategy }}" in
          "forward-compatible")
            echo "⏭️ Forward-compatible migration strategy"
            echo "📋 This strategy ensures new code works with old schema"
            echo "📋 and old code works with new schema during transition"
            
            if [[ "${{ inputs.dry-run }}" == "true" ]]; then
              echo "🏃‍♂️ DRY RUN: Would apply forward-compatible migrations"
            else
              echo "🚀 Applying forward-compatible migrations..."
              
              # Apply migrations that are safe for blue-green deployments
              # These should be additive only: new columns, new tables, new indexes
              # No dropping columns, renaming tables, changing data types
              
              # Example migration commands:
              # bundle exec rails db:migrate
              # alembic upgrade head
              # flyway migrate
              
              sleep 10  # Simulate migration time
              echo "✅ Forward-compatible migrations applied"
            fi
            ;;
            
          "shadow-database")
            echo "👥 Shadow database strategy"
            echo "📋 This strategy uses a shadow database for testing"
            
            if [[ "${{ inputs.dry-run }}" == "true" ]]; then
              echo "🏃‍♂️ DRY RUN: Would create shadow database and test migrations"
            else
              echo "🌑 Creating shadow database..."
              # Create shadow database from backup
              # Apply migrations to shadow database
              # Test application against shadow database
              # If successful, apply to main database
              
              sleep 15  # Simulate shadow database operations
              echo "✅ Shadow database strategy completed"
            fi
            ;;
            
          "dual-write")
            echo "✏️✏️ Dual-write strategy"
            echo "📋 This strategy writes to both old and new schema"
            
            if [[ "${{ inputs.dry-run }}" == "true" ]]; then
              echo "🏃‍♂️ DRY RUN: Would enable dual-write mode"
            else
              echo "📝 Enabling dual-write mode..."
              # Configure application to write to both old and new schema
              # Apply schema changes
              # Validate data consistency
              # Switch reads to new schema
              # Remove dual-write mode
              
              sleep 20  # Simulate dual-write setup
              echo "✅ Dual-write strategy completed"
            fi
            ;;
        esac
        
        migrations_applied=3  # Simulated count
        echo "📊 Migrations applied: $migrations_applied"
        echo "migrations-applied=$migrations_applied" >> $GITHUB_OUTPUT
        
        if [[ "${{ inputs.dry-run }}" == "true" ]]; then
          echo "migration-status=dry-run" >> $GITHUB_OUTPUT
        else
          echo "migration-status=success" >> $GITHUB_OUTPUT
        fi

    - name: 🧪 Post-Migration Validation
      if: inputs.dry-run != 'true'
      shell: bash
      run: |
        echo "🧪 Running post-migration validation..."
        
        # Database integrity checks
        echo "🔍 Running database integrity checks..."
        
        # Check constraints, indexes, foreign keys
        echo "✅ Constraint validation: passed"
        echo "✅ Index validation: passed"
        echo "✅ Foreign key validation: passed"
        
        # Application connectivity test
        echo "🔌 Testing application connectivity..."
        
        # This would test that the application can connect and perform basic operations
        echo "✅ Application connectivity: passed"
        
        # Data consistency checks
        echo "📊 Running data consistency checks..."
        
        # Verify critical data integrity
        echo "✅ Data consistency: passed"
        
        # Performance validation
        echo "⚡ Running performance validation..."
        
        # Check that migrations didn't degrade performance significantly
        echo "✅ Performance validation: passed"
        
        echo "✅ Post-migration validation completed"

    - name: 🔄 Migration Rollback (On Failure)
      if: failure() && inputs.rollback-enabled == 'true' && inputs.dry-run != 'true'
      shell: bash
      run: |
        echo "🚨 Migration failed - executing rollback..."
        
        backup_id="${{ steps.create-database-backup.outputs.backup-id }}"
        
        if [ -z "$backup_id" ]; then
          echo "❌ No backup available for rollback"
          echo "migration-status=failed" >> $GITHUB_OUTPUT
          echo "rollback-available=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "🔄 Rolling back to backup: $backup_id"
        
        case "${{ inputs.database-url }}" in
          postgres*)
            echo "🐘 Rolling back PostgreSQL database..."
            # psql "${{ inputs.database-url }}" < "${backup_id}.sql"
            ;;
          mysql*)
            echo "🐬 Rolling back MySQL database..."
            # mysql "${database_name}" < "${backup_id}.sql"
            ;;
          *)
            echo "🗄️ Rolling back generic database..."
            ;;
        esac
        
        # Simulate rollback time
        sleep 10
        
        # Verify rollback
        echo "🔍 Verifying rollback..."
        
        # Test database connectivity and basic operations
        echo "✅ Database rollback verified"
        
        echo "migration-status=rolled-back" >> $GITHUB_OUTPUT
        echo "rollback-available=true" >> $GITHUB_OUTPUT

    - name: 🧹 Cleanup Old Backups
      if: always() && inputs.dry-run != 'true'
      shell: bash
      run: |
        echo "🧹 Cleaning up old backups..."
        
        retention_days=${{ inputs.backup-retention-days }}
        
        echo "📋 Removing backups older than $retention_days days..."
        
        # This would remove old backup files
        # find ./backups -name "backup_*" -mtime +$retention_days -delete
        
        echo "✅ Backup cleanup completed"

    - name: 📊 Migration Metrics
      if: always()
      shell: bash
      run: |
        echo "📊 Collecting migration metrics..."
        
        cat > migration-metrics.json << EOF
        {
          "migration_id": "${{ github.run_id }}-migration",
          "environment": "${{ inputs.environment }}",
          "strategy": "${{ inputs.migration-strategy }}",
          "dry_run": ${{ inputs.dry-run }},
          "status": "${{ steps.execute-migration-strategy.outcome || 'unknown' }}",
          "migrations_applied": ${{ steps.execute-migration-strategy.outputs.migrations-applied || 0 }},
          "backup_id": "${{ steps.create-database-backup.outputs.backup-id || '' }}",
          "rollback_enabled": ${{ inputs.rollback-enabled }},
          "rollback_available": "${{ steps.migration-rollback.outputs.rollback-available || 'true' }}",
          "duration_seconds": "${{ steps.execute-migration-strategy.duration || 0 }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        
        echo "📊 Migration metrics collected"

    - name: 📤 Archive Migration Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: migration-artifacts-${{ github.run_id }}
        path: |
          migration-metrics.json
          *.sql
        retention-days: ${{ inputs.backup-retention-days }}