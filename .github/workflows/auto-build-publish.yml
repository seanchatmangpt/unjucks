name: 🚀 Auto Build & Publish

on:
  # Manual trigger from GitHub UI
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (no actual publish)'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

  # API trigger from CLI
  repository_dispatch:
    types: [trigger-build]

jobs:
  auto-build-publish:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: 🔍 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 📅 Generate auto-version
        id: version
        run: |
          if [ "${{ github.event.inputs.version_type }}" = "auto" ] || [ "${{ github.event.action }}" = "trigger-build" ]; then
            # Auto-generate timestamp version
            VERSION=$(date -u '+%Y.%m.%d.%H.%M')
            echo "Generated auto-version: $VERSION"
          else
            # Use npm version command
            npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
            VERSION=$(node -p "require('./package.json').version")
            echo "Generated ${{ github.event.inputs.version_type }} version: $VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          
          # Update package.json
          npm version $VERSION --no-git-tag-version

      - name: 🧪 Run tests
        if: ${{ !github.event.inputs.skip_tests && github.event.inputs.skip_tests != 'true' }}
        run: |
          echo "🔍 Running lint check..."
          npm run lint || echo "⚠️ Lint warnings found but continuing..."
          
          echo "🔍 Running type check..."
          npm run typecheck || echo "⚠️ Type check issues found but continuing..."

      - name: 🔨 Build project
        run: |
          echo "🔨 Building project..."
          npm run build

      - name: ✅ Verify build
        run: |
          echo "✅ Verifying build output..."
          ls -la dist/
          ls -la bin/
          
          echo "✅ Testing CLI binary..."
          node bin/unjucks.cjs --version
          
          echo "✅ Testing basic commands..."
          node bin/unjucks.cjs list

      - name: 📝 Commit and tag
        if: ${{ !github.event.inputs.dry_run && github.event.inputs.dry_run != 'true' }}
        run: |
          echo "📝 Committing version changes..."
          git add package.json package-lock.json 2>/dev/null || git add package.json
          git commit -m "🤖 chore: bump version to ${{ steps.version.outputs.version }}

          🚀 Auto-generated version using GitHub Actions
          
          Triggered by: ${{ github.actor }}
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}
          
          🤖 Generated with Unjucks Auto-Versioning"
          
          echo "🏷️ Creating git tag..."
          git tag ${{ steps.version.outputs.tag }}

      - name: 🚀 Publish to npm
        if: ${{ !github.event.inputs.dry_run && github.event.inputs.dry_run != 'true' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "🚀 Publishing to npm..."
          npm publish --access=public
          
          echo "✅ Published @seanchatmangpt/unjucks@${{ steps.version.outputs.version }}"

      - name: 📤 Push changes
        if: ${{ !github.event.inputs.dry_run && github.event.inputs.dry_run != 'true' }}
        run: |
          echo "📤 Pushing changes and tags..."
          git push origin main
          git push origin ${{ steps.version.outputs.tag }}

      - name: 📊 Create GitHub Release
        if: ${{ !github.event.inputs.dry_run && github.event.inputs.dry_run != 'true' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: "🚀 Unjucks ${{ steps.version.outputs.tag }}"
          body: |
            ## 🚀 Unjucks ${{ steps.version.outputs.tag }}
            
            **Auto-generated release with timestamp versioning**
            
            ### 📦 Installation
            ```bash
            npm install -g @seanchatmangpt/unjucks@${{ steps.version.outputs.version }}
            ```
            
            ### 🔄 Changes
            - 🤖 Auto-generated version: `${{ steps.version.outputs.version }}`
            - 📅 Released: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            - 👤 Triggered by: ${{ github.actor }}
            
            ### 🌐 Links
            - 📦 [npm package](https://www.npmjs.com/package/@seanchatmangpt/unjucks)
            - 📋 [Workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            🤖 Generated with Unjucks Auto-Versioning System
          draft: false
          prerelease: false

      - name: 📋 Summary
        run: |
          echo "## 🎉 Build & Publish Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Version | \`${{ steps.version.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ Git Tag | \`${{ steps.version.outputs.tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 npm Package | [@seanchatmangpt/unjucks@${{ steps.version.outputs.version }}](https://www.npmjs.com/package/@seanchatmangpt/unjucks) |" >> $GITHUB_STEP_SUMMARY
          echo "| 👤 Triggered by | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔄 Dry Run | ${{ github.event.inputs.dry_run || 'false' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Install: \`npm install -g @seanchatmangpt/unjucks@${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Test: \`unjucks --version\`" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **This was a dry run - no actual publishing occurred**" >> $GITHUB_STEP_SUMMARY
          fi