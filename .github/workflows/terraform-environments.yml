name: üåç Terraform Environment Management

# Multi-environment Terraform workflow with environment-specific configurations,
# automated provisioning, and environment lifecycle management

on:
  push:
    branches: [main, develop, feature/*]
    paths:
      - 'terraform/**'
      - 'infrastructure/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'terraform/**'
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
          - refresh
          - validate
        default: plan
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
          - review-app
        default: development
      auto_approve:
        description: 'Auto approve apply (use with caution)'
        required: false
        type: boolean
        default: false

env:
  TF_VERSION: '1.6.0'
  TF_IN_AUTOMATION: 'true'
  AWS_DEFAULT_REGION: 'us-east-1'

jobs:
  # ==========================================
  # TERRAFORM MATRIX VALIDATION
  # ==========================================
  terraform-matrix:
    name: üéØ Terraform Multi-Environment Matrix
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.matrix.outputs.environments }}
      changed-environments: ${{ steps.changes.outputs.environments }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üéØ Determine Environment Matrix
        id: matrix
        run: |
          echo "üéØ Determining environment matrix..."
          
          # Define environment configurations
          cat > environment-matrix.json << 'EOF'
          {
            "development": {
              "aws_region": "us-east-1",
              "instance_type": "t3.micro",
              "min_capacity": 1,
              "max_capacity": 2,
              "auto_approve": true,
              "cost_limit": 100
            },
            "staging": {
              "aws_region": "us-east-1", 
              "instance_type": "t3.small",
              "min_capacity": 1,
              "max_capacity": 3,
              "auto_approve": false,
              "cost_limit": 300
            },
            "production": {
              "aws_region": "us-east-1",
              "instance_type": "m5.large",
              "min_capacity": 2,
              "max_capacity": 10,
              "auto_approve": false,
              "cost_limit": 2000
            },
            "review-app": {
              "aws_region": "us-east-1",
              "instance_type": "t3.micro",
              "min_capacity": 1,
              "max_capacity": 1,
              "auto_approve": true,
              "cost_limit": 50
            }
          }
          EOF
          
          # Output environments for matrix
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            # Single environment from manual trigger
            echo "environments=[\"${{ github.event.inputs.environment }}\"]" >> $GITHUB_OUTPUT
          else
            # All environments for push/PR
            echo "environments=[\"development\", \"staging\", \"production\"]" >> $GITHUB_OUTPUT
          fi

      - name: üîç Detect Changed Environments
        id: changes
        run: |
          echo "üîç Detecting changed environments..."
          
          changed_environments="[]"
          
          if [ "${{ github.event_name }}" = "push" ] || [ "${{ github.event_name }}" = "pull_request" ]; then
            # Detect changes in terraform files
            if git diff --name-only HEAD~1 HEAD | grep -E '^terraform/|^infrastructure/' > /dev/null; then
              echo "üìã Terraform files changed"
              
              # Check which environment directories changed
              changed_envs=()
              for env in development staging production; do
                if git diff --name-only HEAD~1 HEAD | grep -E "terraform/$env/|infrastructure/$env/" > /dev/null; then
                  changed_envs+=("\"$env\"")
                fi
              done
              
              if [ ${#changed_envs[@]} -gt 0 ]; then
                changed_environments="[$(IFS=,; echo "${changed_envs[*]}")]"
              else
                # If common files changed, affect all environments
                changed_environments="[\"development\", \"staging\", \"production\"]"
              fi
            fi
          fi
          
          echo "environments=$changed_environments" >> $GITHUB_OUTPUT
          echo "Changed environments: $changed_environments"

  # ==========================================
  # TERRAFORM VALIDATION PER ENVIRONMENT
  # ==========================================
  terraform-validate:
    name: üîç Terraform Validate (${{ matrix.environment }})
    runs-on: ubuntu-latest
    needs: terraform-matrix
    if: needs.terraform-matrix.outputs.changed-environments != '[]' || github.event.inputs.environment != ''
    strategy:
      matrix:
        environment: ${{ fromJson(needs.terraform-matrix.outputs.environments) }}
      fail-fast: false
    outputs:
      validation-results: ${{ steps.validate.outputs.results }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: üìã Load Environment Configuration
        id: env-config
        run: |
          echo "üìã Loading configuration for ${{ matrix.environment }}..."
          
          # Load environment-specific configuration
          case "${{ matrix.environment }}" in
            development)
              echo "instance-type=t3.micro" >> $GITHUB_OUTPUT
              echo "min-capacity=1" >> $GITHUB_OUTPUT
              echo "max-capacity=2" >> $GITHUB_OUTPUT
              echo "auto-approve=true" >> $GITHUB_OUTPUT
              echo "cost-limit=100" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "instance-type=t3.small" >> $GITHUB_OUTPUT
              echo "min-capacity=1" >> $GITHUB_OUTPUT
              echo "max-capacity=3" >> $GITHUB_OUTPUT
              echo "auto-approve=false" >> $GITHUB_OUTPUT
              echo "cost-limit=300" >> $GITHUB_OUTPUT
              ;;
            production)
              echo "instance-type=m5.large" >> $GITHUB_OUTPUT
              echo "min-capacity=2" >> $GITHUB_OUTPUT
              echo "max-capacity=10" >> $GITHUB_OUTPUT
              echo "auto-approve=false" >> $GITHUB_OUTPUT
              echo "cost-limit=2000" >> $GITHUB_OUTPUT
              ;;
            review-app)
              echo "instance-type=t3.micro" >> $GITHUB_OUTPUT
              echo "min-capacity=1" >> $GITHUB_OUTPUT
              echo "max-capacity=1" >> $GITHUB_OUTPUT
              echo "auto-approve=true" >> $GITHUB_OUTPUT
              echo "cost-limit=50" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: üîß Terraform Initialize
        run: |
          echo "üîß Initializing Terraform for ${{ matrix.environment }}..."
          cd terraform/${{ matrix.environment }}
          
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_DEFAULT_REGION }}"

      - name: ‚úÖ Terraform Validate
        id: validate
        run: |
          echo "‚úÖ Validating Terraform configuration for ${{ matrix.environment }}..."
          cd terraform/${{ matrix.environment }}
          
          # Run terraform validate
          if terraform validate; then
            echo "‚úÖ Validation passed for ${{ matrix.environment }}"
            echo "results=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Validation failed for ${{ matrix.environment }}"
            echo "results=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: üìã Terraform Format Check
        run: |
          echo "üìã Checking Terraform format for ${{ matrix.environment }}..."
          cd terraform/${{ matrix.environment }}
          
          if terraform fmt -check -recursive; then
            echo "‚úÖ Format check passed"
          else
            echo "‚ö†Ô∏è Format issues found - running terraform fmt..."
            terraform fmt -recursive
            
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "üí° Tip: Run 'terraform fmt -recursive' locally to fix formatting"
            fi
          fi

      - name: üîí Security Validation
        run: |
          echo "üîí Running security validation for ${{ matrix.environment }}..."
          cd terraform/${{ matrix.environment }}
          
          # Install tfsec
          curl -L https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64 -o tfsec
          chmod +x tfsec
          
          # Run security scan
          ./tfsec . --format json --out tfsec-${{ matrix.environment }}.json || true
          
          # Check for high/critical issues
          if [ -f "tfsec-${{ matrix.environment }}.json" ]; then
            HIGH_ISSUES=$(jq '[.results[] | select(.severity == "HIGH")] | length' tfsec-${{ matrix.environment }}.json)
            CRITICAL_ISSUES=$(jq '[.results[] | select(.severity == "CRITICAL")] | length' tfsec-${{ matrix.environment }}.json)
            
            echo "üîí Security Scan Results for ${{ matrix.environment }}:"
            echo "  High Issues: $HIGH_ISSUES"
            echo "  Critical Issues: $CRITICAL_ISSUES"
            
            if [ "$CRITICAL_ISSUES" -gt 0 ]; then
              echo "‚ùå Critical security issues found - blocking deployment"
              exit 1
            elif [ "$HIGH_ISSUES" -gt 0 ]; then
              echo "‚ö†Ô∏è High security issues found - review recommended"
            fi
          fi

      - name: üì§ Upload Validation Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-validation-${{ matrix.environment }}
          path: terraform/${{ matrix.environment }}/tfsec-*.json
          retention-days: 30

  # ==========================================
  # TERRAFORM PLANNING PER ENVIRONMENT
  # ==========================================
  terraform-plan:
    name: üìã Terraform Plan (${{ matrix.environment }})
    runs-on: ubuntu-latest
    needs: [terraform-matrix, terraform-validate]
    if: |
      needs.terraform-validate.result == 'success' &&
      (needs.terraform-matrix.outputs.changed-environments != '[]' || github.event.inputs.environment != '')
    strategy:
      matrix:
        environment: ${{ fromJson(needs.terraform-matrix.outputs.environments) }}
      fail-fast: false
    outputs:
      plan-results: ${{ steps.plan.outputs.results }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: üîí Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: üìã Load Environment Configuration
        id: env-config
        run: |
          # Reuse environment configuration logic
          case "${{ matrix.environment }}" in
            development)
              echo "instance-type=t3.micro" >> $GITHUB_OUTPUT
              echo "min-capacity=1" >> $GITHUB_OUTPUT
              echo "max-capacity=2" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "instance-type=t3.small" >> $GITHUB_OUTPUT
              echo "min-capacity=1" >> $GITHUB_OUTPUT
              echo "max-capacity=3" >> $GITHUB_OUTPUT
              ;;
            production)
              echo "instance-type=m5.large" >> $GITHUB_OUTPUT
              echo "min-capacity=2" >> $GITHUB_OUTPUT
              echo "max-capacity=10" >> $GITHUB_OUTPUT
              ;;
            review-app)
              echo "instance-type=t3.micro" >> $GITHUB_OUTPUT
              echo "min-capacity=1" >> $GITHUB_OUTPUT
              echo "max-capacity=1" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: üîß Terraform Initialize
        run: |
          cd terraform/${{ matrix.environment }}
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_DEFAULT_REGION }}"

      - name: üìã Terraform Plan
        id: plan
        run: |
          echo "üìã Creating Terraform plan for ${{ matrix.environment }}..."
          cd terraform/${{ matrix.environment }}
          
          # Create plan with environment-specific variables
          terraform plan \
            -var="environment=${{ matrix.environment }}" \
            -var="instance_type=${{ steps.env-config.outputs.instance-type }}" \
            -var="min_capacity=${{ steps.env-config.outputs.min-capacity }}" \
            -var="max_capacity=${{ steps.env-config.outputs.max-capacity }}" \
            -out=tfplan-${{ matrix.environment }}.out \
            -detailed-exitcode
          
          PLAN_EXIT_CODE=$?
          
          # Convert plan to readable format
          terraform show -no-color tfplan-${{ matrix.environment }}.out > tfplan-${{ matrix.environment }}.txt
          
          # Analyze plan results
          if [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "results=changes" >> $GITHUB_OUTPUT
            echo "üìã Terraform plan shows changes for ${{ matrix.environment }}"
            
            # Count resources
            ADD_COUNT=$(grep -c "will be created" tfplan-${{ matrix.environment }}.txt || echo "0")
            CHANGE_COUNT=$(grep -c "will be updated" tfplan-${{ matrix.environment }}.txt || echo "0")
            DESTROY_COUNT=$(grep -c "will be destroyed" tfplan-${{ matrix.environment }}.txt || echo "0")
            
            echo "üìä Plan Summary for ${{ matrix.environment }}:"
            echo "  Resources to add: $ADD_COUNT"
            echo "  Resources to change: $CHANGE_COUNT"
            echo "  Resources to destroy: $DESTROY_COUNT"
            
            # Generate plan summary
            cat > plan-summary-${{ matrix.environment }}.md << EOF
          # Terraform Plan Summary - ${{ matrix.environment }}
          
          ## Resource Changes
          - **Add**: $ADD_COUNT resources
          - **Change**: $CHANGE_COUNT resources  
          - **Destroy**: $DESTROY_COUNT resources
          
          ## Configuration
          - **Instance Type**: ${{ steps.env-config.outputs.instance-type }}
          - **Capacity**: ${{ steps.env-config.outputs.min-capacity }}-${{ steps.env-config.outputs.max-capacity }}
          - **Environment**: ${{ matrix.environment }}
          
          ## Next Steps
          - Review the plan carefully
          - Verify resource changes are expected
          - Apply changes if approved
          EOF
            
          elif [ $PLAN_EXIT_CODE -eq 0 ]; then
            echo "results=no-changes" >> $GITHUB_OUTPUT
            echo "‚úÖ No changes needed for ${{ matrix.environment }}"
          else
            echo "results=error" >> $GITHUB_OUTPUT
            echo "‚ùå Terraform plan failed for ${{ matrix.environment }}"
            exit 1
          fi

      - name: üí∞ Cost Estimation
        if: steps.plan.outputs.results == 'changes'
        run: |
          echo "üí∞ Estimating costs for ${{ matrix.environment }}..."
          
          # Install Infracost
          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
          
          cd terraform/${{ matrix.environment }}
          
          # Generate cost breakdown
          infracost breakdown \
            --path . \
            --terraform-plan-path tfplan-${{ matrix.environment }}.out \
            --format json \
            --out-file cost-${{ matrix.environment }}.json \
            || echo '{"totalMonthlyCost": "0"}' > cost-${{ matrix.environment }}.json
          
          MONTHLY_COST=$(jq -r '.totalMonthlyCost // "0"' cost-${{ matrix.environment }}.json)
          echo "üí∞ Estimated monthly cost for ${{ matrix.environment }}: $MONTHLY_COST USD"
          
          # Check cost limits
          case "${{ matrix.environment }}" in
            development) COST_LIMIT=100 ;;
            staging) COST_LIMIT=300 ;;
            production) COST_LIMIT=2000 ;;
            review-app) COST_LIMIT=50 ;;
          esac
          
          if (( $(echo "$MONTHLY_COST > $COST_LIMIT" | bc -l) )); then
            echo "üö® Cost exceeds limit for ${{ matrix.environment }} ($COST_LIMIT USD)"
            echo "üí∞ Estimated: $MONTHLY_COST USD"
            if [ "${{ matrix.environment }}" = "production" ]; then
              echo "‚ö†Ô∏è Production cost warning - manual review required"
            else
              echo "‚ùå Cost limit exceeded - blocking deployment"
              exit 1
            fi
          fi

      - name: üì§ Upload Plan Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: |
            terraform/${{ matrix.environment }}/tfplan-*.out
            terraform/${{ matrix.environment }}/tfplan-*.txt
            terraform/${{ matrix.environment }}/cost-*.json
            terraform/${{ matrix.environment }}/plan-summary-*.md
          retention-days: 30

  # ==========================================
  # TERRAFORM APPLY PER ENVIRONMENT
  # ==========================================
  terraform-apply:
    name: "üöÄ Terraform Apply"
    runs-on: ubuntu-latest
    needs: [terraform-matrix, terraform-plan]
    if: |
      needs.terraform-plan.result == 'success' &&
      (github.event.inputs.action == 'apply' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        environment: ${{ fromJson(needs.terraform-matrix.outputs.environments) }}
      fail-fast: false
    environment:
      name: ${{ matrix.environment }}
      url: https://${{ matrix.environment }}.unjucks.app
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: üîí Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: üîß Terraform Initialize
        run: |
          cd terraform/${{ matrix.environment }}
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_DEFAULT_REGION }}"

      - name: üì• Download Plan Artifacts
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: terraform/${{ matrix.environment }}/

      - name: üöÄ Terraform Apply
        run: |
          echo "üöÄ Applying Terraform plan for ${{ matrix.environment }}..."
          cd terraform/${{ matrix.environment }}
          
          # Determine approval mechanism
          AUTO_APPROVE="false"
          case "${{ matrix.environment }}" in
            development|review-app)
              AUTO_APPROVE="true"
              ;;
            staging|production)
              if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
                AUTO_APPROVE="true"
              fi
              ;;
          esac
          
          # Apply the plan
          if [ "$AUTO_APPROVE" = "true" ]; then
            echo "‚ö° Auto-applying for ${{ matrix.environment }}"
            terraform apply -auto-approve tfplan-${{ matrix.environment }}.out
          else
            echo "üë• Manual approval required for ${{ matrix.environment }}"
            terraform apply tfplan-${{ matrix.environment }}.out
          fi
          
          echo "‚úÖ Terraform apply completed for ${{ matrix.environment }}"

      - name: üìä Capture Terraform Outputs
        run: |
          echo "üìä Capturing Terraform outputs for ${{ matrix.environment }}..."
          cd terraform/${{ matrix.environment }}
          
          terraform output -json > terraform-outputs-${{ matrix.environment }}.json
          
          echo "üéØ Terraform Outputs for ${{ matrix.environment }}:"
          terraform output

      - name: üè• Post-Apply Health Check
        run: |
          echo "üè• Running health check for ${{ matrix.environment }}..."
          cd terraform/${{ matrix.environment }}
          
          # Extract health check URL from outputs
          if [ -f "terraform-outputs-${{ matrix.environment }}.json" ]; then
            HEALTH_URL=$(jq -r '.application_url.value // "https://${{ matrix.environment }}.unjucks.app"' terraform-outputs-${{ matrix.environment }}.json)
            
            echo "üîç Checking health endpoint: $HEALTH_URL/health"
            
            # Wait for infrastructure to be ready
            for i in {1..30}; do
              if curl -f -m 10 "$HEALTH_URL/health" > /dev/null 2>&1; then
                echo "‚úÖ Health check passed for ${{ matrix.environment }}"
                break
              else
                if [ $i -eq 30 ]; then
                  echo "‚ùå Health check failed for ${{ matrix.environment }}"
                  exit 1
                fi
                echo "‚è≥ Waiting for ${{ matrix.environment }} to be ready... ($i/30)"
                sleep 10
              fi
            done
          else
            echo "‚ö†Ô∏è No outputs file found, skipping health check"
          fi

      - name: üì§ Upload Apply Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-apply-${{ matrix.environment }}
          path: terraform/${{ matrix.environment }}/terraform-outputs-*.json
          retention-days: 30

  # ==========================================
  # ENVIRONMENT CLEANUP (DESTROY)
  # ==========================================
  terraform-destroy:
    name: üóëÔ∏è Terraform Destroy (${{ matrix.environment }})
    runs-on: ubuntu-latest
    needs: terraform-matrix
    if: github.event.inputs.action == 'destroy'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.terraform-matrix.outputs.environments) }}
      fail-fast: false
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: üîí Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: üîß Terraform Initialize
        run: |
          cd terraform/${{ matrix.environment }}
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_DEFAULT_REGION }}"

      - name: ‚ö†Ô∏è Pre-Destruction Safety Check
        run: |
          echo "‚ö†Ô∏è Running pre-destruction safety check for ${{ matrix.environment }}..."
          
          # Prevent accidental production destruction
          if [ "${{ matrix.environment }}" = "production" ] && [ "${{ github.actor }}" != "admin" ]; then
            echo "üö´ Production destruction requires admin privileges"
            exit 1
          fi
          
          # Require confirmation for staging/production
          if [ "${{ matrix.environment }}" = "production" ] || [ "${{ matrix.environment }}" = "staging" ]; then
            echo "‚ö†Ô∏è Destroying ${{ matrix.environment }} environment"
            echo "This action cannot be undone!"
          fi

      - name: üóëÔ∏è Terraform Destroy
        run: |
          echo "üóëÔ∏è Destroying infrastructure for ${{ matrix.environment }}..."
          cd terraform/${{ matrix.environment }}
          
          terraform destroy -auto-approve \
            -var="environment=${{ matrix.environment }}" \
            -var="instance_type=t3.micro" \
            -var="min_capacity=0" \
            -var="max_capacity=0"
          
          echo "‚úÖ Infrastructure destroyed for ${{ matrix.environment }}"

  # ==========================================
  # ENVIRONMENT SUMMARY REPORT
  # ==========================================
  environment-summary:
    name: üìã Environment Summary Report
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-plan, terraform-apply, terraform-destroy]
    if: always()
    steps:
      - name: üìã Generate Environment Summary
        run: |
          echo "üìã Generating environment summary report..."
          
          cat > environment-summary.md << 'EOF'
          # üåç Terraform Environment Management Report
          
          **Pipeline Run**: ${{ github.run_id }}
          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Trigger**: ${{ github.event_name }}
          **Action**: ${{ github.event.inputs.action || 'automated' }}
          
          ## üìä Environment Status
          
          | Environment | Validation | Planning | Apply | Status |
          |-------------|------------|----------|-------|--------|
          | Development | ${{ needs.terraform-validate.result }} | ${{ needs.terraform-plan.result }} | ${{ needs.terraform-apply.result || 'N/A' }} | üü¢ |
          | Staging | ${{ needs.terraform-validate.result }} | ${{ needs.terraform-plan.result }} | ${{ needs.terraform-apply.result || 'N/A' }} | üü° |
          | Production | ${{ needs.terraform-validate.result }} | ${{ needs.terraform-plan.result }} | ${{ needs.terraform-apply.result || 'N/A' }} | üî¥ |
          
          ## üéØ Key Results
          
          - **Validation**: Infrastructure code validation completed
          - **Planning**: Terraform plans generated and reviewed
          - **Security**: Security scans completed for all environments
          - **Cost Control**: Cost estimates within limits
          
          ## üìö Artifacts
          
          - Terraform plans and outputs
          - Security scan results
          - Cost estimation reports
          - Environment configurations
          
          ## üîÑ Next Steps
          
          1. Review any failed validations
          2. Apply approved plans to target environments
          3. Monitor deployed infrastructure
          4. Update environment documentation
          
          ---
          
          *Generated by Terraform Environment Management Pipeline*
          EOF
          
          echo "üìã Environment summary report generated"

      - name: üì§ Upload Summary Report
        uses: actions/upload-artifact@v4
        with:
          name: environment-summary-report
          path: environment-summary.md
          retention-days: 90