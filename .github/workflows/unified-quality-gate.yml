name: 🏛️ Unified Quality Gate - Fortune 5 Standards

on:
  push:
    branches: [main, develop, feature/*, release/*]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 6 * * 1' # Weekly Monday 6 AM UTC
  workflow_dispatch:
    inputs:
      validation_tier:
        description: 'Quality validation tier'
        required: true
        default: 'enterprise'
        type: choice
        options:
          - 'basic'
          - 'enterprise'
          - 'fortune_5'
          - 'compliance_audit'
      force_full_scan:
        description: 'Force comprehensive scan (overrides smart detection)'
        required: false
        default: false
        type: boolean

env:
  # Fortune 5 Quality Thresholds
  COVERAGE_THRESHOLD_LINES: '85'
  COVERAGE_THRESHOLD_FUNCTIONS: '90'
  COVERAGE_THRESHOLD_BRANCHES: '80'
  COVERAGE_THRESHOLD_STATEMENTS: '85'
  
  # Code Quality Standards
  COMPLEXITY_THRESHOLD: '10'
  DUPLICATION_THRESHOLD: '3'
  MAINTAINABILITY_THRESHOLD: 'A'
  TECHNICAL_DEBT_RATIO_THRESHOLD: '5'
  
  # Security Standards
  SECURITY_VULNERABILITY_THRESHOLD: 'none'
  DEPENDENCY_SCAN_LEVEL: 'strict'
  
  # Performance Standards
  PERFORMANCE_BUDGET_JS: '250kb'
  PERFORMANCE_BUDGET_CSS: '50kb'
  LOAD_TIME_THRESHOLD: '2000ms'
  
  # Documentation Standards
  DOCUMENTATION_COVERAGE_THRESHOLD: '80'
  API_DOCUMENTATION_THRESHOLD: '95'

concurrency:
  group: quality-gate-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # VALIDATION TIER DETECTION & CONFIGURATION
  # ============================================================================
  configure-validation:
    name: 🔧 Configure Validation Tier
    runs-on: ubuntu-latest
    outputs:
      validation_tier: ${{ steps.config.outputs.validation_tier }}
      full_scan_required: ${{ steps.config.outputs.full_scan_required }}
      changed_files: ${{ steps.changes.outputs.changed_files }}
      is_hotfix: ${{ steps.config.outputs.is_hotfix }}
      is_security_fix: ${{ steps.config.outputs.is_security_fix }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔍 Detect changes and determine validation tier
        id: config
        run: |
          # Determine validation tier based on context
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TIER="${{ github.event.inputs.validation_tier }}"
            FULL_SCAN="${{ github.event.inputs.force_full_scan }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TIER="fortune_5"
            FULL_SCAN="true"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            TIER="enterprise"
            FULL_SCAN="false"
          elif [[ "${{ github.head_ref }}" =~ ^(hotfix|security)/ ]]; then
            TIER="fortune_5"
            FULL_SCAN="true"
          else
            TIER="enterprise"
            FULL_SCAN="false"
          fi
          
          # Check for security-related changes
          SECURITY_FILES=$(git diff --name-only HEAD~1 2>/dev/null | grep -E "(security|auth|crypto|token|password|secret)" || echo "")
          IS_SECURITY_FIX="false"
          if [[ -n "$SECURITY_FILES" ]]; then
            IS_SECURITY_FIX="true"
            TIER="fortune_5"
            FULL_SCAN="true"
          fi
          
          # Check for hotfix
          IS_HOTFIX="false"
          if [[ "${{ github.head_ref }}" =~ ^hotfix/ ]] || [[ "${{ github.ref }}" =~ hotfix ]]; then
            IS_HOTFIX="true"
          fi
          
          echo "validation_tier=$TIER" >> $GITHUB_OUTPUT
          echo "full_scan_required=$FULL_SCAN" >> $GITHUB_OUTPUT
          echo "is_hotfix=$IS_HOTFIX" >> $GITHUB_OUTPUT
          echo "is_security_fix=$IS_SECURITY_FIX" >> $GITHUB_OUTPUT
          
          echo "🎯 Validation Tier: $TIER"
          echo "🔍 Full Scan: $FULL_SCAN"
          echo "🚨 Security Fix: $IS_SECURITY_FIX"
          echo "⚡ Hotfix: $IS_HOTFIX"
          
      - name: 📊 Analyze changed files
        id: changes
        run: |
          if [[ "${{ steps.config.outputs.full_scan_required }}" == "true" ]]; then
            echo "changed_files=ALL" >> $GITHUB_OUTPUT
          else
            # Smart detection of changed files
            CHANGED_FILES=$(git diff --name-only HEAD~1 2>/dev/null | tr '\n' ',' | sed 's/,$//' || echo "ALL")
            echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          fi

  # ============================================================================
  # FORTUNE 5 CODE COVERAGE VALIDATION
  # ============================================================================
  coverage-validation:
    name: 🛡️ Coverage Validation (Fortune 5)
    runs-on: ubuntu-latest
    needs: configure-validation
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g c8 nyc
          
      - name: 🔧 Setup Claude Flow coordination
        run: |
          npx claude-flow@alpha hooks pre-task --description "Fortune 5 code coverage validation"
          
      - name: 🧪 Run comprehensive test suite with coverage
        run: |
          # Multi-tier coverage analysis
          echo "🧪 Running comprehensive test coverage..."
          
          # Unit tests with coverage
          c8 --reporter=json --reporter=lcov --reporter=text-summary \
             --exclude='**/tests/**' \
             --exclude='**/*.test.js' \
             --exclude='**/*.spec.js' \
             --exclude='**/node_modules/**' \
             --exclude='**/coverage/**' \
             --include='src/**/*.js' \
             --all \
             npm test || true
             
          # Integration tests coverage
          if [[ "${{ needs.configure-validation.outputs.validation_tier }}" == "fortune_5" ]]; then
            c8 --reporter=json --reporter=lcov \
               --temp-directory=./coverage-integration \
               npm run test:integration || true
          fi
          
      - name: 📊 Process coverage results
        id: coverage
        run: |
          echo "## 🛡️ Code Coverage Report - Fortune 5 Standards" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f coverage/coverage-summary.json ]]; then
            LINES_PCT=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
            FUNCTIONS_PCT=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
            BRANCHES_PCT=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
            STATEMENTS_PCT=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
            
            echo "### 📈 Coverage Metrics" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Current | Threshold | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|---------|-----------|--------|" >> $GITHUB_STEP_SUMMARY
            
            # Lines coverage
            if (( $(echo "$LINES_PCT >= $COVERAGE_THRESHOLD_LINES" | bc -l) )); then
              echo "| Lines | ${LINES_PCT}% | ${COVERAGE_THRESHOLD_LINES}% | ✅ PASS |" >> $GITHUB_STEP_SUMMARY
              LINES_PASS="true"
            else
              echo "| Lines | ${LINES_PCT}% | ${COVERAGE_THRESHOLD_LINES}% | ❌ FAIL |" >> $GITHUB_STEP_SUMMARY
              LINES_PASS="false"
            fi
            
            # Functions coverage
            if (( $(echo "$FUNCTIONS_PCT >= $COVERAGE_THRESHOLD_FUNCTIONS" | bc -l) )); then
              echo "| Functions | ${FUNCTIONS_PCT}% | ${COVERAGE_THRESHOLD_FUNCTIONS}% | ✅ PASS |" >> $GITHUB_STEP_SUMMARY
              FUNCTIONS_PASS="true"
            else
              echo "| Functions | ${FUNCTIONS_PCT}% | ${COVERAGE_THRESHOLD_FUNCTIONS}% | ❌ FAIL |" >> $GITHUB_STEP_SUMMARY
              FUNCTIONS_PASS="false"
            fi
            
            # Branches coverage
            if (( $(echo "$BRANCHES_PCT >= $COVERAGE_THRESHOLD_BRANCHES" | bc -l) )); then
              echo "| Branches | ${BRANCHES_PCT}% | ${COVERAGE_THRESHOLD_BRANCHES}% | ✅ PASS |" >> $GITHUB_STEP_SUMMARY
              BRANCHES_PASS="true"
            else
              echo "| Branches | ${BRANCHES_PCT}% | ${COVERAGE_THRESHOLD_BRANCHES}% | ❌ FAIL |" >> $GITHUB_STEP_SUMMARY
              BRANCHES_PASS="false"
            fi
            
            # Statements coverage
            if (( $(echo "$STATEMENTS_PCT >= $COVERAGE_THRESHOLD_STATEMENTS" | bc -l) )); then
              echo "| Statements | ${STATEMENTS_PCT}% | ${COVERAGE_THRESHOLD_STATEMENTS}% | ✅ PASS |" >> $GITHUB_STEP_SUMMARY
              STATEMENTS_PASS="true"
            else
              echo "| Statements | ${STATEMENTS_PCT}% | ${COVERAGE_THRESHOLD_STATEMENTS}% | ❌ FAIL |" >> $GITHUB_STEP_SUMMARY
              STATEMENTS_PASS="false"
            fi
            
            # Set outputs
            echo "lines_coverage=$LINES_PCT" >> $GITHUB_OUTPUT
            echo "functions_coverage=$FUNCTIONS_PCT" >> $GITHUB_OUTPUT
            echo "branches_coverage=$BRANCHES_PCT" >> $GITHUB_OUTPUT
            echo "statements_coverage=$STATEMENTS_PCT" >> $GITHUB_OUTPUT
            echo "coverage_passed=$([[ \"$LINES_PASS\" == \"true\" && \"$FUNCTIONS_PASS\" == \"true\" && \"$BRANCHES_PASS\" == \"true\" && \"$STATEMENTS_PASS\" == \"true\" ]] && echo \"true\" || echo \"false\")" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Coverage report not generated" >> $GITHUB_STEP_SUMMARY
            echo "coverage_passed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 🚨 Fortune 5 Coverage Quality Gate
        if: steps.coverage.outputs.coverage_passed == 'false' && needs.configure-validation.outputs.validation_tier == 'fortune_5'
        run: |
          echo "❌ Fortune 5 coverage standards not met"
          echo "Lines: ${{ steps.coverage.outputs.lines_coverage }}% (required: ${COVERAGE_THRESHOLD_LINES}%)"
          echo "Functions: ${{ steps.coverage.outputs.functions_coverage }}% (required: ${COVERAGE_THRESHOLD_FUNCTIONS}%)"
          echo "Branches: ${{ steps.coverage.outputs.branches_coverage }}% (required: ${COVERAGE_THRESHOLD_BRANCHES}%)"
          echo "Statements: ${{ steps.coverage.outputs.statements_coverage }}% (required: ${COVERAGE_THRESHOLD_STATEMENTS}%)"
          exit 1
          
      - name: 📤 Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-fortune5
          path: |
            coverage/
            coverage-integration/
          retention-days: 30
          
      - name: 🔄 Coordination hooks
        if: always()
        run: |
          npx claude-flow@alpha hooks post-task --task-id "fortune5-coverage"
          npx claude-flow@alpha hooks notify --message "Coverage validation: ${{ steps.coverage.outputs.coverage_passed }}"

  # ============================================================================
  # ADVANCED SECURITY SCANNING
  # ============================================================================
  security-validation:
    name: 🔒 Security Validation (Enterprise)
    runs-on: ubuntu-latest
    needs: configure-validation
    timeout-minutes: 25
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🔧 Setup security scanning tools
        run: |
          # Install enterprise security tools
          npm install -g @microsoft/eslint-plugin-sdl semgrep snyk
          
      - name: 🔍 SAST Security Analysis
        run: |
          echo "🔍 Static Application Security Testing..."
          
          # ESLint security plugin
          npx eslint --config .eslintrc.security.js src/ || true
          
          # Semgrep security rules
          semgrep --config=auto --json --output=semgrep-report.json src/ || true
          
          # Custom security patterns
          semgrep --config=.semgrep-rules.yml --json --output=custom-security.json src/ || true
          
      - name: 🔐 Dependency vulnerability scan
        run: |
          echo "🔐 Scanning dependencies for vulnerabilities..."
          
          # npm audit with strict settings
          npm audit --audit-level=moderate --json > npm-audit.json || true
          
          # Snyk scan (if available)
          if command -v snyk &> /dev/null; then
            snyk test --json > snyk-report.json || true
          fi
          
      - name: 📊 Process security results
        id: security
        run: |
          echo "## 🔒 Security Validation Report" >> $GITHUB_STEP_SUMMARY
          
          # Process semgrep results
          if [[ -f semgrep-report.json ]]; then
            HIGH_SEVERITY=$(cat semgrep-report.json | jq '[.results[] | select(.extra.severity == "ERROR")] | length')
            MEDIUM_SEVERITY=$(cat semgrep-report.json | jq '[.results[] | select(.extra.severity == "WARNING")] | length')
            
            echo "### 🔍 SAST Results" >> $GITHUB_STEP_SUMMARY
            echo "- 🔴 High Severity: $HIGH_SEVERITY" >> $GITHUB_STEP_SUMMARY
            echo "- 🟡 Medium Severity: $MEDIUM_SEVERITY" >> $GITHUB_STEP_SUMMARY
            
            echo "high_severity_issues=$HIGH_SEVERITY" >> $GITHUB_OUTPUT
          else
            echo "high_severity_issues=0" >> $GITHUB_OUTPUT
          fi
          
          # Process npm audit results
          if [[ -f npm-audit.json ]]; then
            CRITICAL_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
            HIGH_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
            
            echo "### 🔐 Dependency Vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "- 🔴 Critical: $CRITICAL_VULNS" >> $GITHUB_STEP_SUMMARY
            echo "- 🟠 High: $HIGH_VULNS" >> $GITHUB_STEP_SUMMARY
            
            echo "critical_vulns=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
            echo "high_vulns=$HIGH_VULNS" >> $GITHUB_OUTPUT
          else
            echo "critical_vulns=0" >> $GITHUB_OUTPUT
            echo "high_vulns=0" >> $GITHUB_OUTPUT
          fi
          
      - name: 🚨 Security Quality Gate
        if: |
          (steps.security.outputs.critical_vulns > 0 || steps.security.outputs.high_severity_issues > 0) &&
          (needs.configure-validation.outputs.validation_tier == 'fortune_5' || needs.configure-validation.outputs.is_security_fix == 'true')
        run: |
          echo "❌ Security quality gate failed"
          echo "Critical vulnerabilities: ${{ steps.security.outputs.critical_vulns }}"
          echo "High severity SAST issues: ${{ steps.security.outputs.high_severity_issues }}"
          echo "Fortune 5 security standards require zero critical/high severity issues"
          exit 1
          
      - name: 📤 Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            semgrep-report.json
            custom-security.json
            npm-audit.json
            snyk-report.json
          retention-days: 90

  # ============================================================================
  # CODE QUALITY & COMPLEXITY ANALYSIS
  # ============================================================================
  quality-analysis:
    name: 📐 Quality Analysis (Advanced)
    runs-on: ubuntu-latest
    needs: configure-validation
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g jscpd complexity-report
          
      - name: 🧠 Complexity analysis
        run: |
          echo "🧠 Analyzing code complexity..."
          
          # Cyclomatic complexity
          complexity-report --format json --output complexity-report.json src/ || true
          
          # Cognitive complexity via ESLint
          npx eslint --format json --output-file cognitive-complexity.json \
            --config .eslintrc.complexity.js src/ || true
            
      - name: 🔄 Duplication analysis
        run: |
          echo "🔄 Analyzing code duplication..."
          
          jscpd --format json --output ./duplication-report.json \
            --threshold $DUPLICATION_THRESHOLD \
            --gitignore \
            src/ || true
            
      - name: 📊 Process quality metrics
        id: quality
        run: |
          echo "## 📐 Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Process complexity
          if [[ -f complexity-report.json ]]; then
            AVG_COMPLEXITY=$(cat complexity-report.json | jq '.summary.average // 0')
            MAX_COMPLEXITY=$(cat complexity-report.json | jq '.summary.maximum // 0')
            
            echo "### 🧠 Complexity Metrics" >> $GITHUB_STEP_SUMMARY
            echo "- Average Complexity: $AVG_COMPLEXITY" >> $GITHUB_STEP_SUMMARY
            echo "- Maximum Complexity: $MAX_COMPLEXITY" >> $GITHUB_STEP_SUMMARY
            
            COMPLEXITY_PASS="true"
            if (( $(echo "$MAX_COMPLEXITY > $COMPLEXITY_THRESHOLD" | bc -l) )); then
              COMPLEXITY_PASS="false"
            fi
            
            echo "complexity_passed=$COMPLEXITY_PASS" >> $GITHUB_OUTPUT
            echo "max_complexity=$MAX_COMPLEXITY" >> $GITHUB_OUTPUT
          else
            echo "complexity_passed=true" >> $GITHUB_OUTPUT
          fi
          
          # Process duplication
          if [[ -f duplication-report.json ]]; then
            DUPLICATION_PCT=$(cat duplication-report.json | jq '.statistics.total.percentage // 0')
            
            echo "### 🔄 Duplication Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- Code Duplication: ${DUPLICATION_PCT}%" >> $GITHUB_STEP_SUMMARY
            
            DUPLICATION_PASS="true"
            if (( $(echo "$DUPLICATION_PCT > $DUPLICATION_THRESHOLD" | bc -l) )); then
              DUPLICATION_PASS="false"
            fi
            
            echo "duplication_passed=$DUPLICATION_PASS" >> $GITHUB_OUTPUT
          else
            echo "duplication_passed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: 🚨 Quality Gates
        if: |
          (steps.quality.outputs.complexity_passed == 'false' || steps.quality.outputs.duplication_passed == 'false') &&
          needs.configure-validation.outputs.validation_tier == 'fortune_5'
        run: |
          echo "❌ Code quality standards not met"
          echo "Maximum complexity: ${{ steps.quality.outputs.max_complexity }} (threshold: $COMPLEXITY_THRESHOLD)"
          exit 1

  # ============================================================================
  # PERFORMANCE VALIDATION
  # ============================================================================
  performance-validation:
    name: ⚡ Performance Validation
    runs-on: ubuntu-latest
    needs: configure-validation
    if: needs.configure-validation.outputs.validation_tier == 'fortune_5' || needs.configure-validation.outputs.full_scan_required == 'true'
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g lighthouse bundlesize webpack-bundle-analyzer
          
      - name: 📦 Bundle analysis
        run: |
          echo "📦 Analyzing bundle size..."
          
          # Build for production
          npm run build || true
          
          # Bundle size analysis
          bundlesize || true
          
      - name: ⚡ Performance benchmarks
        run: |
          echo "⚡ Running performance benchmarks..."
          
          # CLI performance tests
          npm run benchmark:cli || true
          
          # Template generation performance
          npm run benchmark:templates || true
          
      - name: 📊 Performance summary
        run: |
          echo "## ⚡ Performance Validation" >> $GITHUB_STEP_SUMMARY
          echo "- Bundle analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "- Performance benchmarks executed" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # UNIFIED QUALITY GATE SUMMARY
  # ============================================================================
  quality-gate-summary:
    name: 🎯 Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [configure-validation, coverage-validation, security-validation, quality-analysis]
    if: always()
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🎯 Generate comprehensive summary
        id: summary
        run: |
          echo "# 🏛️ Unified Quality Gate - Fortune 5 Standards" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔧 Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation Tier**: ${{ needs.configure-validation.outputs.validation_tier }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Full Scan**: ${{ needs.configure-validation.outputs.full_scan_required }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Fix**: ${{ needs.configure-validation.outputs.is_security_fix }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Hotfix**: ${{ needs.configure-validation.outputs.is_hotfix }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Coverage
          COVERAGE_STATUS="${{ needs.coverage-validation.result }}"
          if [[ "$COVERAGE_STATUS" == "success" ]]; then
            echo "| 🛡️ Coverage | ✅ PASS | All thresholds met |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🛡️ Coverage | ❌ FAIL | Below Fortune 5 standards |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security
          SECURITY_STATUS="${{ needs.security-validation.result }}"
          if [[ "$SECURITY_STATUS" == "success" ]]; then
            echo "| 🔒 Security | ✅ PASS | No critical vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔒 Security | ❌ FAIL | Security issues detected |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Quality
          QUALITY_STATUS="${{ needs.quality-analysis.result }}"
          if [[ "$QUALITY_STATUS" == "success" ]]; then
            echo "| 📐 Quality | ✅ PASS | Code quality standards met |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 📐 Quality | ❌ FAIL | Quality issues detected |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "$COVERAGE_STATUS" == "success" && "$SECURITY_STATUS" == "success" && "$QUALITY_STATUS" == "success" ]]; then
            echo "## 🏆 Overall Status: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
            echo "All Fortune 5 quality standards have been met." >> $GITHUB_STEP_SUMMARY
            echo "quality_gate_passed=true" >> $GITHUB_OUTPUT
          else
            echo "## 🚨 Overall Status: ❌ FAILED" >> $GITHUB_STEP_SUMMARY
            echo "One or more quality gates failed to meet Fortune 5 standards." >> $GITHUB_STEP_SUMMARY
            echo "quality_gate_passed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 🚨 Final Quality Gate
        if: steps.summary.outputs.quality_gate_passed == 'false' && needs.configure-validation.outputs.validation_tier == 'fortune_5'
        run: |
          echo "❌ Fortune 5 quality gate validation failed"
          echo "This code does not meet the required standards for production deployment"
          exit 1
          
      - name: 🎉 Quality Gate Success
        if: steps.summary.outputs.quality_gate_passed == 'true'
        run: |
          echo "✅ Fortune 5 quality gate validation passed"
          echo "Code meets all required standards for production deployment"
          
      - name: 🔄 Final coordination
        if: always()
        run: |
          npx claude-flow@alpha hooks session-end --export-metrics true
          npx claude-flow@alpha hooks notify --message "Quality gate validation completed: ${{ steps.summary.outputs.quality_gate_passed }}"

  # ============================================================================
  # AUTO-REMEDIATION (Fortune 5 Only)
  # ============================================================================
  auto-remediation:
    name: 🔧 Auto-Remediation
    runs-on: ubuntu-latest
    needs: [configure-validation, quality-gate-summary]
    if: |
      needs.quality-gate-summary.outputs.quality_gate_passed == 'false' &&
      needs.configure-validation.outputs.validation_tier == 'fortune_5' &&
      github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🔧 Apply automated fixes
        run: |
          echo "🔧 Applying automated quality fixes..."
          
          # ESLint auto-fixes
          npx eslint --fix src/ || true
          
          # Prettier formatting
          npx prettier --write "src/**/*.js" || true
          
          # Security auto-fixes (if available)
          npm audit fix || true
          
      - name: 💾 Commit auto-fixes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Quality Gate Bot"
          
          if git diff --quiet; then
            echo "No automated fixes applied"
          else
            git add .
            git commit -m "🔧 Auto-fix: Quality gate remediation

            - Applied ESLint auto-fixes
            - Standardized code formatting with Prettier  
            - Fixed security vulnerabilities where possible
            - Automated via Fortune 5 Quality Gate

            Co-authored-by: quality-gate-bot <quality-gate-bot@users.noreply.github.com>"
            git push
          fi