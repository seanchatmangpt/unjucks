name: Security Scanning & Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 4 * * 1' # Weekly on Mondays at 4 AM UTC
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - sast
          - dependencies
          - secrets

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Static Application Security Testing (SAST)
  sast-analysis:
    name: SAST Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'sast' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9.12.0'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: Custom SAST scan
        run: npm run security:sast
        continue-on-error: true

      - name: Upload SAST results
        uses: actions/upload-artifact@v4
        with:
          name: sast-results
          path: |
            security-reports/
            sast-results.json

  # Dependency Security Scanning
  dependency-scan:
    name: Dependency Security
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9.12.0'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: Custom dependency scan
        run: npm run security:deps

      - name: Dependency-Track SBOM
        run: |
          npm list --depth=0 --json > package-dependencies.json
          echo "📦 Generated software bill of materials (SBOM)"

      - name: Check for known vulnerabilities
        run: |
          # Check for specific vulnerable packages
          echo "🔍 Checking for known vulnerable dependencies..."
          
          # Parse npm audit results
          if [ -f npm-audit.json ]; then
            vulnerabilities=$(cat npm-audit.json | jq '.metadata.vulnerabilities.total // 0')
            if [ "$vulnerabilities" -gt 0 ]; then
              echo "⚠️ Found $vulnerabilities vulnerabilities"
              cat npm-audit.json | jq '.vulnerabilities'
            else
              echo "✅ No vulnerabilities found"
            fi
          fi

      - name: Upload dependency results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            npm-audit.json
            package-dependencies.json
            dependency-reports/

  # Secrets Scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Secret scanning with truffleHog
        run: |
          # Install truffleHog
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
          # Scan for secrets
          trufflehog git file://. --json --no-update > secrets-scan.json || true
          
          # Check results
          if [ -s secrets-scan.json ]; then
            echo "⚠️ Potential secrets found:"
            cat secrets-scan.json | jq -r '.Raw' | head -10
          else
            echo "✅ No secrets detected"
          fi

      - name: Manual pattern check
        run: |
          echo "🔍 Manual pattern check for common secrets..."
          
          # Check for common secret patterns
          patterns=(
            "password\s*=\s*['\"][^'\"]{8,}['\"]"
            "api_key\s*=\s*['\"][^'\"]{20,}['\"]"
            "secret\s*=\s*['\"][^'\"]{10,}['\"]"
            "token\s*=\s*['\"][^'\"]{20,}['\"]"
            "private_key"
            "-----BEGIN"
          )
          
          found_secrets=false
          for pattern in "${patterns[@]}"; do
            if grep -r -E -i "$pattern" src/ tests/ --exclude-dir=node_modules || true; then
              found_secrets=true
              echo "⚠️ Found potential secret pattern: $pattern"
            fi
          done
          
          if [ "$found_secrets" = false ]; then
            echo "✅ No hardcoded secrets found"
          fi

      - name: Environment variable check
        run: |
          echo "🔍 Checking for environment variable usage..."
          
          # Look for proper env usage patterns
          if grep -r "process.env" src/ --include="*.js" | grep -v "process.env.NODE_ENV"; then
            echo "✅ Environment variables are used appropriately"
          fi
          
          # Check for hardcoded URLs/endpoints
          if grep -r "http://" src/ --include="*.js" | grep -v "localhost" || \
             grep -r "https://api\." src/ --include="*.js"; then
            echo "⚠️ Found hardcoded URLs - consider using environment variables"
          fi

      - name: Upload secrets scan results
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scan-results
          path: |
            secrets-scan.json
            secrets-reports/

  # License Compliance
  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9.12.0'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: License check
        run: |
          echo "📄 Checking license compliance..."
          
          # Generate license report
          npx license-checker --json > license-report.json
          
          # Check for problematic licenses
          prohibited_licenses=("GPL" "AGPL" "LGPL" "UNLICENSED")
          
          echo "🔍 Scanning for prohibited licenses..."
          license_issues=false
          
          for license in "${prohibited_licenses[@]}"; do
            if grep -i "$license" license-report.json; then
              echo "⚠️ Found potentially problematic license: $license"
              license_issues=true
            fi
          done
          
          if [ "$license_issues" = false ]; then
            echo "✅ All licenses are compatible"
          fi
          
          # Count total dependencies and licenses
          total_deps=$(cat license-report.json | jq 'keys | length')
          echo "📊 Total dependencies: $total_deps"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-report
          path: license-report.json

  # Supply Chain Security
  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9.12.0'

      - name: Package integrity check
        run: |
          echo "🔐 Verifying package integrity..."
          
          # Check package-lock.json integrity
          if [ -f package-lock.json ]; then
            npm ci --dry-run
            echo "✅ Package-lock integrity verified"
          fi
          
          # Check for package inconsistencies
          npm ls --depth=0 || echo "⚠️ Dependency tree issues detected"

      - name: Malicious package detection
        run: |
          echo "🕵️ Scanning for suspicious packages..."
          
          # Check for packages with suspicious names or patterns
          suspicious_patterns=(
            ".*typo.*"
            ".*fake.*"
            ".*malicious.*"
            ".*trojan.*"
            ".*backdoor.*"
          )
          
          npm list --depth=0 --json > package-tree.json
          
          found_suspicious=false
          for pattern in "${suspicious_patterns[@]}"; do
            if cat package-tree.json | jq -r '.dependencies | keys[]' | grep -E "$pattern"; then
              echo "⚠️ Suspicious package name pattern found: $pattern"
              found_suspicious=true
            fi
          done
          
          if [ "$found_suspicious" = false ]; then
            echo "✅ No suspicious packages detected"
          fi

  # Security Summary
  security-summary:
    name: Security Summary
    needs: [sast-analysis, dependency-scan, secrets-scan, license-compliance, supply-chain-security]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security report
        run: |
          echo "# 🛡️ Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date -u)" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          # Job results
          sast_result="${{ needs.sast-analysis.result }}"
          deps_result="${{ needs.dependency-scan.result }}"
          secrets_result="${{ needs.secrets-scan.result }}"
          license_result="${{ needs.license-compliance.result }}"
          supply_result="${{ needs.supply-chain-security.result }}"
          
          echo "## 📊 Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          echo "| Component | Status |" >> security-summary.md
          echo "|-----------|---------|" >> security-summary.md
          echo "| SAST Analysis | $sast_result |" >> security-summary.md
          echo "| Dependency Scan | $deps_result |" >> security-summary.md
          echo "| Secrets Scan | $secrets_result |" >> security-summary.md
          echo "| License Compliance | $license_result |" >> security-summary.md
          echo "| Supply Chain Security | $supply_result |" >> security-summary.md
          echo "" >> security-summary.md
          
          # Overall status
          if [[ "$sast_result" == "success" && \
                "$deps_result" == "success" && \
                "$secrets_result" == "success" && \
                "$license_result" == "success" && \
                "$supply_result" == "success" ]]; then
            echo "## ✅ Overall Status: PASSED" >> security-summary.md
            echo "All security checks have passed successfully." >> security-summary.md
          else
            echo "## ❌ Overall Status: FAILED" >> security-summary.md
            echo "One or more security checks have failed. Please review the results above." >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "---" >> security-summary.md
          echo "*Generated by GitHub Actions Security Scanning*" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              
              const { owner, repo } = context.repo;
              const pr_number = context.issue.number;
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr_number,
                body: summary
              });
            } catch (error) {
              console.log('Could not post security summary:', error.message);
            }

      - name: Fail if security issues found
        run: |
          sast_result="${{ needs.sast-analysis.result }}"
          deps_result="${{ needs.dependency-scan.result }}"
          secrets_result="${{ needs.secrets-scan.result }}"
          license_result="${{ needs.license-compliance.result }}"
          supply_result="${{ needs.supply-chain-security.result }}"
          
          if [[ "$sast_result" != "success" || \
                "$deps_result" != "success" || \
                "$secrets_result" != "success" || \
                "$license_result" != "success" || \
                "$supply_result" != "success" ]]; then
            echo "❌ Security scan failed - blocking merge"
            exit 1
          fi
          
          echo "✅ All security checks passed"