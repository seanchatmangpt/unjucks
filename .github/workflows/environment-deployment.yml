name: Environment-Specific Deployments

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
    tags:
      - 'v*'
      - '[0-9]*'
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
          - preview
      deployment_type:
        description: 'Deployment strategy'
        required: true
        default: 'rolling'
        type: choice
        options:
          - rolling
          - blue-green
          - canary
          - recreate
      force_deploy:
        description: 'Force deployment (skip safety checks)'
        required: false
        default: false
        type: boolean
      rollback_on_failure:
        description: 'Auto-rollback on deployment failure'
        required: false
        default: true
        type: boolean

env:
  CI: true
  NODE_OPTIONS: '--max-old-space-size=8192'
  DEPLOYMENT_TIMEOUT: '600'
  HEALTH_CHECK_RETRIES: '10'

jobs:
  # Determine deployment configuration
  deployment-config:
    name: Deployment Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      strategy: ${{ steps.config.outputs.strategy }}
      version: ${{ steps.config.outputs.version }}
      should_deploy: ${{ steps.config.outputs.should_deploy }}
      config_file: ${{ steps.config.outputs.config_file }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine deployment configuration
        id: config
        run: |
          # Determine target environment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.target_environment }}"
            STRATEGY="${{ github.event.inputs.deployment_type }}"
          elif [[ "${{ github.ref }}" =~ refs/tags/ ]]; then
            ENVIRONMENT="production"
            STRATEGY="blue-green"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="staging"
            STRATEGY="rolling"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENVIRONMENT="development"
            STRATEGY="recreate"
          elif [[ "${{ github.ref }}" =~ refs/heads/release/ ]]; then
            ENVIRONMENT="preview"
            STRATEGY="rolling"
          else
            ENVIRONMENT="development"
            STRATEGY="recreate"
          fi
          
          # Extract version
          if [[ "${{ github.ref }}" =~ refs/tags/ ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
          else
            VERSION=$(node -p "require('./package.json').version")-${GITHUB_SHA:0:8}
          fi
          
          # Determine config file
          case "$ENVIRONMENT" in
            "production")
              CONFIG_FILE="docker/configs/production.json"
              ;;
            "staging")
              CONFIG_FILE="generated/docker-compose.development.yml"
              ;;
            "development")
              CONFIG_FILE="generated/docker-compose.development.yml"
              ;;
            "preview")
              CONFIG_FILE="docker/docker-compose.testing.yml"
              ;;
            *)
              CONFIG_FILE="docker/docker-compose.validation.yml"
              ;;
          esac
          
          # Deployment decision logic
          SHOULD_DEPLOY="true"
          
          # Safety checks for production
          if [[ "$ENVIRONMENT" == "production" && "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
            if [[ ! "${{ github.ref }}" =~ refs/tags/ ]]; then
              echo "‚ö†Ô∏è Production deployments require tags"
              SHOULD_DEPLOY="false"
            fi
          fi
          
          # Output configuration
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "strategy=$STRATEGY" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "config_file=$CONFIG_FILE" >> $GITHUB_OUTPUT
          
          echo "Deployment Configuration:"
          echo "- Environment: $ENVIRONMENT"
          echo "- Strategy: $STRATEGY"
          echo "- Version: $VERSION"
          echo "- Should Deploy: $SHOULD_DEPLOY"
          echo "- Config File: $CONFIG_FILE"

  # Pre-deployment validation
  pre-deployment-validation:
    name: Pre-Deployment Validation
    needs: deployment-config
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: needs.deployment-config.outputs.should_deploy == 'true'
    environment:
      name: validation-${{ needs.deployment-config.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm run build:prepare

      - name: Environment-specific validation
        run: |
          ENVIRONMENT="${{ needs.deployment-config.outputs.environment }}"
          echo "üîç Running validation for $ENVIRONMENT environment..."
          
          case "$ENVIRONMENT" in
            "production")
              echo "Production validation..."
              # Comprehensive testing for production
              npm run test || echo "Tests completed with warnings"
              npm run security:scan || echo "Security scan completed"
              npm run build:validate
              npm run benchmark:full || echo "Benchmarks completed"
              ;;
            "staging")
              echo "Staging validation..."
              # Moderate testing for staging
              npm run test || echo "Tests completed"
              npm run security:scan || echo "Security scan completed"
              npm run build:validate
              ;;
            "development")
              echo "Development validation..."
              # Basic testing for development
              npm run build:validate
              npm run test || echo "Tests completed"
              ;;
            "preview")
              echo "Preview validation..."
              # Quick validation for preview
              npm run build:validate
              ;;
          esac
          
          echo "‚úÖ Pre-deployment validation completed"

      - name: Check deployment configuration
        run: |
          CONFIG_FILE="${{ needs.deployment-config.outputs.config_file }}"
          
          if [[ -f "$CONFIG_FILE" ]]; then
            echo "‚úÖ Configuration file found: $CONFIG_FILE"
            
            # Validate configuration based on file type
            if [[ "$CONFIG_FILE" =~ \.yml$ || "$CONFIG_FILE" =~ \.yaml$ ]]; then
              # Validate Docker Compose
              docker-compose -f "$CONFIG_FILE" config --quiet && \
                echo "‚úÖ Docker Compose configuration valid" || \
                echo "‚ùå Docker Compose configuration invalid"
            elif [[ "$CONFIG_FILE" =~ \.json$ ]]; then
              # Validate JSON
              jq empty "$CONFIG_FILE" && \
                echo "‚úÖ JSON configuration valid" || \
                echo "‚ùå JSON configuration invalid"
            fi
          else
            echo "‚ö†Ô∏è Configuration file not found: $CONFIG_FILE"
          fi

  # Development environment deployment
  deploy-development:
    name: Deploy to Development
    needs: [deployment-config, pre-deployment-validation]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: needs.deployment-config.outputs.environment == 'development'
    environment:
      name: development
      url: https://dev.unjucks.local
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to development
        run: |
          echo "üöÄ Deploying to development environment..."
          echo "Strategy: ${{ needs.deployment-config.outputs.strategy }}"
          echo "Version: ${{ needs.deployment-config.outputs.version }}"
          
          # Development deployment (local/Docker)
          export ENVIRONMENT="development"
          export UNJUCKS_VERSION="${{ needs.deployment-config.outputs.version }}"
          
          # Use recreate strategy for development
          if [[ -f "${{ needs.deployment-config.outputs.config_file }}" ]]; then
            docker-compose -f "${{ needs.deployment-config.outputs.config_file }}" down --volumes
            docker-compose -f "${{ needs.deployment-config.outputs.config_file }}" up -d --build
          else
            echo "Using fallback deployment method"
            # Fallback deployment logic
            docker run -d --name unjucks-dev \
              -e ENVIRONMENT=development \
              -p 3000:3000 \
              unjucks:dev || echo "Development container started"
          fi
          
          echo "‚úÖ Development deployment completed"

      - name: Development smoke tests
        run: |
          echo "üß™ Running development smoke tests..."
          
          # Wait for service
          sleep 15
          
          # Basic connectivity
          curl -f http://localhost:3000/health || echo "Health endpoint not available"
          
          # Container health
          docker ps | grep unjucks || echo "Container not running"
          
          echo "‚úÖ Development smoke tests completed"

  # Staging environment deployment
  deploy-staging:
    name: Deploy to Staging
    needs: [deployment-config, pre-deployment-validation]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: needs.deployment-config.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.unjucks.dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging (rolling)
        if: needs.deployment-config.outputs.strategy == 'rolling'
        run: |
          echo "üîÑ Rolling deployment to staging..."
          
          export ENVIRONMENT="staging"
          export UNJUCKS_VERSION="${{ needs.deployment-config.outputs.version }}"
          
          # Rolling update strategy
          docker-compose -f "${{ needs.deployment-config.outputs.config_file }}" pull
          docker-compose -f "${{ needs.deployment-config.outputs.config_file }}" up -d --no-recreate
          
          # Health check during rolling update
          for i in {1..10}; do
            if curl -f https://staging.unjucks.dev/health; then
              echo "Health check $i passed"
              break
            else
              echo "Health check $i failed, retrying..."
              sleep 10
            fi
          done
          
          echo "‚úÖ Rolling deployment completed"

      - name: Deploy to staging (blue-green)
        if: needs.deployment-config.outputs.strategy == 'blue-green'
        run: |
          echo "üîµüü¢ Blue-green deployment to staging..."
          
          export ENVIRONMENT="staging"
          export UNJUCKS_VERSION="${{ needs.deployment-config.outputs.version }}"
          
          # Blue-green deployment simulation
          echo "Deploying green environment..."
          docker-compose -f "${{ needs.deployment-config.outputs.config_file }}" up -d --scale unjucks=2
          
          # Health check green environment
          sleep 30
          
          # Switch traffic to green
          echo "Switching traffic to green environment..."
          docker-compose -f "${{ needs.deployment-config.outputs.config_file }}" up -d --scale unjucks=1
          
          echo "‚úÖ Blue-green deployment completed"

      - name: Staging integration tests
        run: |
          echo "ü§ñ Running staging integration tests..."
          
          # Extended testing for staging
          curl -f https://staging.unjucks.dev/health || echo "Health check failed"
          curl -f https://staging.unjucks.dev/api/status || echo "API check failed"
          
          # Functional tests
          docker exec $(docker ps -q -f name=unjucks | head -1) unjucks --version
          docker exec $(docker ps -q -f name=unjucks | head -1) unjucks list
          
          echo "‚úÖ Staging integration tests completed"

  # Production environment deployment
  deploy-production:
    name: Deploy to Production
    needs: [deployment-config, pre-deployment-validation]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: needs.deployment-config.outputs.environment == 'production'
    environment:
      name: production
      url: https://unjucks.dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Production safety checks
        run: |
          echo "üîí Running production safety checks..."
          
          VERSION="${{ needs.deployment-config.outputs.version }}"
          
          # Version validation
          if [[ ! "$VERSION" =~ ^[0-9]{4}\.[0-9]{1,2}\.[0-9]{1,2}$ ]]; then
            if [[ "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
              echo "‚ùå Invalid production version format: $VERSION"
              exit 1
            else
              echo "‚ö†Ô∏è Force deployment enabled - bypassing version check"
            fi
          fi
          
          # Check for breaking changes
          git log --oneline -n 10 | grep -i "breaking\|break" && \
            echo "‚ö†Ô∏è Breaking changes detected" || \
            echo "‚úÖ No breaking changes detected"
          
          echo "‚úÖ Production safety checks completed"

      - name: Deploy to production (blue-green)
        if: needs.deployment-config.outputs.strategy == 'blue-green'
        run: |
          echo "üîµüü¢ Blue-green deployment to production..."
          
          export ENVIRONMENT="production"
          export UNJUCKS_VERSION="${{ needs.deployment-config.outputs.version }}"
          
          # Production blue-green deployment
          echo "Phase 1: Deploy green environment"
          docker-compose -f "${{ needs.deployment-config.outputs.config_file }}" pull
          docker-compose -f "${{ needs.deployment-config.outputs.config_file }}" up -d --scale unjucks=2
          
          # Extensive health checks
          echo "Phase 2: Health validation"
          for i in {1..15}; do
            if curl -f https://unjucks.dev/health; then
              echo "Health check $i/15 passed"
            else
              echo "‚ùå Health check $i/15 failed"
              if [[ $i -eq 15 ]]; then
                echo "‚ùå Production health checks failed - aborting deployment"
                exit 1
              fi
            fi
            sleep 20
          done
          
          # Switch traffic
          echo "Phase 3: Traffic switch"
          docker-compose -f "${{ needs.deployment-config.outputs.config_file }}" up -d --scale unjucks=1
          
          echo "‚úÖ Blue-green production deployment completed"

      - name: Deploy to production (canary)
        if: needs.deployment-config.outputs.strategy == 'canary'
        run: |
          echo "üê• Canary deployment to production..."
          
          export ENVIRONMENT="production"
          export UNJUCKS_VERSION="${{ needs.deployment-config.outputs.version }}"
          
          # Canary deployment (10% traffic)
          echo "Phase 1: Deploy canary (10% traffic)"
          docker-compose -f "${{ needs.deployment-config.outputs.config_file }}" up -d --scale unjucks=10
          
          # Monitor canary for 5 minutes
          echo "Phase 2: Monitor canary performance"
          for i in {1..5}; do
            echo "Canary monitoring $i/5..."
            curl -f https://unjucks.dev/health || echo "Health check warning"
            sleep 60
          done
          
          # Full rollout
          echo "Phase 3: Full rollout"
          docker-compose -f "${{ needs.deployment-config.outputs.config_file }}" up -d --scale unjucks=1
          
          echo "‚úÖ Canary production deployment completed"

      - name: Production validation
        run: |
          echo "üè• Production validation..."
          
          # Comprehensive production validation
          curl -f https://unjucks.dev/health || echo "Health check failed"
          curl -f https://unjucks.dev/api/status || echo "API status failed"
          
          # Performance validation
          RESPONSE_TIME=$(curl -w "%{time_total}" -o /dev/null -s https://unjucks.dev/health)
          echo "Response time: ${RESPONSE_TIME}s"
          
          if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
            echo "‚ö†Ô∏è Slow response time detected"
          fi
          
          # Functional validation
          docker exec $(docker ps -q -f name=unjucks | head -1) unjucks --version
          docker exec $(docker ps -q -f name=unjucks | head -1) unjucks generate component production-test --dry
          
          echo "‚úÖ Production validation completed"

  # Preview environment deployment
  deploy-preview:
    name: Deploy to Preview
    needs: [deployment-config, pre-deployment-validation]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: needs.deployment-config.outputs.environment == 'preview'
    environment:
      name: preview-${{ github.run_number }}
      url: https://pr-${{ github.run_number }}.preview.unjucks.dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to preview environment
        run: |
          echo "üîç Deploying to preview environment..."
          
          PREVIEW_URL="https://pr-${{ github.run_number }}.preview.unjucks.dev"
          
          export ENVIRONMENT="preview"
          export UNJUCKS_VERSION="${{ needs.deployment-config.outputs.version }}"
          export PREVIEW_PORT="$((3000 + ${{ github.run_number }} % 1000))"
          
          # Preview deployment (temporary)
          docker run -d --name "unjucks-preview-${{ github.run_number }}" \
            -e ENVIRONMENT=preview \
            -e PORT="$PREVIEW_PORT" \
            -p "$PREVIEW_PORT:$PREVIEW_PORT" \
            unjucks:preview || echo "Preview container started"
          
          echo "‚úÖ Preview deployment completed"
          echo "Preview URL: $PREVIEW_URL"

      - name: Preview validation
        run: |
          echo "üîç Validating preview environment..."
          
          PREVIEW_PORT="$((3000 + ${{ github.run_number }} % 1000))"
          
          # Basic validation
          sleep 10
          curl -f "http://localhost:$PREVIEW_PORT/health" || echo "Preview health check failed"
          
          echo "‚úÖ Preview validation completed"

  # Rollback capability
  rollback-deployment:
    name: Rollback Deployment
    needs: [deployment-config, deploy-development, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: |
      failure() && 
      github.event.inputs.rollback_on_failure == 'true' && 
      (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    environment:
      name: rollback-${{ needs.deployment-config.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        run: |
          echo "‚è™ Rolling back deployment..."
          
          ENVIRONMENT="${{ needs.deployment-config.outputs.environment }}"
          CONFIG_FILE="${{ needs.deployment-config.outputs.config_file }}"
          
          echo "Rolling back $ENVIRONMENT environment"
          
          # Rollback strategy
          case "$ENVIRONMENT" in
            "production")
              # Production rollback to last known good version
              echo "Rolling back production to last stable version"
              docker-compose -f "$CONFIG_FILE" down
              docker-compose -f "$CONFIG_FILE" up -d --scale unjucks=1
              ;;
            "staging")
              # Staging rollback
              echo "Rolling back staging environment"
              docker-compose -f "$CONFIG_FILE" down
              docker-compose -f "$CONFIG_FILE" up -d
              ;;
            *)
              echo "Rolling back $ENVIRONMENT environment"
              docker-compose -f "$CONFIG_FILE" restart
              ;;
          esac
          
          echo "‚úÖ Rollback completed"

      - name: Verify rollback
        run: |
          echo "üîç Verifying rollback..."
          
          ENVIRONMENT="${{ needs.deployment-config.outputs.environment }}"
          
          case "$ENVIRONMENT" in
            "production")
              curl -f https://unjucks.dev/health || echo "Rollback verification failed"
              ;;
            "staging")
              curl -f https://staging.unjucks.dev/health || echo "Rollback verification failed"
              ;;
            *)
              docker ps | grep unjucks || echo "Container check failed"
              ;;
          esac
          
          echo "‚úÖ Rollback verification completed"

  # Deployment monitoring
  monitor-deployment:
    name: Monitor Deployment
    needs: [deployment-config, deploy-development, deploy-staging, deploy-production, deploy-preview]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      always() && 
      (needs.deploy-development.result == 'success' || 
       needs.deploy-staging.result == 'success' || 
       needs.deploy-production.result == 'success' || 
       needs.deploy-preview.result == 'success')
    steps:
      - name: Setup monitoring
        run: |
          echo "üìä Setting up deployment monitoring..."
          
          ENVIRONMENT="${{ needs.deployment-config.outputs.environment }}"
          VERSION="${{ needs.deployment-config.outputs.version }}"
          
          echo "Monitoring $ENVIRONMENT deployment (version: $VERSION)"

      - name: Extended monitoring
        run: |
          echo "üîç Extended monitoring for 20 minutes..."
          
          ENVIRONMENT="${{ needs.deployment-config.outputs.environment }}"
          
          case "$ENVIRONMENT" in
            "production")
              HEALTH_URL="https://unjucks.dev/health"
              ;;
            "staging")
              HEALTH_URL="https://staging.unjucks.dev/health"
              ;;
            "development")
              HEALTH_URL="http://localhost:3000/health"
              ;;
            "preview")
              PREVIEW_PORT="$((3000 + ${{ github.run_number }} % 1000))"
              HEALTH_URL="http://localhost:$PREVIEW_PORT/health"
              ;;
          esac
          
          # Monitor for 20 minutes (4 checks, 5 minutes apart)
          for i in {1..4}; do
            echo "Monitor check $i/4 at $(date)"
            
            if curl -f "$HEALTH_URL"; then
              echo "‚úÖ Health check passed"
            else
              echo "‚ùå Health check failed"
            fi
            
            # System resource check
            docker stats --no-stream || echo "Docker stats not available"
            
            sleep 300  # 5 minutes
          done
          
          echo "‚úÖ Extended monitoring completed"

  # Deployment status summary
  deployment-status:
    name: Deployment Status
    needs: [
      deployment-config,
      pre-deployment-validation,
      deploy-development,
      deploy-staging,
      deploy-production,
      deploy-preview,
      rollback-deployment,
      monitor-deployment
    ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment summary
        run: |
          echo "üöÄ Environment Deployment Summary"
          echo "=================================="
          echo "Environment: ${{ needs.deployment-config.outputs.environment }}"
          echo "Strategy: ${{ needs.deployment-config.outputs.strategy }}"
          echo "Version: ${{ needs.deployment-config.outputs.version }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo ""
          echo "Job Results:"
          echo "- Configuration: ${{ needs.deployment-config.result }}"
          echo "- Pre-validation: ${{ needs.pre-deployment-validation.result }}"
          echo "- Development: ${{ needs.deploy-development.result }}"
          echo "- Staging: ${{ needs.deploy-staging.result }}"
          echo "- Production: ${{ needs.deploy-production.result }}"
          echo "- Preview: ${{ needs.deploy-preview.result }}"
          echo "- Rollback: ${{ needs.rollback-deployment.result }}"
          echo "- Monitoring: ${{ needs.monitor-deployment.result }}"
          echo ""
          
          # Determine overall status
          ENVIRONMENT="${{ needs.deployment-config.outputs.environment }}"
          
          case "$ENVIRONMENT" in
            "development")
              DEPLOY_RESULT="${{ needs.deploy-development.result }}"
              URL="https://dev.unjucks.local"
              ;;
            "staging")
              DEPLOY_RESULT="${{ needs.deploy-staging.result }}"
              URL="https://staging.unjucks.dev"
              ;;
            "production")
              DEPLOY_RESULT="${{ needs.deploy-production.result }}"
              URL="https://unjucks.dev"
              ;;
            "preview")
              DEPLOY_RESULT="${{ needs.deploy-preview.result }}"
              URL="https://pr-${{ github.run_number }}.preview.unjucks.dev"
              ;;
            *)
              DEPLOY_RESULT="unknown"
              URL="unknown"
              ;;
          esac
          
          if [[ "$DEPLOY_RESULT" == "success" ]]; then
            echo "‚úÖ DEPLOYMENT SUCCESSFUL"
            echo "üåê Environment: $ENVIRONMENT"
            echo "üîó URL: $URL"
            echo "üìä Version: ${{ needs.deployment-config.outputs.version }}"
          elif [[ "${{ needs.rollback-deployment.result }}" == "success" ]]; then
            echo "‚è™ DEPLOYMENT FAILED - ROLLBACK SUCCESSFUL"
            echo "üåê Environment: $ENVIRONMENT"
            echo "üîó URL: $URL"
          else
            echo "‚ùå DEPLOYMENT FAILED"
            echo "Environment: $ENVIRONMENT"
            echo "Check logs for details"
            exit 1
          fi
