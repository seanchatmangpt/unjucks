---
name: 🔄 Blue-Green Deployment Pipeline

# Zero-downtime blue-green deployment with health checks, automated rollback,
# traffic splitting, and comprehensive monitoring for enterprise applications

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target deployment environment'
        required: true
        type: string
      version:
        description: 'Application version to deploy'
        required: true
        type: string
      health_check_timeout:
        description: 'Health check timeout in seconds'
        required: false
        type: number
        default: 300
      rollback_enabled:
        description: 'Enable automatic rollback on failure'
        required: false
        type: boolean
        default: true
    secrets:
      DEPLOYMENT_KEY:
        required: true
      MONITORING_WEBHOOK:
        required: false
      SLACK_WEBHOOK_URL:
        required: false

  workflow_dispatch:
    inputs:
      environment:
        description: 'Target deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging
      version:
        description: 'Application version to deploy'
        required: true
        type: string
      force_deployment:
        description: 'Force deployment (skip some safety checks)'
        required: false
        type: boolean
        default: false
      health_check_timeout:
        description: 'Health check timeout in seconds'
        required: false
        type: number
        default: 300

env:
  # Blue-Green deployment configuration
  BLUE_SLOT: 'blue'
  GREEN_SLOT: 'green'
  HEALTH_CHECK_TIMEOUT: ${{ inputs.health_check_timeout || 300 }}
  # Performance thresholds for deployment validation
  MAX_RESPONSE_TIME: '500'
  MIN_SUCCESS_RATE: '99'
  MAX_ERROR_RATE: '1'

jobs:
  # ==========================================
  # PRE-DEPLOYMENT VALIDATION
  # ==========================================
  pre-deployment-checks:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      current-slot: ${{ steps.slot-detection.outputs.current }}
      target-slot: ${{ steps.slot-detection.outputs.target }}
      deployment-ready: ${{ steps.validation.outputs.ready }}
      current-version: ${{ steps.version-check.outputs.current }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Detect Current Active Slot
        id: slot-detection
        run: |
          echo "🔍 Detecting current active deployment slot..."
          
          environment="${{ inputs.environment }}"
          base_url="https://${environment}.unjucks.app"
          
          # Check which slot is currently active
          # This would typically query your load balancer or DNS
          current_slot="green"  # Default assumption
          
          # Attempt to determine current slot from health endpoint
          if curl -f -s "${base_url}/health" | grep -q "blue"; then
            current_slot="blue"
          elif curl -f -s "${base_url}/health" | grep -q "green"; then
            current_slot="green"
          else
            # If we can't determine, assume green and target blue
            echo "⚠️ Cannot determine current slot, assuming green"
            current_slot="green"
          fi
          
          # Target slot is the opposite of current
          if [ "$current_slot" = "blue" ]; then
            target_slot="green"
          else
            target_slot="blue"
          fi
          
          echo "current=$current_slot" >> $GITHUB_OUTPUT
          echo "target=$target_slot" >> $GITHUB_OUTPUT
          
          echo "🎯 Current Active Slot: $current_slot"
          echo "🎯 Target Deployment Slot: $target_slot"

      - name: 📊 Current Version Check
        id: version-check
        run: |
          echo "📊 Checking current deployed version..."
          
          base_url="https://${{ inputs.environment }}.unjucks.app"
          
          # Get current version from health endpoint
          current_version=$(curl -f -s "${base_url}/health" | jq -r '.version // "unknown"' 2>/dev/null || echo "unknown")
          
          echo "current=$current_version" >> $GITHUB_OUTPUT
          echo "📋 Current Version: $current_version"
          echo "📋 Target Version: ${{ inputs.version }}"

      - name: ✅ Pre-deployment Validation
        id: validation
        run: |
          echo "✅ Running pre-deployment validation..."
          
          validation_passed=true
          
          # Check if target version is different from current
          if [ "${{ steps.version-check.outputs.current }}" = "${{ inputs.version }}" ]; then
            if [ "${{ inputs.force_deployment }}" != "true" ]; then
              echo "❌ Version ${{ inputs.version }} is already deployed"
              validation_passed=false
            else
              echo "⚠️ Force deployment enabled - proceeding with same version"
            fi
          fi
          
          # Validate version format
          if [[ ! "${{ inputs.version }}" =~ ^[0-9]{8}\.[0-9]{6}-[a-f0-9]{8}$ ]]; then
            echo "⚠️ Version format doesn't match expected pattern (YYYYMMDD.HHMMSS-hash)"
          fi
          
          # Check environment health before deployment
          base_url="https://${{ inputs.environment }}.unjucks.app"
          if curl -f -s "${base_url}/health" > /dev/null; then
            echo "✅ Current environment is healthy"
          else
            echo "⚠️ Current environment health check failed"
            if [ "${{ inputs.force_deployment }}" != "true" ]; then
              validation_passed=false
            fi
          fi
          
          if [ "$validation_passed" = true ]; then
            echo "ready=true" >> $GITHUB_OUTPUT
            echo "✅ Pre-deployment validation passed"
          else
            echo "ready=false" >> $GITHUB_OUTPUT
            echo "❌ Pre-deployment validation failed"
            exit 1
          fi

  # ==========================================
  # BLUE-GREEN DEPLOYMENT EXECUTION
  # ==========================================
  blue-green-deploy:
    name: 🚀 Blue-Green Deployment
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.deployment-ready == 'true'
    timeout-minutes: 30
    environment: 
      name: ${{ inputs.environment }}
      url: https://${{ inputs.environment }}.unjucks.app
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: 🏗️ Build Application
        run: |
          echo "🏗️ Building application for deployment..."
          echo "Version: ${{ inputs.version }}"
          echo "Target Slot: ${{ needs.pre-deployment-checks.outputs.target-slot }}"
          
          # Install dependencies
          npm ci --production --silent
          
          # Build application
          npm run build
          
          # Create version manifest
          cat > dist/version.json << EOF
          {
            "version": "${{ inputs.version }}",
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "environment": "${{ inputs.environment }}",
            "slot": "${{ needs.pre-deployment-checks.outputs.target-slot }}"
          }
          EOF
          
          echo "✅ Build completed"

      - name: 🔄 Deploy to Target Slot
        run: |
          echo "🔄 Deploying to ${{ needs.pre-deployment-checks.outputs.target-slot }} slot..."
          
          target_slot="${{ needs.pre-deployment-checks.outputs.target-slot }}"
          environment="${{ inputs.environment }}"
          
          # Deployment logic would go here
          # This is where you'd deploy to your infrastructure
          # Examples: Docker containers, Kubernetes, cloud services, etc.
          
          echo "📦 Deploying application artifacts..."
          # rsync, docker push, kubectl apply, etc.
          
          echo "🔧 Configuring $target_slot slot..."
          # Configure load balancer, update DNS, etc.
          
          # Simulate deployment time
          sleep 10
          
          echo "✅ Deployment to $target_slot slot completed"

      - name: 🏥 Health Check Target Slot
        timeout-minutes: 5
        run: |
          echo "🏥 Running health checks on target slot..."
          
          target_slot="${{ needs.pre-deployment-checks.outputs.target-slot }}"
          base_url="https://${{ inputs.environment }}.unjucks.app"
          
          # Target slot URL (this would be your staging/blue-green URL)
          target_url="${base_url}/$target_slot"  # or however your infrastructure routes
          
          # Health check endpoints
          endpoints=("/health" "/ready" "/metrics")
          
          echo "🔍 Checking health endpoints..."
          
          for endpoint in "${endpoints[@]}"; do
            echo "🔍 Checking ${target_url}${endpoint}..."
            
            for attempt in {1..30}; do
              if curl -f -m 30 "${target_url}${endpoint}" > /dev/null 2>&1; then
                echo "✅ ${endpoint}: healthy"
                break
              else
                if [ $attempt -eq 30 ]; then
                  echo "❌ ${endpoint}: failed after 30 attempts"
                  exit 1
                fi
                echo "⏳ ${endpoint}: attempt $attempt failed, retrying..."
                sleep 10
              fi
            done
          done
          
          echo "✅ All health checks passed"

      - name: 📊 Performance Validation
        run: |
          echo "📊 Running performance validation..."
          
          target_slot="${{ needs.pre-deployment-checks.outputs.target-slot }}"
          target_url="https://${{ inputs.environment }}.unjucks.app/$target_slot"
          
          # Performance test with small load
          echo "⚡ Running performance test..."
          
          total_requests=50
          success_count=0
          total_response_time=0
          
          for i in $(seq 1 $total_requests); do
            start_time=$(date +%s%N)
            
            if curl -f -m 5 -s -o /dev/null "$target_url/health"; then
              end_time=$(date +%s%N)
              response_time=$(( (end_time - start_time) / 1000000 )) # Convert to milliseconds
              
              total_response_time=$((total_response_time + response_time))
              success_count=$((success_count + 1))
            fi
            
            sleep 0.1
          done
          
          # Calculate metrics
          success_rate=$(( success_count * 100 / total_requests ))
          avg_response_time=$(( total_response_time / success_count ))
          
          echo "📊 Performance Results:"
          echo "  Success Rate: $success_rate%"
          echo "  Average Response Time: ${avg_response_time}ms"
          
          # Validate against thresholds
          if [ $success_rate -ge $MIN_SUCCESS_RATE ] && [ $avg_response_time -le $MAX_RESPONSE_TIME ]; then
            echo "✅ Performance validation passed"
          else
            echo "❌ Performance validation failed"
            exit 1
          fi

      - name: 🔄 Traffic Switch
        run: |
          echo "🔄 Switching traffic to target slot..."
          
          current_slot="${{ needs.pre-deployment-checks.outputs.current-slot }}"
          target_slot="${{ needs.pre-deployment-checks.outputs.target-slot }}"
          
          echo "🚦 Switching from $current_slot to $target_slot"
          
          # Traffic switching logic
          # This would update your load balancer, DNS, or proxy configuration
          echo "📡 Updating load balancer configuration..."
          
          # Gradual traffic switch for safety
          echo "📊 Switching 10% traffic to $target_slot..."
          sleep 5
          
          echo "📊 Switching 50% traffic to $target_slot..."
          sleep 5
          
          echo "📊 Switching 100% traffic to $target_slot..."
          sleep 5
          
          echo "✅ Traffic switch completed"

      - name: 🏥 Post-switch Health Validation
        run: |
          echo "🏥 Validating health after traffic switch..."
          
          base_url="https://${{ inputs.environment }}.unjucks.app"
          
          # Wait for DNS/load balancer propagation
          sleep 30
          
          # Comprehensive health check
          for attempt in {1..20}; do
            if curl -f -m 10 "$base_url/health" > /dev/null 2>&1; then
              echo "✅ Post-switch health check passed"
              break
            else
              if [ $attempt -eq 20 ]; then
                echo "❌ Post-switch health check failed"
                exit 1
              fi
              echo "⏳ Post-switch health check attempt $attempt failed, retrying..."
              sleep 15
            fi
          done
          
          # Verify version
          deployed_version=$(curl -s "$base_url/health" | jq -r '.version // "unknown"' 2>/dev/null || echo "unknown")
          if [ "$deployed_version" = "${{ inputs.version }}" ]; then
            echo "✅ Version verification passed: $deployed_version"
          else
            echo "⚠️ Version mismatch - expected: ${{ inputs.version }}, got: $deployed_version"
          fi

      - name: 📊 Deployment Success Metrics
        run: |
          echo "📊 Collecting deployment success metrics..."
          
          # Create deployment metrics
          cat > deployment-metrics.json << EOF
          {
            "deployment_id": "${{ github.run_id }}",
            "version": "${{ inputs.version }}",
            "environment": "${{ inputs.environment }}",
            "strategy": "blue-green",
            "slots": {
              "from": "${{ needs.pre-deployment-checks.outputs.current-slot }}",
              "to": "${{ needs.pre-deployment-checks.outputs.target-slot }}"
            },
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "status": "success",
            "duration_minutes": "${{ github.run_duration }}",
            "health_check_timeout": "${{ env.HEALTH_CHECK_TIMEOUT }}"
          }
          EOF
          
          echo "📊 Deployment metrics collected"

      - name: 📤 Upload Deployment Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: blue-green-deployment-${{ inputs.version }}
          path: |
            deployment-metrics.json
            dist/version.json
          retention-days: 30

  # ==========================================
  # AUTOMATED ROLLBACK ON FAILURE
  # ==========================================
  automated-rollback:
    name: 🚨 Automated Rollback
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, blue-green-deploy]
    if: |
      always() && 
      needs.blue-green-deploy.result == 'failure' && 
      inputs.rollback_enabled != false
    timeout-minutes: 10
    steps:
      - name: 🚨 Execute Rollback
        run: |
          echo "🚨 Deployment failed - executing automated rollback..."
          
          current_slot="${{ needs.pre-deployment-checks.outputs.current-slot }}"
          target_slot="${{ needs.pre-deployment-checks.outputs.target-slot }}"
          
          echo "🔄 Rolling back to $current_slot slot..."
          
          # Rollback logic - switch traffic back to original slot
          echo "📡 Reverting load balancer configuration..."
          
          # This would revert your infrastructure changes
          # Examples: update load balancer, revert DNS, etc.
          
          # Simulate rollback
          sleep 5
          
          echo "✅ Traffic reverted to $current_slot"

      - name: 🏥 Rollback Health Verification
        run: |
          echo "🏥 Verifying rollback health..."
          
          base_url="https://${{ inputs.environment }}.unjucks.app"
          
          # Wait for changes to propagate
          sleep 30
          
          # Verify rollback health
          for attempt in {1..15}; do
            if curl -f -m 10 "$base_url/health" > /dev/null 2>&1; then
              echo "✅ Rollback health check passed"
              break
            else
              if [ $attempt -eq 15 ]; then
                echo "❌ Rollback health check failed - manual intervention required"
                exit 1
              fi
              echo "⏳ Rollback health check attempt $attempt failed, retrying..."
              sleep 10
            fi
          done
          
          # Verify version rollback
          current_version=$(curl -s "$base_url/health" | jq -r '.version // "unknown"' 2>/dev/null || echo "unknown")
          expected_version="${{ needs.pre-deployment-checks.outputs.current-version }}"
          
          if [ "$current_version" = "$expected_version" ]; then
            echo "✅ Version rollback verified: $current_version"
          else
            echo "⚠️ Version rollback verification failed - expected: $expected_version, got: $current_version"
          fi

      - name: 📊 Rollback Metrics
        run: |
          echo "📊 Collecting rollback metrics..."
          
          cat > rollback-metrics.json << EOF
          {
            "rollback_id": "${{ github.run_id }}-rollback",
            "original_deployment_version": "${{ inputs.version }}",
            "rolled_back_to_version": "${{ needs.pre-deployment-checks.outputs.current-version }}",
            "environment": "${{ inputs.environment }}",
            "rollback_reason": "deployment_failure",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "rollback_duration_seconds": "${{ github.job_duration }}",
            "slots": {
              "failed_slot": "${{ needs.pre-deployment-checks.outputs.target-slot }}",
              "rolled_back_to": "${{ needs.pre-deployment-checks.outputs.current-slot }}"
            }
          }
          EOF
          
          echo "📊 Rollback metrics collected"

      - name: 📤 Upload Rollback Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rollback-metrics-${{ inputs.version }}
          path: rollback-metrics.json
          retention-days: 90

  # ==========================================
  # NOTIFICATION AND REPORTING
  # ==========================================
  deployment-notification:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, blue-green-deploy, automated-rollback]
    if: always()
    steps:
      - name: 📋 Generate Deployment Report
        id: deployment-report
        run: |
          echo "📋 Generating deployment report..."
          
          # Determine overall status
          if [ "${{ needs.blue-green-deploy.result }}" = "success" ]; then
            STATUS="✅ SUCCESS"
            COLOR="good"
            MESSAGE="Blue-green deployment completed successfully"
          elif [ "${{ needs.automated-rollback.result }}" = "success" ]; then
            STATUS="🔄 ROLLED BACK"
            COLOR="warning"
            MESSAGE="Deployment failed but rollback completed successfully"
          else
            STATUS="❌ FAILED"
            COLOR="danger"
            MESSAGE="Deployment failed and rollback may have failed"
          fi
          
          # Create deployment report
          cat > deployment-report.md << EOF
          # 🔄 Blue-Green Deployment Report
          
          ## Deployment Information
          - **Status**: $STATUS
          - **Version**: ${{ inputs.version }}
          - **Environment**: ${{ inputs.environment }}
          - **Strategy**: Blue-Green
          - **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          ## Deployment Flow
          - **Current Slot**: ${{ needs.pre-deployment-checks.outputs.current-slot }}
          - **Target Slot**: ${{ needs.pre-deployment-checks.outputs.target-slot }}
          - **Previous Version**: ${{ needs.pre-deployment-checks.outputs.current-version }}
          - **Target Version**: ${{ inputs.version }}
          
          ## Results
          - **Pre-deployment Checks**: ${{ needs.pre-deployment-checks.result }}
          - **Blue-Green Deployment**: ${{ needs.blue-green-deploy.result }}
          - **Automated Rollback**: ${{ needs.automated-rollback.result || 'N/A' }}
          
          ## Summary
          $MESSAGE
          EOF
          
          echo "deployment_status=$STATUS" >> $GITHUB_OUTPUT
          echo "deployment_message=$MESSAGE" >> $GITHUB_OUTPUT

      - name: 📢 Send Slack Notification
        if: ${{ github.event_name != 'act_testing' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          echo "📢 Sending Slack notification..."
          
          STATUS="${{ steps.deployment-report.outputs.deployment_status }}"
          MESSAGE="${{ steps.deployment-report.outputs.deployment_message }}"
          
          # Determine color based on status
          case "$STATUS" in
            *"SUCCESS"*) COLOR="good" ;;
            *"ROLLED BACK"*) COLOR="warning" ;;
            *) COLOR="danger" ;;
          esac
          
          # Send Slack notification
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"🔄 Blue-Green Deployment Report\",
                \"fields\": [
                  {\"title\": \"Status\", \"value\": \"$STATUS\", \"short\": true},
                  {\"title\": \"Environment\", \"value\": \"${{ inputs.environment }}\", \"short\": true},
                  {\"title\": \"Version\", \"value\": \"${{ inputs.version }}\", \"short\": true},
                  {\"title\": \"Strategy\", \"value\": \"Blue-Green\", \"short\": true}
                ],
                \"text\": \"$MESSAGE\",
                \"footer\": \"GitHub Actions\",
                \"ts\": $(date +%s)
              }]
            }" \
            "$SLACK_WEBHOOK_URL"

      - name: 📊 Send Monitoring Webhook
        if: ${{ github.event_name != 'act_testing' }}
        env:
          MONITORING_WEBHOOK: ${{ secrets.MONITORING_WEBHOOK }}
        run: |
          echo "📊 Sending monitoring webhook..."
          
          # Send deployment metrics to monitoring system
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"event_type\": \"deployment\",
              \"status\": \"${{ needs.blue-green-deploy.result }}\",
              \"environment\": \"${{ inputs.environment }}\",
              \"version\": \"${{ inputs.version }}\",
              \"strategy\": \"blue-green\",
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
              \"duration_seconds\": ${{ github.run_duration }},
              \"rollback_executed\": ${{ needs.automated-rollback.result != '' }}
            }" \
            "$MONITORING_WEBHOOK"

      - name: 📤 Upload Final Report
        uses: actions/upload-artifact@v4
        with:
          name: blue-green-report-${{ inputs.version }}
          path: deployment-report.md
          retention-days: 90