name: Enterprise Release Pipeline

# Enterprise-grade release automation with semantic versioning
concurrency:
  group: release-pipeline-${{ inputs.release-channel || 'stable' }}
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Type of release (auto-detected from commits if not specified)'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - patch
        - minor
        - major
        - prerelease
      release-channel:
        description: 'Release channel'
        required: false
        default: 'stable'
        type: choice
        options:
        - alpha
        - beta
        - rc
        - stable
      dry-run:
        description: 'Dry run (do not actually publish)'
        required: false
        default: false
        type: boolean
      force-publish:
        description: 'Force publish even if no changes detected'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main
      - 'release/*'
    tags:
      - 'v*'
  pull_request:
    types: [closed]
    branches:
      - main

env:
  RELEASE_CHANNEL: ${{ inputs.release-channel || 'stable' }}
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # Analyze commits for semantic versioning
  analyze-changes:
    name: Analyze Changes
    runs-on: ubuntu-latest
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')
    outputs:
      should-release: ${{ steps.analysis.outputs.should-release }}
      release-type: ${{ steps.analysis.outputs.release-type }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      breaking-changes: ${{ steps.analysis.outputs.breaking-changes }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install semantic release tools
        run: |
          npm install -g conventional-changelog-cli conventional-commits-parser semantic-release
          
      - name: Analyze conventional commits
        id: analysis
        run: |
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -z "$LAST_TAG" ]]; then
            COMMIT_RANGE="HEAD"
          else
            COMMIT_RANGE="${LAST_TAG}..HEAD"
          fi
          
          echo "Analyzing commits in range: $COMMIT_RANGE"
          
          # Parse commit messages for conventional format
          COMMITS=$(git log --format="%s" $COMMIT_RANGE)
          
          BREAKING_CHANGES=false
          FEATURES=false
          FIXES=false
          
          while IFS= read -r commit; do
            echo "Analyzing: $commit"
            if [[ $commit =~ ^(feat|feature)(\(.+\))?!: || $commit =~ BREAKING[[:space:]]CHANGE ]]; then
              BREAKING_CHANGES=true
            elif [[ $commit =~ ^(feat|feature)(\(.+\))?: ]]; then
              FEATURES=true
            elif [[ $commit =~ ^(fix|bugfix)(\(.+\))?: ]]; then
              FIXES=true
            fi
          done <<< "$COMMITS"
          
          # Determine release type
          if [[ "${{ inputs.release-type }}" != "auto" ]]; then
            RELEASE_TYPE="${{ inputs.release-type }}"
          elif [[ $BREAKING_CHANGES == true ]]; then
            RELEASE_TYPE="major"
          elif [[ $FEATURES == true ]]; then
            RELEASE_TYPE="minor"
          elif [[ $FIXES == true ]]; then
            RELEASE_TYPE="patch"
          else
            RELEASE_TYPE="none"
          fi
          
          # Should we release?
          if [[ $RELEASE_TYPE != "none" ]] || [[ "${{ inputs.force-publish }}" == "true" ]]; then
            SHOULD_RELEASE=true
          else
            SHOULD_RELEASE=false
          fi
          
          echo "should-release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "breaking-changes=$BREAKING_CHANGES" >> $GITHUB_OUTPUT
          
          echo "📊 Release Analysis:"
          echo "  - Should Release: $SHOULD_RELEASE"
          echo "  - Release Type: $RELEASE_TYPE"
          echo "  - Breaking Changes: $BREAKING_CHANGES"
          echo "  - Features: $FEATURES"
          echo "  - Fixes: $FIXES"
          
      - name: Generate changelog
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Generate changelog using conventional-changelog
          CHANGELOG=$(conventional-changelog -p angular --verbose 2>/dev/null || echo "No changelog generated")
          
          # Escape for GitHub output
          CHANGELOG=$(echo "$CHANGELOG" | sed 's/"/\\"/g' | tr '\n' ' ')
          
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
          
          # Also create a temp file for later use
          conventional-changelog -p angular -i TEMP_CHANGELOG.md -s
          
      - name: Upload changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog-${{ github.run_id }}
          path: TEMP_CHANGELOG.md
          retention-days: 1

  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [analyze-changes]
    if: needs.analyze-changes.outputs.should-release == 'true' || github.event_name == 'push'
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      channel: ${{ steps.version.outputs.channel }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Run full validation
        run: npm run prepublishOnly
        
      - name: Bump version
        id: version
        run: |
          if [[ "${{ inputs.dry-run }}" == "true" ]]; then
            echo "DRY RUN: Would bump version with: npm version ${{ inputs.release-type }}"
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
            echo "tag=v${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          else
            NEW_VERSION=$(npm version ${{ inputs.release-type }} --no-git-tag-version)
            echo "version=${NEW_VERSION#v}" >> $GITHUB_OUTPUT
            echo "tag=${NEW_VERSION}" >> $GITHUB_OUTPUT
            
            git add package.json
            git commit -m "chore: bump version to ${NEW_VERSION}"
            git tag ${NEW_VERSION}
            git push origin main --tags
          fi

  # Generate comprehensive changelog
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: [prepare-release]
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      has-breaking-changes: ${{ steps.changelog.outputs.has-breaking-changes }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Generate changelog
        id: changelog
        uses: ./.github/workflows/reusable/generate-changelog.yml
        with:
          version: ${{ needs.prepare-release.outputs.version }}
          tag: ${{ needs.prepare-release.outputs.tag }}
          format: 'markdown'
          include-prs: 'true'
          template: 'conventional'
          
      - name: Upload changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog-${{ needs.prepare-release.outputs.version }}
          path: CHANGELOG_${{ needs.prepare-release.outputs.version }}.md
          retention-days: 30

  # Multi-platform testing
  build-and-test:
    name: Test Release (${{ matrix.os }}, Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    needs: [prepare-release]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]
        exclude:
          # Skip some combinations for faster CI in non-main branches
          - os: windows-latest
            node-version: 20
          - os: macos-latest
            node-version: 20
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run comprehensive tests
        run: |
          npm run build:validate
          npm run test:smoke
          npm test
          npm run test:cli
          npm run security:scan
          
      - name: Test package installation
        run: |
          npm pack
          TARBALL=$(ls *.tgz | head -1)
          mkdir test-install
          cd test-install
          npm init -y
          npm install "../$TARBALL"
          npx unjucks --version
          npx unjucks --help
          npx unjucks list || true
          
      - name: Performance benchmarks
        run: |
          npm run test:performance || echo "Performance tests completed"
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            tests/reports/
            coverage/
            *.tgz
          retention-days: 7

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    environment: production
    if: inputs.dry-run != true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build package
        run: npm run build
        
      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          release_name: Release ${{ needs.prepare-release.outputs.tag }}
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.tag, 'pre') }}
          body: |
            ## Changes
            
            - Package published to NPM: [`@seanchatmangpt/unjucks@${{ needs.prepare-release.outputs.version }}`](https://www.npmjs.com/package/@seanchatmangpt/unjucks/v/${{ needs.prepare-release.outputs.version }})
            - Full changelog: https://github.com/${{ github.repository }}/compare/v${{ needs.prepare-release.outputs.version }}...HEAD
            
            ## Installation
            
            ```bash
            npm install -g @seanchatmangpt/unjucks@${{ needs.prepare-release.outputs.version }}
            ```
            
            ## Usage
            
            ```bash
            unjucks --help
            unjucks list
            unjucks generate component react MyComponent
            ```

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [publish-release]
    if: success() && inputs.dry-run != true
    
    steps:
      - name: Notify Slack
        if: env.SLACK_WEBHOOK_URL
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "🎉 Unjucks Release ${{ needs.prepare-release.outputs.tag }} published successfully!",
              "attachments": [{
                "color": "good",
                "fields": [{
                  "title": "Version",
                  "value": "${{ needs.prepare-release.outputs.version }}",
                  "short": true
                }, {
                  "title": "NPM Package", 
                  "value": "https://www.npmjs.com/package/@seanchatmangpt/unjucks",
                  "short": true
                }]
              }]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup-on-failure:
    name: Cleanup Failed Release
    runs-on: ubuntu-latest
    needs: [prepare-release, publish-release]
    if: failure() && inputs.dry-run != true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Delete failed tag
        run: |
          git tag -d ${{ needs.prepare-release.outputs.tag }} || true
          git push origin :refs/tags/${{ needs.prepare-release.outputs.tag }} || true
          
      - name: Notify failure
        run: |
          echo "Release ${{ needs.prepare-release.outputs.tag }} failed and has been cleaned up"

# Release validation job for dry runs
  validate-release:
    name: Validate Release (Dry Run)
    runs-on: ubuntu-latest
    needs: [analyze-changes]
    if: inputs.dry-run == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Run validation script
        run: |
          chmod +x scripts/release/validate-release.sh
          ./scripts/release/validate-release.sh --level full --report --format markdown
          
      - name: Display dry run summary
        run: |
          echo "🔍 **Dry Run Summary**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Commit Analysis | ✅ Complete |" >> $GITHUB_STEP_SUMMARY
          echo "| Version Calculation | ✅ Complete |" >> $GITHUB_STEP_SUMMARY
          echo "| Package Validation | ✅ Complete |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### What would happen in a real release:" >> $GITHUB_STEP_SUMMARY
          echo "1. Version would be bumped based on conventional commits" >> $GITHUB_STEP_SUMMARY
          echo "2. Git tag would be created" >> $GITHUB_STEP_SUMMARY
          echo "3. NPM package would be published" >> $GITHUB_STEP_SUMMARY
          echo "4. GitHub release would be created" >> $GITHUB_STEP_SUMMARY
          echo "5. Notifications would be sent" >> $GITHUB_STEP_SUMMARY