name: Security Vulnerability Tracking

on:
  workflow_run:
    workflows: ["Security Scanning"]
    types: [completed]
  schedule:
    # Run security scan daily at 3 AM UTC
    - cron: '0 3 * * *'
  push:
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/security-scanning.yml'

permissions:
  issues: write
  contents: read
  actions: read
  security-events: read
  pull-requests: write

jobs:
  track-security-issues:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --only=prod

      - name: Initialize Security Monitoring Swarm
        run: |
          npx claude-flow@alpha hooks pre-task --description "Security vulnerability detection and tracking"
          npx claude-flow@alpha hooks session-restore --session-id "swarm-security-monitor"

      - name: Analyze Security Scan Results
        id: security-analysis
        run: |
          node scripts/issue-automation/analyze-security-results.js \
            --workflow-run-id="${{ github.event.workflow_run.id || 'scheduled' }}" \
            --scan-type="comprehensive"

      - name: Check for New CVEs
        id: cve-check
        run: |
          node scripts/issue-automation/check-new-cves.js \
            --package-file="package.json" \
            --severity-threshold="medium"

      - name: Dependency Vulnerability Scan
        id: dep-scan
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          node scripts/issue-automation/process-npm-audit.js \
            --audit-file="npm-audit.json" \
            --create-issues=true

      - name: SAST Analysis
        id: sast
        run: |
          node scripts/issue-automation/run-sast-analysis.js \
            --source-path="src/" \
            --config-path=".github/security-config.json"

      - name: Create Security Issues
        if: steps.security-analysis.outputs.vulnerabilities_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const securityReport = JSON.parse(fs.readFileSync('security-analysis.json', 'utf8'));
            
            for (const vulnerability of securityReport.vulnerabilities) {
              // Check if issue already exists
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: `security,vulnerability,cve:${vulnerability.cve}`,
                state: 'open'
              });
              
              if (existingIssues.data.length > 0) {
                console.log(`Issue already exists for CVE ${vulnerability.cve}`);
                continue;
              }
              
              const issueBody = `## 🛡️ Security Vulnerability Detected
              
              ### Vulnerability Details
              - **CVE ID**: ${vulnerability.cve}
              - **Severity**: ${vulnerability.severity}
              - **CVSS Score**: ${vulnerability.cvss_score}
              - **Package**: ${vulnerability.package}
              - **Affected Versions**: ${vulnerability.affected_versions}
              - **Fixed Version**: ${vulnerability.fixed_version || 'Not available'}
              
              ### Description
              ${vulnerability.description}
              
              ### Impact Assessment
              - **Exploitability**: ${vulnerability.exploitability}
              - **Attack Vector**: ${vulnerability.attack_vector}
              - **Authentication Required**: ${vulnerability.auth_required}
              - **User Interaction**: ${vulnerability.user_interaction}
              
              ### Current Usage
              - **Direct Dependency**: ${vulnerability.is_direct ? 'Yes' : 'No'}
              - **Dependency Path**: ${vulnerability.dependency_path}
              - **Usage Context**: ${vulnerability.usage_context}
              
              ### Remediation Steps
              ${vulnerability.remediation_steps.map(step => `- [ ] ${step}`).join('\n')}
              
              ### Alternative Solutions
              ${vulnerability.alternatives.map(alt => `- ${alt}`).join('\n')}
              
              ### Security Assessment
              \`\`\`json
              ${JSON.stringify(vulnerability.security_assessment, null, 2)}
              \`\`\`
              
              ### References
              ${vulnerability.references.map(ref => `- [${ref.title}](${ref.url})`).join('\n')}
              
              ### Swarm Security Agents
              - **Vulnerability Scanner**: Continuous monitoring for new CVEs
              - **Impact Analyzer**: Assessment of vulnerability impact on codebase
              - **Patcher**: Automated patching and dependency updates
              - **Validator**: Security fix verification and testing
              
              ---
              🤖 **Automated Security Tracking**
              - Detected: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
              - Scanner Version: ${securityReport.scanner_version}
              - Database Updated: ${securityReport.db_updated}
              - Confidence: ${vulnerability.confidence}%
              
              _This issue was automatically created by the security vulnerability tracking system._`;
              
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Security: ${vulnerability.severity.toUpperCase()} - ${vulnerability.cve} in ${vulnerability.package}`,
                body: issueBody,
                labels: [
                  'security',
                  'vulnerability',
                  'automated-tracking',
                  vulnerability.severity,
                  `cve:${vulnerability.cve}`,
                  `package:${vulnerability.package}`,
                  vulnerability.is_direct ? 'direct-dependency' : 'transitive-dependency'
                ],
                assignees: vulnerability.suggested_assignees,
                milestone: vulnerability.target_milestone
              });
              
              console.log(`Created security issue #${issue.data.number}: ${issue.data.title}`);
              
              // Create PR for automatic fixes if available
              if (vulnerability.auto_fix_available) {
                await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `Security fix: Resolve ${vulnerability.cve} in ${vulnerability.package}`,
                  head: `security-fix-${vulnerability.cve.toLowerCase()}`,
                  base: 'main',
                  body: `Resolves #${issue.data.number}\n\nAutomatic security fix for ${vulnerability.cve}`,
                  draft: true
                });
              }
            }

      - name: Update Security Baselines
        run: |
          node scripts/issue-automation/update-security-baselines.js \
            --report-file="security-analysis.json"

      - name: Generate Security Report
        run: |
          node scripts/issue-automation/generate-security-report.js \
            --output-file="docs/automation/security-report.md" \
            --format="markdown"

      - name: Store Security Metrics
        run: |
          npx claude-flow@alpha hooks post-edit \
            --file "security-analysis.json" \
            --memory-key "swarm/security/scan/$(date +%Y-%m-%d)"
          npx claude-flow@alpha hooks notify \
            --message "Security scan completed: ${steps.security-analysis.outputs.vulnerabilities_count} vulnerabilities found"

      - name: Cleanup
        if: always()
        run: |
          npx claude-flow@alpha hooks post-task --task-id "security-vulnerability-tracking"
          npx claude-flow@alpha hooks session-end --export-metrics true