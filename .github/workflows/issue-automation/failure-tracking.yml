name: Automated Issue Tracking - Failure Detection

on:
  workflow_run:
    workflows: [
      "CI", 
      "Comprehensive Testing", 
      "Security Scanning", 
      "Cross-Platform CI", 
      "PR Validation",
      "Production Validation",
      "LaTeX CI",
      "Release"
    ]
    types: 
      - completed

permissions:
  issues: write
  contents: read
  actions: read
  pull-requests: read

jobs:
  track-failures:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --only=prod

      - name: Initialize Swarm Coordination
        run: |
          npx claude-flow@alpha hooks pre-task --description "CI/CD failure detection and issue creation"
          npx claude-flow@alpha hooks session-restore --session-id "swarm-failure-tracking"

      - name: Analyze Workflow Failure
        id: analyze
        run: |
          node scripts/issue-automation/analyze-failure.js \
            --workflow-id="${{ github.event.workflow_run.id }}" \
            --workflow-name="${{ github.event.workflow_run.name }}" \
            --run-url="${{ github.event.workflow_run.html_url }}" \
            --head-sha="${{ github.event.workflow_run.head_sha }}" \
            --conclusion="${{ github.event.workflow_run.conclusion }}"

      - name: Create Failure Issue
        if: steps.analyze.outputs.should_create_issue == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Load failure analysis results
            const analysisPath = path.join(process.env.GITHUB_WORKSPACE, 'failure-analysis.json');
            const analysis = JSON.parse(fs.readFileSync(analysisPath, 'utf8'));
            
            const issueBody = `## ðŸš¨ CI/CD Workflow Failure Detected
            
            ### Workflow Details
            - **Workflow**: ${{ github.event.workflow_run.name }}
            - **Run ID**: ${{ github.event.workflow_run.id }}
            - **Commit**: ${{ github.event.workflow_run.head_sha }}
            - **Branch**: ${{ github.event.workflow_run.head_branch }}
            - **Conclusion**: ${{ github.event.workflow_run.conclusion }}
            - **Run URL**: ${{ github.event.workflow_run.html_url }}
            - **Triggered**: ${{ github.event.workflow_run.created_at }}
            
            ### Failure Analysis
            ${analysis.summary}
            
            ### Identified Issues
            ${analysis.issues.map(issue => `- ${issue.type}: ${issue.description}`).join('\n')}
            
            ### Logs Preview
            \`\`\`
            ${analysis.logs_preview}
            \`\`\`
            
            ### Recommended Actions
            ${analysis.recommendations.map(rec => `- [ ] ${rec}`).join('\n')}
            
            ### Performance Impact
            - **Duration**: ${analysis.duration}
            - **Previous Success Rate**: ${analysis.success_rate}
            - **Failure Pattern**: ${analysis.pattern}
            
            ### Swarm Coordination
            This issue will be automatically tracked and coordinated by specialized agents:
            - **Monitor Agent**: Continuous failure pattern analysis
            - **Debugger Agent**: Root cause investigation
            - **Fixer Agent**: Automated resolution attempts
            
            ---
            ðŸ¤– **Automated Issue Tracking**
            - Created: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            - Swarm ID: swarm-failure-tracking
            - Analysis ID: ${analysis.id}
            - Priority: ${analysis.priority}
            
            _This issue was automatically created by the GitHub Actions failure tracking system._`;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CI/CD Failure: ${{ github.event.workflow_run.name }} - ${analysis.error_type}`,
              body: issueBody,
              labels: [
                'ci-failure',
                'automated-tracking',
                analysis.priority,
                `workflow:${{ github.event.workflow_run.name }}`.toLowerCase().replace(/[^a-z0-9-]/g, '-'),
                analysis.category
              ],
              assignees: analysis.suggested_assignees
            });
            
            console.log(`Created issue #${issue.data.number}: ${issue.data.title}`);

      - name: Update Swarm Memory
        run: |
          npx claude-flow@alpha hooks post-edit \
            --file "failure-analysis.json" \
            --memory-key "swarm/failure-tracking/${{ github.event.workflow_run.id }}"
          npx claude-flow@alpha hooks notify \
            --message "CI/CD failure detected and tracked: ${{ github.event.workflow_run.name }}"

      - name: Notify Teams
        if: steps.analyze.outputs.priority == 'critical'
        run: |
          node scripts/issue-automation/notify-teams.js \
            --type "critical-failure" \
            --workflow="${{ github.event.workflow_run.name }}" \
            --issue-url="${{ steps.create-issue.outputs.issue-url }}"

      - name: Session Cleanup
        if: always()
        run: |
          npx claude-flow@alpha hooks post-task --task-id "failure-tracking-${{ github.event.workflow_run.id }}"
          npx claude-flow@alpha hooks session-end --export-metrics true