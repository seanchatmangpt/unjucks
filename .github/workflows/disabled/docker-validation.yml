name: Docker-based Testing & Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run nightly at 2 AM UTC for comprehensive validation
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      validation_level:
        description: 'Validation Level'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - quick
          - comprehensive
          - stress
          - security-focused
      
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
  # ==================================================
  # Multi-Architecture Docker Build Matrix
  # ==================================================
  multi-arch-build:
    name: Multi-Architecture Build (${{ matrix.platform }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            arch: amd64
          - platform: linux/arm64
            runner: ubuntu-latest
            arch: arm64
            
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
          
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.testing
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=build-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=build-${{ matrix.arch }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            TARGETARCH=${{ matrix.arch }}
            
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.arch }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # ==================================================
  # Security Scanning Suite
  # ==================================================
  security-validation:
    name: Security Scanning (${{ matrix.scanner }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: multi-arch-build
    
    strategy:
      fail-fast: false
      matrix:
        scanner: [trivy, snyk, grype]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          name: digests-amd64
          path: /tmp/digests
          
      - name: Build test image
        run: |
          docker build -f docker/Dockerfile.testing -t unjucks:test .
          
      - name: Run Trivy vulnerability scanner
        if: matrix.scanner == 'trivy'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'unjucks:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Run Snyk Container scan
        if: matrix.scanner == 'snyk'
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: unjucks:test
          args: --severity-threshold=medium --file=docker/Dockerfile.testing
        continue-on-error: true
        
      - name: Run Grype vulnerability scanner
        if: matrix.scanner == 'grype'
        uses: anchore/scan-action@v3
        with:
          image: unjucks:test
          fail-build: false
          severity-cutoff: medium
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ matrix.scanner }}
          path: |
            trivy-results.sarif
            snyk-results.json
            grype-results.json
          retention-days: 30

  # ==================================================
  # Performance & Resource Validation
  # ==================================================
  performance-validation:
    name: Performance Testing (${{ matrix.constraint }})
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: multi-arch-build
    
    strategy:
      fail-fast: false
      matrix:
        constraint:
          - name: minimal
            memory: 128m
            cpus: 0.25
          - name: standard
            memory: 512m
            cpus: 1.0
          - name: constrained
            memory: 256m
            cpus: 0.5
          - name: high-memory
            memory: 1024m
            cpus: 2.0
            
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build performance test image
        run: |
          docker build -f docker/Dockerfile.performance -t unjucks:perf .
          
      - name: Create resource-constrained container
        run: |
          docker run -d \
            --name unjucks-perf-${{ matrix.constraint.name }} \
            --memory=${{ matrix.constraint.memory }} \
            --cpus=${{ matrix.constraint.cpus }} \
            --health-cmd="node scripts/health-check.js" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=3 \
            unjucks:perf sleep infinity
            
      - name: Wait for container health
        run: |
          timeout 120 bash -c 'until docker inspect --format="{{.State.Health.Status}}" unjucks-perf-${{ matrix.constraint.name }} | grep -q healthy; do sleep 5; done'
          
      - name: Run performance benchmarks
        run: |
          # Memory stress test
          docker exec unjucks-perf-${{ matrix.constraint.name }} npm run test:memory-stress
          
          # CPU stress test
          docker exec unjucks-perf-${{ matrix.constraint.name }} npm run test:cpu-stress
          
          # Concurrent operations test
          docker exec unjucks-perf-${{ matrix.constraint.name }} npm run test:concurrency-stress
          
          # Template rendering performance
          docker exec unjucks-perf-${{ matrix.constraint.name }} npm run benchmark:template-rendering
          
      - name: Collect performance metrics
        run: |
          mkdir -p performance-reports/${{ matrix.constraint.name }}
          
          # Container resource usage
          docker stats --no-stream unjucks-perf-${{ matrix.constraint.name }} > performance-reports/${{ matrix.constraint.name }}/resource-usage.txt
          
          # Application metrics
          docker exec unjucks-perf-${{ matrix.constraint.name }} npm run metrics:export -- --output /tmp/metrics.json
          docker cp unjucks-perf-${{ matrix.constraint.name }}:/tmp/metrics.json performance-reports/${{ matrix.constraint.name }}/
          
          # Performance logs
          docker logs unjucks-perf-${{ matrix.constraint.name }} > performance-reports/${{ matrix.constraint.name }}/container.log 2>&1
          
      - name: Cleanup container
        if: always()
        run: |
          docker stop unjucks-perf-${{ matrix.constraint.name }} || true
          docker rm unjucks-perf-${{ matrix.constraint.name }} || true
          
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-${{ matrix.constraint.name }}
          path: performance-reports/
          retention-days: 30

  # ==================================================
  # Production Simulation Testing
  # ==================================================
  production-simulation:
    name: Production Environment Simulation
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: [security-validation, performance-validation]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: unjucks_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Create production network
        run: |
          docker network create unjucks-prod --driver bridge
          
      - name: Build production image
        run: |
          docker build -f docker/Dockerfile.production -t unjucks:prod .
          
      - name: Deploy production stack
        run: |
          # Application server
          docker run -d \
            --name unjucks-app \
            --network unjucks-prod \
            --restart unless-stopped \
            -p 3000:3000 \
            --env-file docker/prod.env \
            --health-cmd="curl -f http://localhost:3000/health || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=3 \
            unjucks:prod
            
          # Load balancer
          docker run -d \
            --name unjucks-nginx \
            --network unjucks-prod \
            -p 80:80 \
            -v ./docker/nginx.conf:/etc/nginx/nginx.conf:ro \
            nginx:alpine
            
      - name: Wait for stack health
        run: |
          timeout 180 bash -c 'until docker inspect --format="{{.State.Health.Status}}" unjucks-app | grep -q healthy; do sleep 10; done'
          
      - name: Run production smoke tests
        run: |
          # Health check
          curl -f http://localhost/health
          
          # Load test with multiple concurrent users
          docker run --rm --network unjucks-prod \
            williamyeh/wrk2 -t4 -c10 -d30s -R100 \
            http://unjucks-nginx/
            
          # Feature validation
          docker exec unjucks-app npm run test:production:features
          
      - name: Run integration tests
        run: |
          # Database integration
          docker exec unjucks-app npm run test:integration:database
          
          # Cache integration  
          docker exec unjucks-app npm run test:integration:redis
          
          # Template generation under load
          docker exec unjucks-app npm run test:integration:templates
          
      - name: Collect production metrics
        run: |
          mkdir -p production-reports
          
          # Application logs
          docker logs unjucks-app > production-reports/app.log 2>&1
          docker logs unjucks-nginx > production-reports/nginx.log 2>&1
          
          # Container stats
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" > production-reports/stats.txt
          
          # Health status
          docker inspect --format='{{.State.Health}}' unjucks-app > production-reports/health.json
          
      - name: Cleanup production stack
        if: always()
        run: |
          docker stop unjucks-app unjucks-nginx || true
          docker rm unjucks-app unjucks-nginx || true
          docker network rm unjucks-prod || true
          
      - name: Upload production reports
        uses: actions/upload-artifact@v4
        with:
          name: production-simulation
          path: production-reports/
          retention-days: 30

  # ==================================================
  # Comprehensive Test Matrix
  # ==================================================
  docker-test-matrix:
    name: Docker Test Matrix (${{ matrix.base-image }}-${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: multi-arch-build
    
    strategy:
      fail-fast: false
      matrix:
        base-image: [alpine, ubuntu, debian]
        node-version: ['18', '20', '22']
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Build test image
        run: |
          docker build \
            --build-arg BASE_IMAGE=${{ matrix.base-image }} \
            --build-arg NODE_VERSION=${{ matrix.node-version }} \
            -f docker/Dockerfile.matrix \
            -t unjucks:test-${{ matrix.base-image }}-${{ matrix.node-version }} .
            
      - name: Run comprehensive test suite
        run: |
          docker run --rm \
            -v $PWD/test-results:/app/test-results \
            unjucks:test-${{ matrix.base-image }}-${{ matrix.node-version }} \
            npm run test:comprehensive
            
      - name: Run CLI integration tests
        run: |
          docker run --rm \
            -v $PWD/cli-results:/app/cli-results \
            unjucks:test-${{ matrix.base-image }}-${{ matrix.node-version }} \
            npm run test:cli:comprehensive
            
      - name: Validate environment compatibility
        run: |
          docker run --rm \
            unjucks:test-${{ matrix.base-image }}-${{ matrix.node-version }} \
            node scripts/environment-validation.js
            
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-matrix-${{ matrix.base-image }}-node${{ matrix.node-version }}
          path: |
            test-results/
            cli-results/
          retention-days: 14

  # ==================================================
  # Coordination Hooks Integration
  # ==================================================
  coordination-validation:
    name: Coordination Hooks Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: docker-test-matrix
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build coordination test image
        run: |
          docker build -f docker/Dockerfile.coordination -t unjucks:coordination .
          
      - name: Initialize swarm coordination
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workspace \
            unjucks:coordination \
            npx claude-flow@alpha hooks pre-task --description "Docker validation with coordination"
            
      - name: Run coordinated validation
        run: |
          docker-compose -f docker/docker-compose.validation.yml up --abort-on-container-exit
          
      - name: Export coordination metrics
        run: |
          docker run --rm \
            -v $PWD/coordination-reports:/app/reports \
            unjucks:coordination \
            npx claude-flow@alpha hooks session-end --export-metrics true
            
      - name: Upload coordination results
        uses: actions/upload-artifact@v4
        with:
          name: coordination-validation
          path: coordination-reports/
          retention-days: 14

  # ==================================================
  # Consolidated Reporting
  # ==================================================
  generate-validation-report:
    name: Generate Comprehensive Validation Report
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [security-validation, performance-validation, production-simulation, coordination-validation]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./validation-artifacts
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate consolidated report
        run: |
          node scripts/docker-validation-report.js \
            --input ./validation-artifacts \
            --output ./consolidated-report
            
      - name: Create validation dashboard
        run: |
          node scripts/validation-dashboard.js \
            --input ./validation-artifacts \
            --output ./consolidated-report/dashboard.html
            
      - name: Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: docker-validation-report
          path: ./consolidated-report/
          retention-days: 90
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './consolidated-report/summary.md';
            if (fs.existsSync(path)) {
              const summary = fs.readFileSync(path, 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Docker Validation Results\n\n${summary}`
              });
            }

  # ==================================================
  # Cleanup and Notification
  # ==================================================
  cleanup-and-notify:
    name: Cleanup & Notification
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: generate-validation-report
    if: always()
    
    steps:
      - name: Cleanup Docker resources
        run: |
          # Clean up any remaining containers, images, and volumes
          docker system prune -af --volumes || true
          
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const workflow_url = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            console.log(`Docker validation failed. Check: ${workflow_url}`);
            
            // Create issue for failed validation if this is main branch
            if (context.ref === 'refs/heads/main') {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Docker Validation Failed - ${new Date().toISOString().split('T')[0]}`,
                body: `Docker-based testing and validation pipeline failed.\n\nWorkflow: ${workflow_url}`,
                labels: ['bug', 'ci/cd', 'docker', 'high-priority']
              });
            }