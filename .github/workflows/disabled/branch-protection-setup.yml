name: üõ°Ô∏è Branch Protection Setup - Fortune 5

on:
  push:
    branches: [main]
    paths:
      - '.github/auto-merge-config.yml'
      - '.github/quality-gate-config.yml'
      - '.github/workflows/unified-quality-gate.yml'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all branch protection rules'
        required: false
        default: false
        type: boolean

jobs:
  setup-branch-protection:
    name: üõ°Ô∏è Configure Branch Protection
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üõ°Ô∏è Configure main branch protection
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            console.log('üõ°Ô∏è Configuring Fortune 5 branch protection for main branch...');
            
            try {
              await github.rest.repos.updateBranchProtection({
                owner,
                repo,
                branch: 'main',
                
                // Require status checks to pass before merging
                required_status_checks: {
                  strict: true,  // Require branches to be up to date
                  contexts: [
                    // Unified Quality Gate checks
                    'Unified Quality Gate - Fortune 5 Standards / configure-validation',
                    'Unified Quality Gate - Fortune 5 Standards / coverage-validation',
                    'Unified Quality Gate - Fortune 5 Standards / security-validation',
                    'Unified Quality Gate - Fortune 5 Standards / quality-analysis',
                    'Unified Quality Gate - Fortune 5 Standards / quality-gate-summary',
                    
                    // Core status checks
                    'Status Checks & Quality Gates / lint-check',
                    'Status Checks & Quality Gates / type-check',
                    'Status Checks & Quality Gates / unit-tests',
                    'Status Checks & Quality Gates / build-check',
                    'Status Checks & Quality Gates / security-audit',
                    'Status Checks & Quality Gates / status-check-summary',
                    
                    // Production validation
                    'Production Validation Pipeline / security-scan',
                    'Production Validation Pipeline / performance-benchmarks',
                    'Production Validation Pipeline / cross-platform',
                    
                    // Quality dashboard
                    'Quality Metrics Dashboard / collect-metrics',
                    'Quality Metrics Dashboard / quality-gate-enforcement'
                  ]
                },
                
                // Require pull request reviews before merging
                required_pull_request_reviews: {
                  required_approving_review_count: 2,
                  dismiss_stale_reviews: true,
                  require_code_owner_reviews: true,
                  require_last_push_approval: true,
                  
                  // Bypass restrictions for certain users (none for main branch)
                  bypass_pull_request_allowances: {
                    users: [],
                    teams: [],
                    apps: []
                  }
                },
                
                // Enforce restrictions for pushing to the branch
                enforce_admins: true,
                
                // Prevent force pushes
                allow_force_pushes: false,
                
                // Prevent deletions
                allow_deletions: false,
                
                // Require linear history
                required_linear_history: true,
                
                // Additional restrictions
                restrictions: null,  // No restrictions on who can push
                
                // Lock branch (prevent any pushes except through PRs)
                lock_branch: false
              });
              
              console.log('‚úÖ Main branch protection configured successfully');
              
            } catch (error) {
              console.error('‚ùå Failed to configure main branch protection:', error.message);
              throw error;
            }
            
      - name: üõ°Ô∏è Configure develop branch protection
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            console.log('üõ°Ô∏è Configuring develop branch protection...');
            
            try {
              await github.rest.repos.updateBranchProtection({
                owner,
                repo,
                branch: 'develop',
                
                // Require status checks (slightly relaxed for develop)
                required_status_checks: {
                  strict: true,
                  contexts: [
                    // Core quality checks
                    'Unified Quality Gate - Fortune 5 Standards / coverage-validation',
                    'Unified Quality Gate - Fortune 5 Standards / security-validation', 
                    'Unified Quality Gate - Fortune 5 Standards / quality-analysis',
                    
                    // Basic status checks
                    'Status Checks & Quality Gates / lint-check',
                    'Status Checks & Quality Gates / unit-tests',
                    'Status Checks & Quality Gates / build-check',
                    'Status Checks & Quality Gates / security-audit'
                  ]
                },
                
                // Require pull request reviews (relaxed for develop)
                required_pull_request_reviews: {
                  required_approving_review_count: 1,
                  dismiss_stale_reviews: true,
                  require_code_owner_reviews: false,
                  require_last_push_approval: false
                },
                
                // Less strict enforcement for develop
                enforce_admins: false,
                allow_force_pushes: false,
                allow_deletions: false,
                required_linear_history: false,
                restrictions: null
              });
              
              console.log('‚úÖ Develop branch protection configured successfully');
              
            } catch (error) {
              console.error('‚ùå Failed to configure develop branch protection:', error.message);
              // Don't fail the workflow if develop branch doesn't exist yet
              console.log('‚ÑπÔ∏è Develop branch may not exist yet, skipping...');
            }
            
      - name: üõ°Ô∏è Configure auto-merge settings
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            console.log('ü§ñ Configuring auto-merge settings...');
            
            try {
              // Enable auto-merge for the repository
              await github.rest.repos.update({
                owner,
                repo,
                allow_auto_merge: true,
                allow_merge_commit: true,
                allow_squash_merge: true,
                allow_rebase_merge: false,  // Disable rebase merge for consistency
                delete_branch_on_merge: true
              });
              
              console.log('‚úÖ Auto-merge settings configured successfully');
              
            } catch (error) {
              console.error('‚ùå Failed to configure auto-merge settings:', error.message);
              throw error;
            }
            
      - name: üìã Setup repository security settings
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            console.log('üîí Configuring repository security settings...');
            
            try {
              // Enable vulnerability alerts
              await github.rest.repos.enableVulnerabilityAlerts({
                owner,
                repo
              });
              
              console.log('‚úÖ Vulnerability alerts enabled');
              
              // Enable automated security fixes (Dependabot)
              await github.rest.repos.enableAutomatedSecurityFixes({
                owner,
                repo
              });
              
              console.log('‚úÖ Automated security fixes enabled');
              
            } catch (error) {
              console.error('‚ö†Ô∏è Some security settings may already be enabled:', error.message);
              // Don't fail the workflow for security settings that might already be enabled
            }
            
      - name: üìä Create required labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            console.log('üè∑Ô∏è Creating required labels...');
            
            const labels = [
              // Auto-merge labels
              { name: 'auto-merge', color: '0e8a16', description: 'Enable automatic merging when all checks pass' },
              { name: 'auto-merge-failed', color: 'd73a49', description: 'Auto-merge failed due to quality gate violations' },
              { name: 'manual-review-required', color: 'fbca04', description: 'Requires manual review before merging' },
              { name: 'do-not-merge', color: 'd73a49', description: 'Do not merge this PR' },
              
              // Size labels
              { name: 'size/small', color: '0e8a16', description: 'Small PR (< 50 lines changed)' },
              { name: 'size/medium', color: 'fbca04', description: 'Medium PR (50-200 lines changed)' },
              { name: 'size/large', color: 'd73a49', description: 'Large PR (> 200 lines changed)' },
              
              // Type labels
              { name: 'breaking-change', color: 'd73a49', description: 'Contains breaking changes' },
              { name: 'security', color: 'b60205', description: 'Security-related changes' },
              { name: 'hotfix', color: 'ff6b00', description: 'Hotfix for critical issues' },
              { name: 'dependencies', color: '0366d6', description: 'Dependency updates' },
              { name: 'documentation', color: '0052cc', description: 'Documentation updates' },
              { name: 'tests', color: '1d76db', description: 'Test-related changes' },
              { name: 'enhancement', color: 'a2eeef', description: 'New feature or enhancement' },
              { name: 'bug', color: 'd73a49', description: 'Bug fix' },
              { name: 'ci/cd', color: '0052cc', description: 'CI/CD workflow changes' },
              { name: 'templates', color: 'c5def5', description: 'Template-related changes' },
              
              // Quality labels
              { name: 'quality/excellent', color: '0e8a16', description: 'Excellent code quality (Score 90+)' },
              { name: 'quality/good', color: 'fbca04', description: 'Good code quality (Score 70-89)' },
              { name: 'quality/needs-improvement', color: 'ff9800', description: 'Quality needs improvement (Score 50-69)' },
              { name: 'quality/critical', color: 'd73a49', description: 'Critical quality issues (Score < 50)' },
              
              // Priority labels  
              { name: 'priority/critical', color: 'd73a49', description: 'Critical priority' },
              { name: 'priority/high', color: 'ff6b00', description: 'High priority' },
              { name: 'priority/medium', color: 'fbca04', description: 'Medium priority' },
              { name: 'priority/low', color: '0e8a16', description: 'Low priority' }
            ];
            
            for (const label of labels) {
              try {
                await github.rest.issues.createLabel({
                  owner,
                  repo,
                  name: label.name,
                  color: label.color,
                  description: label.description
                });
                console.log(`‚úÖ Created label: ${label.name}`);
              } catch (error) {
                if (error.status === 422) {
                  console.log(`‚ÑπÔ∏è Label already exists: ${label.name}`);
                } else {
                  console.error(`‚ùå Failed to create label ${label.name}:`, error.message);
                }
              }
            }
            
      - name: üìù Create branch protection summary
        run: |
          echo "## üõ°Ô∏è Branch Protection Configuration Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Main Branch Protection" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **2 Required Reviewers** (with code owner requirement)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **15+ Required Status Checks** (Fortune 5 quality gates)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Dismiss Stale Reviews** on new commits" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Enforce for Administrators**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Prevent Force Pushes**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Prevent Branch Deletion**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Require Linear History**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Develop Branch Protection" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **1 Required Reviewer**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **7+ Required Status Checks** (Core quality gates)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Dismiss Stale Reviews** on new commits" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Prevent Force Pushes**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Auto-Merge Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Auto-merge enabled** for eligible PRs" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Squash merge preferred** for clean history" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Auto-delete branches** after merge" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Settings" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Vulnerability alerts** enabled" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Automated security fixes** enabled (Dependabot)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quality Gates Applied" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è **Code Coverage**: 85% lines, 90% functions, 80% branches" >> $GITHUB_STEP_SUMMARY
          echo "- üîí **Security**: Zero critical/high vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- üìê **Complexity**: Max 10 cyclomatic complexity" >> $GITHUB_STEP_SUMMARY
          echo "- üîÑ **Duplication**: Max 3% code duplication" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ö° **Performance**: 250KB bundle size limit" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Fortune 5 enterprise standards are now enforced! üèõÔ∏è**"