name: Repository Size Monitor

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  monitor-repo-size:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for size analysis
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tree ncdu
    
    - name: Analyze repository size
      id: size-check
      run: |
        # Get current repository size
        REPO_SIZE=$(du -sh . | cut -f1)
        REPO_SIZE_KB=$(du -sk . | cut -f1)
        
        # Size limits (adjust as needed)
        MAX_REPO_SIZE_MB=50
        MAX_REPO_SIZE_KB=$((MAX_REPO_SIZE_MB * 1024))
        
        echo "current-size=$REPO_SIZE" >> $GITHUB_OUTPUT
        echo "current-size-kb=$REPO_SIZE_KB" >> $GITHUB_OUTPUT
        echo "max-size-kb=$MAX_REPO_SIZE_KB" >> $GITHUB_OUTPUT
        
        # Analyze large directories
        echo "## Repository Size Analysis" > size-report.md
        echo "**Current size:** $REPO_SIZE" >> size-report.md
        echo "**Limit:** ${MAX_REPO_SIZE_MB}MB" >> size-report.md
        echo "" >> size-report.md
        
        # Top 10 largest directories
        echo "### Top 10 Largest Directories" >> size-report.md
        echo '```' >> size-report.md
        du -sh */ 2>/dev/null | sort -hr | head -10 >> size-report.md || echo "No subdirectories found" >> size-report.md
        echo '```' >> size-report.md
        echo "" >> size-report.md
        
        # Check for problematic patterns
        echo "### Problematic Patterns Check" >> size-report.md
        echo '```' >> size-report.md
        
        echo "Backup files (*.bak*):" >> size-report.md
        find . -name "*.bak*" -type f | wc -l >> size-report.md
        
        echo "Temporary directories (.tmp, tmp, temp):" >> size-report.md
        find . -type d \( -name ".tmp" -o -name "tmp" -o -name "temp" \) | wc -l >> size-report.md
        
        echo "Build artifacts (.nuxt, .output, dist):" >> size-report.md
        find . -type d \( -name ".nuxt" -o -name ".output" -o -name "dist" \) | wc -l >> size-report.md
        
        echo "Node modules (excluding root):" >> size-report.md
        find . -name "node_modules" -not -path "./node_modules" -type d | wc -l >> size-report.md
        
        echo "Large files (>1MB):" >> size-report.md
        find . -type f -size +1M -not -path "./.git/*" | wc -l >> size-report.md
        
        echo '```' >> size-report.md
        echo "" >> size-report.md
        
        # File type analysis
        echo "### File Type Distribution" >> size-report.md
        echo '```' >> size-report.md
        find . -type f -not -path "./.git/*" | sed 's/.*\.//' | sort | uniq -c | sort -nr | head -10 >> size-report.md
        echo '```' >> size-report.md
        
        # Git history size analysis
        echo "### Repository Growth Analysis" >> size-report.md
        echo '```' >> size-report.md
        echo "Recent commits adding large amounts of data:" >> size-report.md
        git log --oneline --since="1 month ago" --pretty=format:"%h %s" | head -5 >> size-report.md
        echo '```' >> size-report.md
    
    - name: Check size limits
      run: |
        if [ "${{ steps.size-check.outputs.current-size-kb }}" -gt "${{ steps.size-check.outputs.max-size-kb }}" ]; then
          echo "‚ùå Repository size exceeds limit!"
          echo "Current: ${{ steps.size-check.outputs.current-size }}"
          echo "Limit: 50MB"
          exit 1
        else
          echo "‚úÖ Repository size within limits"
          echo "Current: ${{ steps.size-check.outputs.current-size }}"
        fi
    
    - name: Detect test bloat patterns
      run: |
        echo "üîç Scanning for test bloat patterns..."
        
        # Count problematic files
        BACKUP_FILES=$(find . -name "*.bak*" -type f | wc -l)
        TEMP_DIRS=$(find . -type d \( -name ".tmp" -o -name "tmp" -o -name "temp" \) | wc -l)
        BUILD_ARTIFACTS=$(find . -type d \( -name ".nuxt" -o -name ".output" -o -name "dist" \) -not -path "./node_modules/*" | wc -l)
        LARGE_FILES=$(find . -type f -size +1M -not -path "./.git/*" | wc -l)
        
        ISSUES_FOUND=0
        
        if [ "$BACKUP_FILES" -gt "10" ]; then
          echo "‚ö†Ô∏è WARNING: $BACKUP_FILES backup files found (should be <10)"
          ISSUES_FOUND=1
        fi
        
        if [ "$TEMP_DIRS" -gt "0" ]; then
          echo "‚ö†Ô∏è WARNING: $TEMP_DIRS temporary directories found (should be 0)"
          ISSUES_FOUND=1
        fi
        
        if [ "$BUILD_ARTIFACTS" -gt "0" ]; then
          echo "‚ö†Ô∏è WARNING: $BUILD_ARTIFACTS build artifact directories found (should be 0)"
          ISSUES_FOUND=1
        fi
        
        if [ "$LARGE_FILES" -gt "5" ]; then
          echo "‚ö†Ô∏è WARNING: $LARGE_FILES large files (>1MB) found (should be <5)"
          ISSUES_FOUND=1
        fi
        
        if [ "$ISSUES_FOUND" -eq "1" ]; then
          echo ""
          echo "üîß RECOMMENDED ACTIONS:"
          echo "1. Run: ./scripts/cleanup-test-bloat.sh"
          echo "2. Review and update .gitignore"
          echo "3. Use git hooks to prevent future bloat"
          echo ""
          # Don't fail the build, just warn
          exit 0
        else
          echo "‚úÖ No test bloat patterns detected"
        fi
    
    - name: Comment size report on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('size-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üìä Repository Size Report\n\n${report}`
          });
    
    - name: Upload size report
      uses: actions/upload-artifact@v4
      with:
        name: size-report
        path: size-report.md
        retention-days: 30

  cleanup-suggestions:
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Repository cleanup suggestions
      run: |
        echo "üßπ REPOSITORY CLEANUP SUGGESTIONS"
        echo "================================="
        echo ""
        echo "If the size check failed, try these steps:"
        echo ""
        echo "1. IMMEDIATE CLEANUP:"
        echo "   git clone <repo-url> temp-repo"
        echo "   cd temp-repo"
        echo "   ./scripts/cleanup-test-bloat.sh"
        echo "   git add ."
        echo "   git commit -m 'chore: cleanup test data bloat'"
        echo "   git push"
        echo ""
        echo "2. PREVENTION:"
        echo "   chmod +x .githooks/pre-commit"
        echo "   git config core.hooksPath .githooks"
        echo ""
        echo "3. MONITORING:"
        echo "   # This CI job will continue monitoring size"
        echo "   # Weekly reports help catch bloat early"
        echo ""
        echo "4. GITIGNORE UPDATES:"
        echo "   # Review .gitignore patterns"
        echo "   # Add project-specific exclusions"