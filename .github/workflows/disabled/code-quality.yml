name: 🔍 Code Quality Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**/*.js'
      - 'scripts/**/*.js'
      - 'bin/**/*.js'
      - '*.js'
      - '.eslintrc*'
      - '.prettierrc*'
      - 'eslint.config.*'
      - 'prettier.config.*'
      - 'package.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**/*.js'
      - 'scripts/**/*.js'
      - 'bin/**/*.js'
      - '*.js'
      - '.eslintrc*'
      - '.prettierrc*'
      - 'eslint.config.*'
      - 'prettier.config.*'
      - 'package.json'
  workflow_dispatch:
    inputs:
      quality_level:
        description: 'Quality validation level'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - 'basic'
          - 'comprehensive'
          - 'strict'
      complexity_threshold:
        description: 'Cyclomatic complexity threshold'
        required: false
        default: '15'
        type: string

env:
  NODE_VERSION: '18'
  QUALITY_THRESHOLD: ${{ github.event.inputs.complexity_threshold || '15' }}
  QUALITY_LEVEL: ${{ github.event.inputs.quality_level || 'comprehensive' }}

jobs:
  # ============================================================================
  # LINT VALIDATION
  # ============================================================================
  lint-validation:
    name: 🧹 ESLint Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: 🔧 Setup Claude Flow coordination
        run: |
          npx claude-flow@alpha hooks pre-task --description "ESLint validation with quality focus"
          
      - name: 🧹 Run ESLint (Quality Config)
        run: |
          # Use quality-focused ESLint config
          npx eslint --config .eslintrc.quality.js \
            --format json \
            --output-file eslint-quality-report.json \
            src/ scripts/ bin/ || true
            
          # Also run with standard config for comparison
          npx eslint --config .eslintrc.js \
            --format json \
            --output-file eslint-standard-report.json \
            src/ scripts/ bin/ || true
            
      - name: 📊 Process ESLint Results
        run: |
          echo "## 🧹 ESLint Quality Report" >> $GITHUB_STEP_SUMMARY
          
          # Quality config results
          QUALITY_ERRORS=$(cat eslint-quality-report.json | jq '[.[].messages[] | select(.severity == 2)] | length')
          QUALITY_WARNINGS=$(cat eslint-quality-report.json | jq '[.[].messages[] | select(.severity == 1)] | length')
          
          # Standard config results  
          STANDARD_ERRORS=$(cat eslint-standard-report.json | jq '[.[].messages[] | select(.severity == 2)] | length')
          STANDARD_WARNINGS=$(cat eslint-standard-report.json | jq '[.[].messages[] | select(.severity == 1)] | length')
          
          echo "### Quality Config Results" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Errors: $QUALITY_ERRORS" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ Warnings: $QUALITY_WARNINGS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Standard Config Comparison" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Errors: $STANDARD_ERRORS" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ Warnings: $STANDARD_WARNINGS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Set step output for quality gates
          echo "quality_errors=$QUALITY_ERRORS" >> $GITHUB_OUTPUT
          echo "quality_warnings=$QUALITY_WARNINGS" >> $GITHUB_OUTPUT
          
      - name: 🚨 Quality Gate Check
        if: steps.lint-check.outputs.quality_errors > 50
        run: |
          echo "❌ Quality gate failed: Too many ESLint errors (${{ steps.lint-check.outputs.quality_errors }})"
          echo "Maximum allowed errors for quality validation: 50"
          exit 1
          
      - name: 🔄 Coordination hooks
        if: always()
        run: |
          npx claude-flow@alpha hooks post-task --task-id "eslint-validation"
          npx claude-flow@alpha hooks notify --message "ESLint validation completed with ${{ steps.lint-check.outputs.quality_errors }} errors"
          
      - name: 📤 Upload ESLint Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-reports
          path: |
            eslint-quality-report.json
            eslint-standard-report.json
          retention-days: 7

  # ============================================================================
  # CODE FORMATTING VALIDATION
  # ============================================================================
  format-validation:
    name: 💅 Prettier Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🔧 Setup coordination
        run: |
          npx claude-flow@alpha hooks pre-task --description "Prettier formatting validation"
          
      - name: 💅 Check Prettier formatting
        run: |
          # Check formatting with quality config
          npx prettier --config .prettierrc.quality \
            --check \
            "src/**/*.js" \
            "scripts/**/*.js" \
            "bin/**/*.js" \
            "*.js" \
            --write-mode diff > prettier-diff.txt || true
            
      - name: 📊 Format Report
        run: |
          echo "## 💅 Prettier Formatting Report" >> $GITHUB_STEP_SUMMARY
          
          if [[ -s prettier-diff.txt ]]; then
            echo "### ⚠️ Files requiring formatting:" >> $GITHUB_STEP_SUMMARY
            echo '```diff' >> $GITHUB_STEP_SUMMARY
            head -n 50 prettier-diff.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            UNFORMATTED_COUNT=$(grep -c "^[<>]" prettier-diff.txt || echo "0")
            echo "formatting_issues=$UNFORMATTED_COUNT" >> $GITHUB_OUTPUT
          else
            echo "✅ All files are properly formatted" >> $GITHUB_STEP_SUMMARY
            echo "formatting_issues=0" >> $GITHUB_OUTPUT
          fi
          
      - name: 🚨 Formatting Quality Gate
        if: steps.format-check.outputs.formatting_issues > 20
        run: |
          echo "❌ Too many formatting issues found"
          echo "Run 'npm run lint:fix' to auto-format code"
          exit 1
          
      - name: 🔄 Post coordination
        if: always()
        run: |
          npx claude-flow@alpha hooks post-task --task-id "prettier-validation"

  # ============================================================================
  # COMPLEXITY ANALYSIS
  # ============================================================================
  complexity-analysis:
    name: 🧠 Complexity Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🔧 Setup coordination
        run: |
          npx claude-flow@alpha hooks pre-task --description "Cyclomatic complexity analysis"
          
      - name: 🧠 Run Complexity Analysis
        run: |
          # Make complexity analyzer executable
          chmod +x scripts/quality/complexity-analyzer.js
          
          # Run complexity analysis
          node scripts/quality/complexity-analyzer.js \
            --pattern "src/**/*.js" \
            --threshold ${{ env.QUALITY_THRESHOLD }} \
            --output complexity-report.json
            
      - name: 📊 Process Complexity Results
        run: |
          echo "## 🧠 Complexity Analysis Report" >> $GITHUB_STEP_SUMMARY
          
          # Extract key metrics from report
          TOTAL_FILES=$(cat complexity-report.json | jq '.summary.filesAnalyzed')
          AVG_COMPLEXITY=$(cat complexity-report.json | jq '.summary.averageComplexity')
          AVG_MAINTAINABILITY=$(cat complexity-report.json | jq '.summary.averageMaintainability')
          QUALITY_GRADE=$(cat complexity-report.json | jq -r '.summary.qualityGrade')
          TOTAL_ISSUES=$(cat complexity-report.json | jq '.summary.totalIssues')
          
          echo "### 📈 Summary Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- 📁 Files Analyzed: $TOTAL_FILES" >> $GITHUB_STEP_SUMMARY
          echo "- 🧠 Average Complexity: $AVG_COMPLEXITY" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 Average Maintainability: ${AVG_MAINTAINABILITY}%" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 Quality Grade: $QUALITY_GRADE" >> $GITHUB_STEP_SUMMARY
          echo "- 🚨 Total Issues: $TOTAL_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Risk distribution
          echo "### ⚠️ Risk Distribution" >> $GITHUB_STEP_SUMMARY
          echo "- 🟢 Low Risk: $(cat complexity-report.json | jq '.summary.riskDistribution.LOW // 0') files" >> $GITHUB_STEP_SUMMARY
          echo "- 🟡 Moderate Risk: $(cat complexity-report.json | jq '.summary.riskDistribution.MODERATE // 0') files" >> $GITHUB_STEP_SUMMARY
          echo "- 🟠 High Risk: $(cat complexity-report.json | jq '.summary.riskDistribution.HIGH // 0') files" >> $GITHUB_STEP_SUMMARY
          echo "- 🔴 Critical Risk: $(cat complexity-report.json | jq '.summary.riskDistribution.CRITICAL // 0') files" >> $GITHUB_STEP_SUMMARY
          
          # Set outputs for quality gates
          echo "quality_grade=$QUALITY_GRADE" >> $GITHUB_OUTPUT
          echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
          echo "avg_complexity=$AVG_COMPLEXITY" >> $GITHUB_OUTPUT
          
      - name: 🚨 Complexity Quality Gate
        if: steps.complexity-check.outputs.quality_grade == 'F'
        run: |
          echo "❌ Complexity quality gate failed: Grade F"
          echo "Average complexity: ${{ steps.complexity-check.outputs.avg_complexity }}"
          echo "Total issues: ${{ steps.complexity-check.outputs.total_issues }}"
          exit 1
          
      - name: 🔄 Post coordination
        if: always()
        run: |
          npx claude-flow@alpha hooks post-task --task-id "complexity-analysis"
          npx claude-flow@alpha hooks notify --message "Complexity analysis completed: Grade ${{ steps.complexity-check.outputs.quality_grade }}"
          
      - name: 📤 Upload Complexity Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: complexity-report
          path: complexity-report.json
          retention-days: 30

  # ============================================================================
  # JSDOC VALIDATION
  # ============================================================================
  jsdoc-validation:
    name: 📝 JSDoc Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g jsdoc jsdoc-to-markdown
          
      - name: 🔧 Setup coordination
        run: |
          npx claude-flow@alpha hooks pre-task --description "JSDoc validation and documentation check"
          
      - name: 📝 Validate JSDoc Comments
        run: |
          # Create JSDoc config
          cat > jsdoc.config.json << 'EOF'
          {
            "source": {
              "include": ["src/"],
              "includePattern": "\\.(js|mjs)$",
              "exclude": ["node_modules/", "tests/", "**/*.test.js", "**/*.spec.js"]
            },
            "opts": {
              "destination": "./docs/jsdoc/",
              "readme": "./README.md"
            },
            "plugins": ["plugins/markdown"],
            "templates": {
              "cleverLinks": false,
              "monospaceLinks": false
            }
          }
          EOF
          
          # Generate JSDoc documentation (this will fail if JSDoc syntax is invalid)
          jsdoc -c jsdoc.config.json --dry-run > jsdoc-validation.log 2>&1 || true
          
          # Check for JSDoc errors
          if grep -q "ERROR" jsdoc-validation.log; then
            echo "JSDoc validation errors found:"
            grep "ERROR" jsdoc-validation.log
            echo "jsdoc_errors=true" >> $GITHUB_OUTPUT
          else
            echo "jsdoc_errors=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 📊 JSDoc Coverage Analysis
        run: |
          # Simple JSDoc coverage check
          TOTAL_FUNCTIONS=$(grep -r "function\|=>" src/ --include="*.js" | wc -l)
          DOCUMENTED_FUNCTIONS=$(grep -r "/\*\*" src/ --include="*.js" -A 5 | grep -c "function\|=>")
          
          if [ $TOTAL_FUNCTIONS -gt 0 ]; then
            COVERAGE=$((DOCUMENTED_FUNCTIONS * 100 / TOTAL_FUNCTIONS))
          else
            COVERAGE=0
          fi
          
          echo "## 📝 JSDoc Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Documentation Coverage: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Total Functions: $TOTAL_FUNCTIONS" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Documented Functions: $DOCUMENTED_FUNCTIONS" >> $GITHUB_STEP_SUMMARY
          
          echo "jsdoc_coverage=$COVERAGE" >> $GITHUB_OUTPUT
          
      - name: 🚨 Documentation Quality Gate
        if: env.QUALITY_LEVEL == 'strict' && steps.jsdoc-check.outputs.jsdoc_coverage < 50
        run: |
          echo "❌ Documentation quality gate failed"
          echo "JSDoc coverage: ${{ steps.jsdoc-check.outputs.jsdoc_coverage }}%"
          echo "Minimum required for strict mode: 50%"
          exit 1
          
      - name: 🔄 Post coordination
        if: always()
        run: |
          npx claude-flow@alpha hooks post-task --task-id "jsdoc-validation"

  # ============================================================================
  # CODE COVERAGE ANALYSIS
  # ============================================================================
  coverage-analysis:
    name: ☂️ Code Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g c8
          
      - name: 🔧 Setup coordination
        run: |
          npx claude-flow@alpha hooks pre-task --description "Code coverage analysis with quality thresholds"
          
      - name: ☂️ Run Coverage Analysis
        run: |
          # Run tests with coverage
          c8 --reporter=json --reporter=text --reporter=html \
             --exclude='**/tests/**' \
             --exclude='**/*.test.js' \
             --exclude='**/*.spec.js' \
             --exclude='**/node_modules/**' \
             --exclude='**/coverage/**' \
             npm test || true
             
      - name: 📊 Process Coverage Results
        run: |
          echo "## ☂️ Code Coverage Report" >> $GITHUB_STEP_SUMMARY
          
          if [ -f coverage/coverage-summary.json ]; then
            LINES_PCT=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
            FUNCTIONS_PCT=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
            BRANCHES_PCT=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
            STATEMENTS_PCT=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
            
            echo "### 📈 Coverage Metrics" >> $GITHUB_STEP_SUMMARY
            echo "- 📄 Lines: ${LINES_PCT}%" >> $GITHUB_STEP_SUMMARY
            echo "- 🔧 Functions: ${FUNCTIONS_PCT}%" >> $GITHUB_STEP_SUMMARY
            echo "- 🌿 Branches: ${BRANCHES_PCT}%" >> $GITHUB_STEP_SUMMARY
            echo "- 📝 Statements: ${STATEMENTS_PCT}%" >> $GITHUB_STEP_SUMMARY
            
            echo "coverage_lines=$LINES_PCT" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Coverage report not generated" >> $GITHUB_STEP_SUMMARY
            echo "coverage_lines=0" >> $GITHUB_OUTPUT
          fi
          
      - name: 🚨 Coverage Quality Gate
        if: env.QUALITY_LEVEL == 'strict' && steps.coverage-check.outputs.coverage_lines < 60
        run: |
          echo "❌ Coverage quality gate failed"
          echo "Line coverage: ${{ steps.coverage-check.outputs.coverage_lines }}%"
          echo "Minimum required for strict mode: 60%"
          exit 1
          
      - name: 🔄 Post coordination
        if: always()
        run: |
          npx claude-flow@alpha hooks post-task --task-id "coverage-analysis"
          
      - name: 📤 Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
          retention-days: 30

  # ============================================================================
  # QUALITY GATES SUMMARY
  # ============================================================================
  quality-gates-summary:
    name: 🎯 Quality Gates Summary
    runs-on: ubuntu-latest
    needs: [lint-validation, format-validation, complexity-analysis, jsdoc-validation, coverage-analysis]
    if: always()
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup coordination
        run: |
          npx claude-flow@alpha hooks pre-task --description "Quality gates summary and final validation"
          
      - name: 🎯 Generate Quality Summary
        run: |
          echo "# 🎯 Code Quality Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status summary
          echo "## 📊 Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧹 ESLint | ${{ needs.lint-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} | Quality-focused linting |" >> $GITHUB_STEP_SUMMARY
          echo "| 💅 Prettier | ${{ needs.format-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} | Code formatting |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧠 Complexity | ${{ needs.complexity-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} | Cyclomatic complexity |" >> $GITHUB_STEP_SUMMARY
          echo "| 📝 JSDoc | ${{ needs.jsdoc-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} | Documentation validation |" >> $GITHUB_STEP_SUMMARY
          echo "| ☂️ Coverage | ${{ needs.coverage-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} | Test coverage analysis |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Quality level badge
          if [[ "${{ needs.lint-validation.result }}" == "success" && \
                "${{ needs.format-validation.result }}" == "success" && \
                "${{ needs.complexity-analysis.result }}" == "success" ]]; then
            echo "## 🏆 Overall Status: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
            echo "quality_status=passed" >> $GITHUB_OUTPUT
          else
            echo "## 🚨 Overall Status: ❌ FAILED" >> $GITHUB_STEP_SUMMARY
            echo "quality_status=failed" >> $GITHUB_OUTPUT
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Quality Level: ${{ env.QUALITY_LEVEL }}" >> $GITHUB_STEP_SUMMARY
          echo "- Complexity Threshold: ${{ env.QUALITY_THRESHOLD }}" >> $GITHUB_STEP_SUMMARY
          echo "- Node Version: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          
      - name: 🚨 Final Quality Gate
        if: steps.quality-summary.outputs.quality_status == 'failed'
        run: |
          echo "❌ Quality validation failed"
          echo "One or more quality checks did not pass the defined thresholds"
          exit 1
          
      - name: 🎉 Quality Success
        if: steps.quality-summary.outputs.quality_status == 'passed'
        run: |
          echo "✅ Quality validation passed successfully"
          echo "All quality gates met the defined standards"
          
      - name: 🔄 Final coordination
        if: always()
        run: |
          npx claude-flow@alpha hooks post-task --task-id "quality-gates-summary"
          npx claude-flow@alpha hooks session-end --export-metrics true
          npx claude-flow@alpha hooks notify --message "Quality validation completed: ${{ steps.quality-summary.outputs.quality_status }}"

  # ============================================================================
  # AUTO-FIX (ON WORKFLOW DISPATCH)
  # ============================================================================
  auto-fix:
    name: 🔧 Auto-Fix Quality Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.quality_level == 'auto-fix'
    needs: [lint-validation, format-validation]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🔧 Auto-fix issues
        run: |
          # Fix ESLint issues
          npx eslint --config .eslintrc.quality.js --fix src/ scripts/ bin/ || true
          
          # Fix Prettier formatting
          npx prettier --config .prettierrc.quality --write "src/**/*.js" "scripts/**/*.js" "bin/**/*.js" "*.js"
          
      - name: 💾 Commit fixes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "🔧 Auto-fix: Apply ESLint and Prettier fixes

            - Applied ESLint auto-fixes for quality rules
            - Standardized code formatting with Prettier
            - Automated via GitHub Actions quality workflow
            
            Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
            git push
          fi