name: Cross-Platform Compatibility CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly to catch regressions
    - cron: '0 2 * * 1'

jobs:
  cross-platform-test:
    name: Test on ${{ matrix.os }} with Node ${{ matrix.node-version }} using ${{ matrix.package-manager }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]
        package-manager: [npm, pnpm]
        include:
          # Test Apple Silicon specifically
          - os: macos-14
            node-version: 22
            package-manager: npm
          # Test older Windows for compatibility
          - os: windows-2019
            node-version: 18
            package-manager: npm

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: ${{ matrix.package-manager }}

      - name: Setup pnpm (if needed)
        if: matrix.package-manager == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0

      - name: Get package manager cache directory
        id: cache-dir
        shell: bash
        run: |
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            echo "cache-dir=$(pnpm store path)" >> $GITHUB_OUTPUT
          else
            echo "cache-dir=$(npm config get cache)" >> $GITHUB_OUTPUT
          fi

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-dir.outputs.cache-dir }}
          key: ${{ runner.os }}-${{ matrix.package-manager }}-${{ matrix.node-version }}-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.package-manager }}-${{ matrix.node-version }}-

      - name: Install dependencies with ${{ matrix.package-manager }}
        shell: bash
        run: |
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            pnpm install --frozen-lockfile
          else
            npm ci
          fi

      - name: Run platform compatibility tests
        shell: bash
        run: |
          echo "=== Platform Information ==="
          node -e "
            console.log('Platform:', process.platform);
            console.log('Architecture:', process.arch);
            console.log('Node.js:', process.version);
            console.log('Package Manager: ${{ matrix.package-manager }}');
          "

      - name: Test native module loading
        shell: bash
        run: |
          echo "=== Native Module Compatibility ==="
          node -e "
            const modules = ['bcrypt', 'chalk', 'fs-extra', 'glob', 'chokidar'];
            console.log('Testing native module compatibility...');
            
            for (const mod of modules) {
              try {
                require(mod);
                console.log('✅', mod, '- loads successfully');
              } catch (error) {
                console.log('❌', mod, '- failed:', error.message);
                if (mod === 'bcrypt') process.exit(1); // bcrypt is critical
              }
            }
          "

      - name: Test path handling
        shell: bash
        run: |
          echo "=== Path Separator Compatibility ==="
          node -e "
            const { join, resolve, sep } = require('path');
            const testPaths = [
              'src/lib/test.js',
              'templates/_templates/command',
              'path with spaces/file.txt'
            ];
            
            console.log('Platform path separator:', sep);
            testPaths.forEach(p => {
              const normalized = join(...p.split(/[\/\\\\]+/));
              console.log('✅', p, '->', normalized);
            });
          "

      - name: Test CLI binary execution
        shell: bash
        run: |
          echo "=== CLI Binary Compatibility ==="
          if [ -f "bin/unjucks.cjs" ]; then
            node bin/unjucks.cjs --version || echo "❌ CLI version check failed"
            echo "✅ CLI binary found and executable"
          else
            echo "❌ CLI binary not found"
            exit 1
          fi

      - name: Test package.json scripts
        shell: bash
        run: |
          echo "=== Package Scripts Test ==="
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            pnpm run build || echo "Build may not be required"
          else
            npm run build || echo "Build may not be required"
          fi

      - name: Test file operations
        shell: bash
        run: |
          echo "=== File System Operations ==="
          node -e "
            const fs = require('fs');
            const path = require('path');
            const os = require('os');
            
            // Create test directory
            const testDir = path.join(os.tmpdir(), 'unjucks-test-' + Date.now());
            fs.mkdirSync(testDir, { recursive: true });
            console.log('✅ Directory creation successful');
            
            // Test file with special characters
            const specialFiles = [
              'normal-file.txt',
              'file with spaces.txt',
              'file-with-dashes.txt'
            ];
            
            // Add platform-specific test files
            if (process.platform !== 'win32') {
              specialFiles.push('file:with:colons.txt');
            }
            
            specialFiles.forEach(filename => {
              const filepath = path.join(testDir, filename);
              fs.writeFileSync(filepath, 'test content');
              const content = fs.readFileSync(filepath, 'utf8');
              if (content === 'test content') {
                console.log('✅', filename, '- read/write successful');
              } else {
                console.log('❌', filename, '- read/write failed');
              }
            });
            
            // Cleanup
            fs.rmSync(testDir, { recursive: true, force: true });
            console.log('✅ Cleanup successful');
          "

      - name: Test package manager specific features
        shell: bash
        run: |
          echo "=== Package Manager Specific Tests ==="
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            echo "Testing pnpm features..."
            pnpm list --depth=0 --prod || echo "pnpm list failed"
            echo "✅ pnpm specific tests completed"
          else
            echo "Testing npm features..."
            npm list --depth=0 --production || echo "npm list failed"
            echo "✅ npm specific tests completed"
          fi

      - name: Windows-specific tests
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo === Windows Specific Tests ===
          node -e "
            console.log('Testing Windows-specific functionality...');
            
            // Test path length handling
            const longPath = 'C:\\\\' + 'very-long-directory-name\\\\'.repeat(10) + 'file.txt';
            console.log('Long path length:', longPath.length);
            if (longPath.length > 260) {
              console.log('⚠️ Path exceeds Windows 260 character limit');
            }
            
            // Test reserved names
            const reserved = ['CON', 'PRN', 'AUX', 'NUL', 'COM1', 'LPT1'];
            reserved.forEach(name => {
              console.log('✅ Reserved name check:', name);
            });
            
            console.log('✅ Windows-specific tests completed');
          "

      - name: macOS-specific tests
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "=== macOS Specific Tests ==="
          node -e "
            console.log('Testing macOS-specific functionality...');
            console.log('Architecture:', process.arch);
            
            if (process.arch === 'arm64') {
              console.log('✅ Running on Apple Silicon');
            } else if (process.arch === 'x64') {
              console.log('✅ Running on Intel Mac');
            }
            
            // Test case sensitivity
            const fs = require('fs');
            const os = require('os');
            const path = require('path');
            
            const testDir = path.join(os.tmpdir(), 'case-test-' + Date.now());
            fs.mkdirSync(testDir);
            
            try {
              fs.writeFileSync(path.join(testDir, 'Test.txt'), 'content');
              fs.writeFileSync(path.join(testDir, 'test.txt'), 'content');
              console.log('✅ File system is case-sensitive');
            } catch (error) {
              console.log('✅ File system is case-insensitive');
            } finally {
              fs.rmSync(testDir, { recursive: true, force: true });
            }
            
            console.log('✅ macOS-specific tests completed');
          "

      - name: Linux-specific tests
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "=== Linux Specific Tests ==="
          node -e "
            console.log('Testing Linux-specific functionality...');
            
            // Test shebang execution
            const fs = require('fs');
            const { execSync } = require('child_process');
            const os = require('os');
            const path = require('path');
            
            const testScript = '#!/usr/bin/env node\nconsole.log(\"Shebang test successful\");';
            const scriptPath = path.join(os.tmpdir(), 'test-shebang.js');
            
            fs.writeFileSync(scriptPath, testScript);
            execSync('chmod +x ' + scriptPath);
            
            try {
              const output = execSync(scriptPath, { encoding: 'utf8' });
              if (output.includes('Shebang test successful')) {
                console.log('✅ Shebang execution works');
              }
            } catch (error) {
              console.log('❌ Shebang execution failed:', error.message);
            } finally {
              fs.unlinkSync(scriptPath);
            }
            
            console.log('✅ Linux-specific tests completed');
          "

      - name: Generate platform report
        shell: bash
        run: |
          echo "=== Platform Compatibility Report ==="
          node -e "
            const report = {
              platform: process.platform,
              arch: process.arch,
              nodeVersion: process.version,
              packageManager: '${{ matrix.package-manager }}',
              os: '${{ matrix.os }}',
              timestamp: new Date().toISOString(),
              tests: {
                nativeModules: 'PASSED',
                pathHandling: 'PASSED',
                cliExecution: 'PASSED',
                fileOperations: 'PASSED'
              }
            };
            
            console.log('Platform Compatibility Report:');
            console.log(JSON.stringify(report, null, 2));
          "

  # Aggregate results
  compatibility-summary:
    needs: cross-platform-test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate compatibility summary
        run: |
          echo "=== Cross-Platform Compatibility Summary ==="
          echo "All platform tests completed."
          echo "Check individual job results for platform-specific issues."
          
          # This job will show as failed if any platform tests failed
          if [ "${{ needs.cross-platform-test.result }}" = "failure" ]; then
            echo "❌ Some platform tests failed - review logs"
            exit 1
          else
            echo "✅ All platform tests passed"
          fi