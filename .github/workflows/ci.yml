name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run build validation
        run: npm run build:validate
        
      - name: Setup LaTeX (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-latex-base texlive-latex-extra texlive-fonts-recommended
        continue-on-error: true
        
      - name: Test LaTeX build (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: npm run build:latex || echo "LaTeX build skipped - no documents found"
        continue-on-error: true
        
      - name: Run smoke tests
        run: npm run test:smoke
        
      - name: Run full test suite
        run: npm test
        
      - name: Run linting
        run: npm run lint
        
      - name: Security audit
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            test-results.xml
            coverage/
          retention-days: 7

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security scan
        run: npm run security:scan
        continue-on-error: true
        
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  pre-publish-check:
    name: Pre-Publish Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [build-and-test, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run pre-publish validation
        run: npm run prepublishOnly
        
      - name: Dry run publish
        run: npm publish --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [pre-publish-check]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build and validate
        run: npm run build
        
      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              description: `Published ${release.tag_name} to NPM`,
              environment_url: `https://www.npmjs.com/package/@seanchatmangpt/unjucks`
            });

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run performance benchmarks
        run: npm run test:performance
        continue-on-error: true
        
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json
          retention-days: 30

  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [build-and-test]
    strategy:
      matrix:
        test-type: [cli, template-generation, semantic-features]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run integration tests
        run: |
          case "${{ matrix.test-type }}" in
            cli)
              npm run test:cli
              ;;
            template-generation)
              npm run test:integration
              ;;
            semantic-features)
              npm run test:cli:semantic
              ;;
          esac
        continue-on-error: true