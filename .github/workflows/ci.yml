name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Save lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: |
            eslint-report.json
            eslint-report.html
          if-no-files-found: ignore

  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 20, 22]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Verify imports
        run: npm run test:imports
        
      - name: Test CLI functionality
        run: npm run test:cli
        
      - name: Run Vitest (if configured)
        run: |
          if [ -f "vitest.config.js" ] || [ -f "vitest.config.ts" ] || grep -q "vitest" package.json; then
            npx vitest run --coverage --reporter=verbose --reporter=json --outputFile=vitest-results.json
          else
            echo "Vitest not configured, running basic tests"
            npm run test
          fi
        continue-on-error: true
        
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            vitest-results.json
            coverage/
            test-results/
          if-no-files-found: ignore

  build:
    name: Build & TypeScript Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: TypeScript check
        run: |
          if [ -f "tsconfig.json" ]; then
            npx tsc --noEmit
          else
            echo "TypeScript config not found, running basic typecheck"
            npm run typecheck || echo "Basic typecheck completed"
          fi
          
      - name: Build project
        run: npm run build
        
      - name: Validate CLI binary
        run: |
          chmod +x bin/kgen.mjs
          node bin/kgen.mjs --version
          node bin/kgen.mjs --help

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Run security audit
        run: npm run security:audit
        continue-on-error: true
        
      - name: Check for known vulnerabilities
        run: |
          audit_result=$(npm audit --audit-level moderate --json 2>/dev/null || echo '{"vulnerabilities":{"info":0,"low":0,"moderate":0,"high":0,"critical":0}}')
          echo "$audit_result" > security-audit.json
          
          high_vulns=$(echo "$audit_result" | jq -r '.metadata.vulnerabilities.high // 0')
          critical_vulns=$(echo "$audit_result" | jq -r '.metadata.vulnerabilities.critical // 0')
          
          echo "High vulnerabilities: $high_vulns"
          echo "Critical vulnerabilities: $critical_vulns"
          
          if [ "$high_vulns" -gt 0 ] || [ "$critical_vulns" -gt 0 ]; then
            echo "❌ High or critical vulnerabilities found"
            exit 1
          else
            echo "✅ No high or critical vulnerabilities found"
          fi

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Generate coverage report
        run: |
          if command -v vitest &> /dev/null; then
            npx vitest run --coverage --coverage.reporter=lcov --coverage.reporter=text
          else
            echo "Coverage collection not configured for CLI tool"
            echo "KGEN is primarily a CLI tool - coverage metrics may not be applicable"
          fi
        continue-on-error: true
        
      - name: Upload coverage to Codecov
        if: hashFiles('coverage/lcov.info') != ''
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: kgen-coverage
          fail_ci_if_error: false

  validate-cli:
    name: Validate CLI Tool
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Test CLI commands
        run: |
          echo "Testing KGEN CLI functionality..."
          
          # Make CLI executable
          chmod +x bin/kgen.mjs
          
          # Test basic commands
          echo "✅ Testing --version"
          node bin/kgen.mjs --version
          
          echo "✅ Testing --help"
          node bin/kgen.mjs --help
          
          # Test validate command
          echo "✅ Testing validation"
          npm run validate
          
          echo "✅ CLI validation completed successfully"

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, test, build, security, validate-cli]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"  
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "CLI Validation: ${{ needs.validate-cli.result }}"
          
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "❌ Lint job failed"
            exit 1
          fi
          
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Test job failed" 
            exit 1
          fi
          
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build job failed"
            exit 1
          fi
          
          if [[ "${{ needs.validate-cli.result }}" != "success" ]]; then
            echo "❌ CLI validation failed"
            exit 1
          fi
          
          # Security can be skipped with warning
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "⚠️ Security audit had issues - review required"
          fi
          
          echo "✅ Quality gate passed"