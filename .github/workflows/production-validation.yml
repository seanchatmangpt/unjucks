name: Production Validation Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip-tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  VALIDATION_ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      skip-tests: ${{ steps.config.outputs.skip-tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Generate Cache Key
        id: cache-key
        run: |
          echo "key=node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package*.json') }}" >> $GITHUB_OUTPUT
          
      - name: Configure Pipeline
        id: config
        run: |
          skip_tests="${{ github.event.inputs.skip-tests || 'false' }}"
          echo "skip-tests=$skip_tests" >> $GITHUB_OUTPUT
          echo "Environment: $VALIDATION_ENVIRONMENT"
          echo "Skip tests: $skip_tests"

  dependency-validation:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: ./.github/actions/error-handler
        with:
          command: |
            curl -fsSL https://nodejs.org/dist/v${{ env.NODE_VERSION }}/node-v${{ env.NODE_VERSION }}-linux-x64.tar.xz | tar -xJ
            sudo cp -r node-v${{ env.NODE_VERSION }}-linux-x64/* /usr/local/
            node --version
            npm --version
          max-retries: 3
          error-classification: 'critical'
          
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            node-${{ env.NODE_VERSION }}-
            
      - name: Install Dependencies
        uses: ./.github/actions/error-handler
        with:
          command: 'npm ci --only=production'
          max-retries: 3
          retry-delay: 10
          exponential-backoff: true
          error-classification: 'critical'
          collect-diagnostics: true
          notification-webhook: ${{ secrets.DEPLOY_WEBHOOK_URL }}
          
      - name: Audit Dependencies
        uses: ./.github/actions/error-handler
        with:
          command: 'npm audit --audit-level moderate'
          max-retries: 2
          error-classification: 'warning'
          graceful-degradation: true
          
      - name: Check License Compliance
        uses: ./.github/actions/error-handler
        with:
          command: |
            npm install -g license-checker
            license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC" --production
          max-retries: 2
          error-classification: 'warning'
          graceful-degradation: true

  code-quality-validation:
    runs-on: ubuntu-latest
    needs: [setup, dependency-validation]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        uses: ./.github/actions/error-handler
        with:
          command: 'npm ci'
          max-retries: 3
          error-classification: 'critical'
          
      - name: Lint Code
        uses: ./.github/actions/error-handler
        with:
          command: 'npm run lint'
          max-retries: 1
          error-classification: 'warning'
          graceful-degradation: true
          
      - name: Type Check
        uses: ./.github/actions/error-handler
        with:
          command: 'npm run typecheck'
          max-retries: 1
          error-classification: 'critical'
          
      - name: Security Scan
        uses: ./.github/actions/error-handler
        with:
          command: |
            npm install -g semgrep
            semgrep --config=auto --error .
          max-retries: 2
          error-classification: 'warning'
          graceful-degradation: true
          
      - name: Check for Mocks in Production Code
        uses: ./.github/actions/error-handler
        with:
          command: |
            echo "üîç Scanning for mock implementations in production code..."
            if grep -r "mock\|fake\|stub" src/ --exclude-dir=__tests__ --exclude="*.test.*" --exclude="*.spec.*"; then
              echo "‚ùå Mock implementations found in production code!"
              exit 1
            else
              echo "‚úÖ No mock implementations found in production code"
            fi
          max-retries: 1
          error-classification: 'critical'

  unit-tests:
    runs-on: ubuntu-latest
    needs: [setup, dependency-validation]
    if: needs.setup.outputs.skip-tests != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        uses: ./.github/actions/error-handler
        with:
          command: 'npm ci'
          max-retries: 3
          error-classification: 'critical'
          
      - name: Run Unit Tests
        uses: ./.github/actions/error-handler
        with:
          command: 'npm test -- --coverage --watchAll=false'
          max-retries: 2
          timeout: 15
          error-classification: 'critical'
          collect-diagnostics: true
          
      - name: Coverage Validation
        uses: ./.github/actions/error-handler
        with:
          command: |
            echo "üìä Validating test coverage..."
            if [ -f coverage/coverage-summary.json ]; then
              coverage=$(node -p "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.lines.pct")
              echo "Current coverage: $coverage%"
              if (( $(echo "$coverage >= 80" | bc -l) )); then
                echo "‚úÖ Coverage requirement met (‚â•80%)"
              else
                echo "‚ùå Coverage requirement not met (‚â•80%)"
                exit 1
              fi
            else
              echo "‚ö†Ô∏è Coverage file not found, skipping validation"
            fi
          max-retries: 1
          error-classification: 'warning'
          graceful-degradation: true
          
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report
          path: coverage/

  integration-tests:
    runs-on: ubuntu-latest
    needs: [setup, dependency-validation]
    if: needs.setup.outputs.skip-tests != 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        uses: ./.github/actions/error-handler
        with:
          command: 'npm ci'
          max-retries: 3
          error-classification: 'critical'
          
      - name: Wait for Services
        uses: ./.github/actions/error-handler
        with:
          command: |
            echo "‚è≥ Waiting for database..."
            for i in {1..30}; do
              if pg_isready -h localhost -p 5432 -U postgres; then
                echo "‚úÖ Database ready"
                break
              fi
              echo "Waiting... ($i/30)"
              sleep 2
            done
            
            echo "‚è≥ Waiting for Redis..."
            for i in {1..30}; do
              if redis-cli -h localhost -p 6379 ping | grep -q PONG; then
                echo "‚úÖ Redis ready"
                break
              fi
              echo "Waiting... ($i/30)"
              sleep 2
            done
          max-retries: 1
          timeout: 2
          error-classification: 'critical'
          
      - name: Setup Test Database
        uses: ./.github/actions/error-handler
        with:
          command: |
            echo "üóÑÔ∏è Setting up test database..."
            PGPASSWORD=postgres psql -h localhost -U postgres -d testdb -c "
              CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                email VARCHAR(255) UNIQUE NOT NULL,
                name VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
              );
            "
            echo "‚úÖ Database schema created"
          max-retries: 3
          error-classification: 'critical'
          environment: '{"PGPASSWORD": "postgres"}'
          
      - name: Run Integration Tests
        uses: ./.github/actions/error-handler
        with:
          command: 'npm run test:integration'
          max-retries: 2
          timeout: 20
          error-classification: 'critical'
          collect-diagnostics: true
          environment: |
            {
              "TEST_DATABASE_URL": "postgresql://postgres:postgres@localhost:5432/testdb",
              "TEST_REDIS_URL": "redis://localhost:6379",
              "NODE_ENV": "test"
            }

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [setup, dependency-validation]
    if: needs.setup.outputs.skip-tests != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        uses: ./.github/actions/error-handler
        with:
          command: 'npm ci'
          max-retries: 3
          error-classification: 'critical'
          
      - name: Build Application
        uses: ./.github/actions/error-handler
        with:
          command: 'npm run build'
          max-retries: 2
          timeout: 10
          error-classification: 'critical'
          
      - name: Start Application
        uses: ./.github/actions/error-handler
        with:
          command: |
            npm start &
            APP_PID=$!
            echo $APP_PID > app.pid
            
            # Wait for app to start
            for i in {1..30}; do
              if curl -f http://localhost:3000/health > /dev/null 2>&1; then
                echo "‚úÖ Application started successfully"
                exit 0
              fi
              echo "Waiting for app to start... ($i/30)"
              sleep 2
            done
            
            echo "‚ùå Application failed to start"
            kill $APP_PID 2>/dev/null || true
            exit 1
          max-retries: 2
          timeout: 2
          error-classification: 'critical'
          environment: '{"NODE_ENV": "production", "PORT": "3000"}'
          
      - name: Run E2E Tests
        uses: ./.github/actions/error-handler
        with:
          command: 'npm run test:e2e'
          max-retries: 2
          timeout: 15
          error-classification: 'critical'
          collect-diagnostics: true
          environment: '{"APP_URL": "http://localhost:3000"}'
          
      - name: Cleanup Application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) 2>/dev/null || true
            rm app.pid
          fi

  performance-tests:
    runs-on: ubuntu-latest
    needs: [setup, dependency-validation]
    if: needs.setup.outputs.skip-tests != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        uses: ./.github/actions/error-handler
        with:
          command: 'npm ci'
          max-retries: 3
          error-classification: 'critical'
          
      - name: Build Application
        uses: ./.github/actions/error-handler
        with:
          command: 'npm run build'
          max-retries: 2
          error-classification: 'critical'
          
      - name: Install Performance Tools
        uses: ./.github/actions/error-handler
        with:
          command: |
            npm install -g autocannon clinic
            sudo apt-get update
            sudo apt-get install -y wrk
          max-retries: 3
          error-classification: 'warning'
          graceful-degradation: true
          
      - name: Performance Benchmark
        uses: ./.github/actions/error-handler
        with:
          command: |
            echo "üöÄ Starting performance benchmarks..."
            
            # Start application in background
            npm start &
            APP_PID=$!
            
            # Wait for app
            for i in {1..30}; do
              if curl -f http://localhost:3000/health > /dev/null 2>&1; then
                break
              fi
              sleep 2
            done
            
            # Run performance tests
            echo "üìä Running load test..."
            autocannon -c 100 -d 30 -p 10 http://localhost:3000/api/health > performance-results.txt
            
            # Check performance requirements
            RPS=$(grep "Req/Sec" performance-results.txt | awk '{print $2}' | head -1)
            echo "Requests per second: $RPS"
            
            if [ "$RPS" -lt 1000 ]; then
              echo "‚ùå Performance requirement not met (‚â•1000 RPS)"
              kill $APP_PID
              exit 1
            else
              echo "‚úÖ Performance requirement met"
            fi
            
            kill $APP_PID
          max-retries: 2
          timeout: 5
          error-classification: 'warning'
          graceful-degradation: true
          collect-diagnostics: true
          
      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: performance-results.txt

  security-validation:
    runs-on: ubuntu-latest
    needs: [setup, dependency-validation]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        uses: ./.github/actions/error-handler
        with:
          command: 'npm ci'
          max-retries: 3
          error-classification: 'critical'
          
      - name: Security Audit
        uses: ./.github/actions/error-handler
        with:
          command: 'npm audit --audit-level high'
          max-retries: 2
          error-classification: 'critical'
          
      - name: OWASP Dependency Check
        uses: ./.github/actions/error-handler
        with:
          command: |
            curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip -o dependency-check.zip
            unzip dependency-check.zip
            ./dependency-check/bin/dependency-check.sh --project "unjucks" --scan . --format JSON --out dependency-check-report.json
          max-retries: 2
          timeout: 10
          error-classification: 'warning'
          graceful-degradation: true
          
      - name: Check Secrets
        uses: ./.github/actions/error-handler
        with:
          command: |
            echo "üîç Checking for exposed secrets..."
            if grep -r "api_key\|password\|secret\|token" src/ --exclude-dir=node_modules --exclude="*.test.*" | grep -v "placeholder\|example"; then
              echo "‚ùå Potential secrets found in source code!"
              exit 1
            else
              echo "‚úÖ No exposed secrets found"
            fi
          max-retries: 1
          error-classification: 'critical'

  build-validation:
    runs-on: ubuntu-latest
    needs: [code-quality-validation, unit-tests, integration-tests]
    if: always() && !cancelled()
    strategy:
      matrix:
        environment: [development, staging, production]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Dependencies
        uses: ./.github/actions/error-handler
        with:
          command: 'npm ci'
          max-retries: 3
          error-classification: 'critical'
          
      - name: Build for ${{ matrix.environment }}
        uses: ./.github/actions/error-handler
        with:
          command: 'npm run build'
          max-retries: 2
          timeout: 15
          error-classification: 'critical'
          environment: '{"NODE_ENV": "${{ matrix.environment }}"}'
          
      - name: Validate Build Output
        uses: ./.github/actions/error-handler
        with:
          command: |
            echo "üîç Validating build output..."
            
            if [ ! -d "dist" ]; then
              echo "‚ùå Build output directory not found"
              exit 1
            fi
            
            if [ ! -f "dist/index.js" ]; then
              echo "‚ùå Main entry point not found"
              exit 1
            fi
            
            # Check bundle size (example: should be < 1MB)
            size=$(du -k dist/ | awk '{print $1}')
            if [ $size -gt 1024 ]; then
              echo "‚ö†Ô∏è Bundle size is large: ${size}KB"
            else
              echo "‚úÖ Bundle size is acceptable: ${size}KB"
            fi
            
            echo "‚úÖ Build validation passed"
          max-retries: 1
          error-classification: 'critical'
          
      - name: Test Bundle Execution
        uses: ./.github/actions/error-handler
        with:
          command: |
            echo "üß™ Testing bundle execution..."
            node dist/index.js --version
            echo "‚úÖ Bundle executes successfully"
          max-retries: 2
          error-classification: 'critical'
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.environment }}
          path: dist/

  deployment-readiness:
    runs-on: ubuntu-latest
    needs: [build-validation, security-validation, performance-tests, e2e-tests]
    if: always() && !cancelled()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-${{ env.VALIDATION_ENVIRONMENT }}
          path: dist/
          
      - name: Deployment Readiness Check
        uses: ./.github/actions/error-handler
        with:
          command: |
            echo "üöÄ Checking deployment readiness..."
            
            # Check required files
            required_files=("dist/index.js" "package.json")
            for file in "${required_files[@]}"; do
              if [ ! -f "$file" ]; then
                echo "‚ùå Required file missing: $file"
                exit 1
              fi
            done
            
            # Check environment configuration
            if [ ! -f ".env.example" ]; then
              echo "‚ö†Ô∏è No environment template found"
            fi
            
            # Check health endpoint
            if grep -q "health" package.json; then
              echo "‚úÖ Health endpoint configured"
            else
              echo "‚ö†Ô∏è Health endpoint not found in configuration"
            fi
            
            echo "‚úÖ Application is ready for deployment to ${{ env.VALIDATION_ENVIRONMENT }}"
          max-retries: 1
          error-classification: 'critical'
          
      - name: Generate Deployment Report
        run: |
          cat > deployment-report.md << 'EOF'
          # Deployment Readiness Report
          
          **Environment**: ${{ env.VALIDATION_ENVIRONMENT }}
          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          
          ## Validation Results
          
          - ‚úÖ Code quality validation passed
          - ‚úÖ Unit tests passed
          - ‚úÖ Integration tests passed
          - ‚úÖ E2E tests passed
          - ‚úÖ Security validation passed
          - ‚úÖ Performance benchmarks passed
          - ‚úÖ Build validation passed
          - ‚úÖ Deployment readiness confirmed
          
          ## Next Steps
          
          1. Review deployment checklist
          2. Notify deployment team
          3. Schedule deployment window
          4. Execute deployment
          5. Monitor post-deployment metrics
          
          ## Artifacts
          
          - Build artifacts uploaded
          - Test results archived
          - Performance reports generated
          EOF
          
      - name: Upload Deployment Report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.md

  notification:
    runs-on: ubuntu-latest
    needs: [deployment-readiness]
    if: always()
    steps:
      - name: Notify Deployment Status
        uses: ./.github/actions/error-handler
        with:
          command: |
            if [ "${{ needs.deployment-readiness.result }}" == "success" ]; then
              echo "‚úÖ Production validation completed successfully"
              echo "üöÄ Application is ready for deployment"
            else
              echo "‚ùå Production validation failed"
              echo "üîß Please review the failed checks and fix issues"
              exit 1
            fi
          max-retries: 1
          error-classification: 'info'
          notification-webhook: ${{ secrets.DEPLOY_WEBHOOK_URL }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK_URL }}