---
to: app/api/{{resourceName | kebabCase}}/route.ts
variables:
  resourceName: string
  withAuth?: boolean
  withValidation?: boolean
  methods?: string[]
inject: false
skipIf: "exists"
---
import { NextRequest, NextResponse } from 'next/server';
{% if withAuth -%}
import { auth } from '@/lib/auth';
{% endif -%}
{% if withValidation -%}
import { z } from 'zod';
{% endif -%}

{% if withValidation -%}
// Generated validation schema
const {{resourceName | pascalCase}}Schema = z.object({
  id: z.string().uuid().optional(),
  name: z.string().min(1).max(255),
  description: z.string().optional(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

type {{resourceName | pascalCase}} = z.infer<typeof {{resourceName | pascalCase}}Schema>;

{% endif -%}
{% if withAuth -%}
// Authentication middleware
async function requireAuth(request: NextRequest) {
  const session = await auth();
  if (!session?.user) {
    return NextResponse.json(
      { error: 'Authentication required' },
      { status: 401 }
    );
  }
  return session;
}

{% endif -%}
{% if not methods or 'GET' in (methods or ['GET']) -%}
// GET /api/{{resourceName | kebabCase}}
export async function GET(request: NextRequest) {
  try {
    {% if withAuth -%}
    const session = await requireAuth(request);
    if (session instanceof NextResponse) return session;
    
    {% endif -%}
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    const search = searchParams.get('search');

    // TODO: Implement your {{resourceName}} fetching logic here
    const {{resourceName}} = [
      {
        id: '1',
        name: 'Sample {{resourceName | singularize | titleCase}}',
        description: 'Generated by KGEN v1',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      }
    ];

    return NextResponse.json({
      {{resourceName}},
      pagination: {
        page,
        limit,
        total: {{resourceName}}.length,
        pages: Math.ceil({{resourceName}}.length / limit),
      },
      meta: {
        generatedBy: 'KGEN v1',
        generatedAt: new Date().toISOString(),
      }
    });
  } catch (error) {
    console.error('GET /api/{{resourceName | kebabCase}} error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

{% endif -%}
{% if not methods or 'POST' in (methods or ['POST']) -%}
// POST /api/{{resourceName | kebabCase}}
export async function POST(request: NextRequest) {
  try {
    {% if withAuth -%}
    const session = await requireAuth(request);
    if (session instanceof NextResponse) return session;
    
    {% endif -%}
    const body = await request.json();
    
    {% if withValidation -%}
    // Validate request body
    const validationResult = {{resourceName | pascalCase}}Schema.safeParse(body);
    if (!validationResult.success) {
      return NextResponse.json(
        { 
          error: 'Validation failed',
          details: validationResult.error.issues 
        },
        { status: 400 }
      );
    }
    
    const validatedData = validationResult.data;
    {% else -%}
    const validatedData = body;
    {% endif -%}

    // TODO: Implement your {{resourceName}} creation logic here
    const new{{resourceName | pascalCase | singularize}} = {
      id: crypto.randomUUID(),
      ...validatedData,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    return NextResponse.json(
      {
        {{resourceName | singularize}}: new{{resourceName | pascalCase | singularize}},
        meta: {
          generatedBy: 'KGEN v1',
          action: 'create',
          timestamp: new Date().toISOString(),
        }
      },
      { status: 201 }
    );
  } catch (error) {
    console.error('POST /api/{{resourceName | kebabCase}} error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

{% endif -%}
{% if not methods or 'PUT' in (methods or []) -%}
// PUT /api/{{resourceName | kebabCase}}
export async function PUT(request: NextRequest) {
  try {
    {% if withAuth -%}
    const session = await requireAuth(request);
    if (session instanceof NextResponse) return session;
    
    {% endif -%}
    const body = await request.json();
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (!id) {
      return NextResponse.json(
        { error: 'ID parameter is required' },
        { status: 400 }
      );
    }
    
    {% if withValidation -%}
    // Validate request body
    const validationResult = {{resourceName | pascalCase}}Schema.safeParse(body);
    if (!validationResult.success) {
      return NextResponse.json(
        { 
          error: 'Validation failed',
          details: validationResult.error.issues 
        },
        { status: 400 }
      );
    }
    
    const validatedData = validationResult.data;
    {% else -%}
    const validatedData = body;
    {% endif -%}

    // TODO: Implement your {{resourceName}} update logic here
    const updated{{resourceName | pascalCase | singularize}} = {
      id,
      ...validatedData,
      updatedAt: new Date().toISOString(),
    };

    return NextResponse.json({
      {{resourceName | singularize}}: updated{{resourceName | pascalCase | singularize}},
      meta: {
        generatedBy: 'KGEN v1',
        action: 'update',
        timestamp: new Date().toISOString(),
      }
    });
  } catch (error) {
    console.error('PUT /api/{{resourceName | kebabCase}} error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

{% endif -%}
{% if not methods or 'DELETE' in (methods or []) -%}
// DELETE /api/{{resourceName | kebabCase}}
export async function DELETE(request: NextRequest) {
  try {
    {% if withAuth -%}
    const session = await requireAuth(request);
    if (session instanceof NextResponse) return session;
    
    {% endif -%}
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (!id) {
      return NextResponse.json(
        { error: 'ID parameter is required' },
        { status: 400 }
      );
    }

    // TODO: Implement your {{resourceName}} deletion logic here
    
    return NextResponse.json({
      message: '{{resourceName | singularize | titleCase}} deleted successfully',
      id,
      meta: {
        generatedBy: 'KGEN v1',
        action: 'delete',
        timestamp: new Date().toISOString(),
      }
    });
  } catch (error) {
    console.error('DELETE /api/{{resourceName | kebabCase}} error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

{% endif -%}
// Generated by KGEN v1 at {{generatedAt || 'runtime'}}