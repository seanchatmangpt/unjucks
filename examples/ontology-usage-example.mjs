#!/usr/bin/env node

/**
 * KGEN Ontology Usage Example
 * 
 * Demonstrates practical usage of KGEN ontologies for:
 * 1. Generating artifacts with semantic metadata
 * 2. Creating cryptographic attestations
 * 3. Validating with SHACL shapes
 * 4. CLI integration patterns
 */

import N3 from 'n3';
import { readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import crypto from 'crypto';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, '..');

const { DataFactory, Writer, Store } = N3;
const { namedNode, literal, quad } = DataFactory;\n\n// Namespaces\nconst KGEN = 'http://kgen.ai/ontology/';\nconst KGENCLI = 'http://kgen.ai/ontology/cli/';\nconst KGENATTEST = 'http://kgen.ai/ontology/attest/';\nconst CRYPTO = 'http://kgen.ai/ontology/crypto/';\nconst RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nconst XSD = 'http://www.w3.org/2001/XMLSchema#';\nconst PROV = 'http://www.w3.org/ns/prov#';\n\n/**\n * Example 1: Generate an artifact with semantic metadata\n */\nfunction createArtifactMetadata() {\n  console.log('\\n=== Creating Artifact Metadata ===');\n  \n  const store = new Store();\n  const artifactId = namedNode('http://example.com/artifacts/user-service.js');\n  const timestamp = new Date().toISOString();\n  const contentHash = crypto.createHash('sha256').update('console.log(\"Hello World\");').digest('hex');\n  \n  // Basic artifact information\n  store.addQuad(quad(artifactId, namedNode(RDF + 'type'), namedNode(KGEN + 'CodeArtifact')));\n  store.addQuad(quad(artifactId, namedNode(KGEN + 'hasName'), literal('user-service.js')));\n  store.addQuad(quad(artifactId, namedNode(KGEN + 'generatedAt'), literal(timestamp, namedNode(XSD + 'dateTime'))));\n  store.addQuad(quad(artifactId, namedNode(KGEN + 'hasSize'), literal('29', namedNode(XSD + 'integer'))));\n  store.addQuad(quad(artifactId, namedNode(KGEN + 'hasMimeType'), literal('application/javascript')));\n  store.addQuad(quad(artifactId, namedNode(KGEN + 'hasLanguage'), literal('javascript')));\n  \n  // Content and hash\n  store.addQuad(quad(artifactId, namedNode(KGEN + 'hasContent'), literal('console.log(\"Hello World\");')));\n  store.addQuad(quad(artifactId, namedNode(KGEN + 'hashValue'), literal(contentHash)));\n  \n  // Generation provenance\n  const generationActivity = namedNode('http://example.com/activities/gen-' + Date.now());\n  store.addQuad(quad(generationActivity, namedNode(RDF + 'type'), namedNode(KGEN + 'RenderingActivity')));\n  store.addQuad(quad(generationActivity, namedNode(PROV + 'generated'), artifactId));\n  store.addQuad(quad(generationActivity, namedNode(PROV + 'startedAtTime'), literal(timestamp, namedNode(XSD + 'dateTime'))));\n  store.addQuad(quad(generationActivity, namedNode(KGEN + 'deterministicGeneration'), literal('true', namedNode(XSD + 'boolean'))));\n  \n  // Template information\n  const template = namedNode('http://example.com/templates/service-template');\n  store.addQuad(quad(template, namedNode(RDF + 'type'), namedNode(KGEN + 'Template')));\n  store.addQuad(quad(template, namedNode(KGEN + 'templateName'), literal('service-template')));\n  store.addQuad(quad(template, namedNode(KGEN + 'templateEngine'), literal('nunjucks')));\n  store.addQuad(quad(generationActivity, namedNode(KGEN + 'usesTemplate'), template));\n  \n  console.log(`✅ Created semantic metadata for artifact with ${store.size} triples`);\n  return { store, artifactId, generationActivity };\n}\n\n/**\n * Example 2: Create a cryptographic attestation\n */\nfunction createAttestation(artifactId) {\n  console.log('\\n=== Creating Cryptographic Attestation ===');\n  \n  const store = new Store();\n  const attestationId = namedNode('http://example.com/attestations/attest-' + Date.now());\n  const timestamp = new Date().toISOString();\n  \n  // Main attestation\n  store.addQuad(quad(attestationId, namedNode(RDF + 'type'), namedNode(KGENATTEST + 'DeterministicAttestation')));\n  store.addQuad(quad(attestationId, namedNode(KGENATTEST + 'attestedAt'), literal(timestamp, namedNode(XSD + 'dateTime'))));\n  store.addQuad(quad(attestationId, namedNode(KGENATTEST + 'generationTool'), literal('kgen-cli')));\n  store.addQuad(quad(attestationId, namedNode(KGENATTEST + 'generationVersion'), literal('1.0.0')));\n  \n  // Attestation statement\n  const statement = namedNode(attestationId.value + '#statement');\n  store.addQuad(quad(attestationId, namedNode(KGENATTEST + 'hasStatement'), statement));\n  store.addQuad(quad(statement, namedNode(RDF + 'type'), namedNode(KGENATTEST + 'AttestationStatement')));\n  \n  // Statement subject (the artifact being attested)\n  const subject = namedNode(attestationId.value + '#subject');\n  store.addQuad(quad(statement, namedNode(KGENATTEST + 'hasSubject'), subject));\n  store.addQuad(quad(subject, namedNode(RDF + 'type'), namedNode(KGENATTEST + 'AttestationSubject')));\n  store.addQuad(quad(subject, namedNode(KGENATTEST + 'subjectName'), literal('user-service.js')));\n  store.addQuad(quad(subject, namedNode(KGENATTEST + 'subjectURI'), artifactId));\n  \n  // Statement predicate (what we're claiming)\n  const predicate = namedNode(attestationId.value + '#predicate');\n  store.addQuad(quad(statement, namedNode(KGENATTEST + 'hasPredicate'), predicate));\n  store.addQuad(quad(predicate, namedNode(RDF + 'type'), namedNode(KGENATTEST + 'BuildProvenance')));\n  \n  // Digital signature\n  const signature = namedNode(attestationId.value + '#signature');\n  store.addQuad(quad(attestationId, namedNode(KGENATTEST + 'hasSignature'), signature));\n  store.addQuad(quad(signature, namedNode(RDF + 'type'), namedNode(CRYPTO + 'Signature')));\n  store.addQuad(quad(signature, namedNode(CRYPTO + 'signatureAlgorithm'), literal('ed25519')));\n  store.addQuad(quad(signature, namedNode(CRYPTO + 'signatureValue'), literal('dGVzdC1zaWduYXR1cmUtdmFsdWU=')));\n  \n  // Public key\n  const publicKey = namedNode(attestationId.value + '#publickey');\n  store.addQuad(quad(signature, namedNode(CRYPTO + 'hasPublicKey'), publicKey));\n  store.addQuad(quad(publicKey, namedNode(RDF + 'type'), namedNode(CRYPTO + 'PublicKey')));\n  store.addQuad(quad(publicKey, namedNode(CRYPTO + 'keyAlgorithm'), literal('ed25519')));\n  store.addQuad(quad(publicKey, namedNode(CRYPTO + 'keyValue'), literal('dGVzdC1wdWJsaWMta2V5LXZhbHVl')));\n  \n  // Deterministic properties\n  store.addQuad(quad(attestationId, namedNode(KGENATTEST + 'deterministicSeed'), literal('deterministic-seed-12345')));\n  store.addQuad(quad(attestationId, namedNode(KGENATTEST + 'reproducibilityHash'), literal('a1b2c3d4e5f6789012345678901234567890123456789012345678901234567890')));\n  \n  // Signer information\n  const signer = namedNode('http://example.com/agents/kgen-system');\n  store.addQuad(quad(attestationId, namedNode(KGENATTEST + 'signedBy'), signer));\n  store.addQuad(quad(signer, namedNode(RDF + 'type'), namedNode(PROV + 'SoftwareAgent')));\n  \n  console.log(`✅ Created cryptographic attestation with ${store.size} triples`);\n  return { store, attestationId };\n}\n\n/**\n * Example 3: Model CLI command execution\n */\nfunction createCLIExecution() {\n  console.log('\\n=== Modeling CLI Command Execution ===');\n  \n  const store = new Store();\n  const executionId = namedNode('http://example.com/executions/exec-' + Date.now());\n  const timestamp = new Date().toISOString();\n  \n  // CLI instance\n  const cli = namedNode('http://example.com/cli/kgen-cli');\n  store.addQuad(quad(cli, namedNode(RDF + 'type'), namedNode(KGENCLI + 'CLI')));\n  \n  // Generate command execution\n  const generateCmd = namedNode(executionId.value + '#generate-cmd');\n  store.addQuad(quad(generateCmd, namedNode(RDF + 'type'), namedNode(KGENCLI + 'GenerateCommand')));\n  store.addQuad(quad(generateCmd, namedNode(KGENCLI + 'hasDescription'), literal('Generate artifacts from RDF knowledge graphs')));\n  store.addQuad(quad(generateCmd, namedNode(KGENCLI + 'executesAt'), literal(timestamp, namedNode(XSD + 'dateTime'))));\n  store.addQuad(quad(generateCmd, namedNode(KGENCLI + 'hasExitCode'), literal('0', namedNode(XSD + 'integer'))));\n  store.addQuad(quad(generateCmd, namedNode(KGENCLI + 'outputDirectory'), literal('./output')));\n  store.addQuad(quad(generateCmd, namedNode(KGENCLI + 'workingDirectory'), literal('/Users/sac/unjucks')));\n  \n  // Command options\n  const templateOption = namedNode(executionId.value + '#template-option');\n  store.addQuad(quad(generateCmd, namedNode(KGENCLI + 'hasOption'), templateOption));\n  store.addQuad(quad(templateOption, namedNode(RDF + 'type'), namedNode(KGENCLI + 'Parameter')));\n  store.addQuad(quad(templateOption, namedNode(KGENCLI + 'shortName'), literal('-t')));\n  store.addQuad(quad(templateOption, namedNode(KGENCLI + 'longName'), literal('--template')));\n  store.addQuad(quad(templateOption, namedNode(KGENCLI + 'hasDescription'), literal('Template to use for generation')));\n  store.addQuad(quad(templateOption, namedNode(KGENCLI + 'isRequired'), literal('true', namedNode(XSD + 'boolean'))));\n  \n  const verboseFlag = namedNode(executionId.value + '#verbose-flag');\n  store.addQuad(quad(generateCmd, namedNode(KGENCLI + 'hasOption'), verboseFlag));\n  store.addQuad(quad(verboseFlag, namedNode(RDF + 'type'), namedNode(KGENCLI + 'Flag')));\n  store.addQuad(quad(verboseFlag, namedNode(KGENCLI + 'shortName'), literal('-v')));\n  store.addQuad(quad(verboseFlag, namedNode(KGENCLI + 'longName'), literal('--verbose')));\n  store.addQuad(quad(verboseFlag, namedNode(KGENCLI + 'hasDescription'), literal('Enable verbose output')));\n  \n  // Execution results\n  store.addQuad(quad(generateCmd, namedNode(KGENCLI + 'hasOutput'), literal('Successfully generated 1 artifact')));\n  \n  console.log(`✅ Created CLI execution model with ${store.size} triples`);\n  return { store, executionId, generateCmd };\n}\n\n/**\n * Example 4: Serialize and display results\n */\nfunction serializeResults(stores, title) {\n  console.log(`\\n=== ${title} ===`);\n  \n  // Combine all stores\n  const combinedStore = new Store();\n  for (const storeData of stores) {\n    for (const quad of storeData.store) {\n      combinedStore.addQuad(quad);\n    }\n  }\n  \n  const writer = new Writer({\n    prefixes: {\n      kgen: KGEN,\n      kgencli: KGENCLI,\n      kgenattest: KGENATTEST,\n      crypto: CRYPTO,\n      rdf: RDF,\n      xsd: XSD,\n      prov: PROV\n    }\n  });\n  \n  writer.addQuads([...combinedStore]);\n  writer.end((error, result) => {\n    if (error) {\n      console.error('❌ Serialization error:', error);\n    } else {\n      console.log('📄 Combined Turtle output:');\n      console.log('---');\n      console.log(result.substring(0, 1000) + '...');\n      console.log('---');\n      console.log(`✅ Total triples: ${combinedStore.size}`);\n    }\n  });\n}\n\n/**\n * Example 5: Demonstrate SHACL validation integration\n */\nfunction demonstrateShaclValidation() {\n  console.log('\\n=== SHACL Validation Integration ===');\n  \n  // This would integrate with a SHACL validator\n  console.log('🔍 SHACL shapes available for validation:');\n  console.log('  - Artifact integrity (content hash, timestamps)');\n  console.log('  - Attestation cryptographic validity');\n  console.log('  - CLI command structure');\n  console.log('  - Cross-reference consistency');\n  \n  // Example validation command\n  console.log('\\n💡 Example CLI validation command:');\n  console.log('   kgen validate --graph artifacts.ttl --shapes ontologies/shacl/artifact-shapes.ttl');\n  \n  console.log('\\n✅ SHACL integration ready for implementation');\n}\n\n/**\n * Main demonstration\n */\nfunction demonstrateOntologyUsage() {\n  console.log('🎯 KGEN Ontology Usage Examples');\n  console.log('==============================\\n');\n  \n  // Create examples\n  const artifactData = createArtifactMetadata();\n  const attestationData = createAttestation(artifactData.artifactId);\n  const cliData = createCLIExecution();\n  \n  // Serialize combined results\n  serializeResults([artifactData, attestationData, cliData], 'Complete Semantic Model');\n  \n  // Demonstrate SHACL integration\n  demonstrateShaclValidation();\n  \n  console.log('\\n🎉 Ontology demonstration complete!');\n  console.log('\\n📚 Key Benefits Demonstrated:');\n  console.log('   - Semantic artifact metadata');\n  console.log('   - Cryptographic attestations with provenance');\n  console.log('   - CLI command modeling');\n  console.log('   - SHACL validation readiness');\n  console.log('   - Cross-ontology integration');\n  console.log('\\n🚀 Ready for production use in KGEN system');\n}\n\n// Run demonstration if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  demonstrateOntologyUsage();\n}\n\nexport { demonstrateOntologyUsage };