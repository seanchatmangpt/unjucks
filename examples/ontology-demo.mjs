#!/usr/bin/env node

/**
 * KGEN Ontology Usage Demo - Simple working example
 */

import N3 from 'n3';
import crypto from 'crypto';

const { DataFactory, Writer, Store } = N3;
const { namedNode, literal, quad } = DataFactory;

// Namespaces
const KGEN = 'http://kgen.ai/ontology/';
const KGENATTEST = 'http://kgen.ai/ontology/attest/';
const CRYPTO = 'http://kgen.ai/ontology/crypto/';
const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
const XSD = 'http://www.w3.org/2001/XMLSchema#';

function createArtifactExample() {
  console.log('🎯 Creating KGEN Artifact with Ontology Metadata');
  
  const store = new Store();
  const artifactId = namedNode('http://example.com/artifacts/example.js');
  const timestamp = new Date().toISOString();
  const content = 'console.log("Generated by KGEN");';
  const hash = crypto.createHash('sha256').update(content).digest('hex');
  
  // Create artifact with semantic metadata
  store.addQuad(quad(
    artifactId,
    namedNode(RDF + 'type'),
    namedNode(KGEN + 'CodeArtifact')
  ));
  
  store.addQuad(quad(
    artifactId,
    namedNode(KGEN + 'hasName'),
    literal('example.js')
  ));
  
  store.addQuad(quad(
    artifactId,
    namedNode(KGEN + 'generatedAt'),
    literal(timestamp, namedNode(XSD + 'dateTime'))
  ));
  
  store.addQuad(quad(
    artifactId,
    namedNode(KGEN + 'hasContent'),
    literal(content)
  ));
  
  store.addQuad(quad(
    artifactId,
    namedNode(KGEN + 'hashValue'),
    literal(hash)
  ));
  
  console.log(`✅ Created artifact metadata: ${store.size} triples`);
  return store;
}

function createAttestationExample() {
  console.log('🔐 Creating Cryptographic Attestation');
  
  const store = new Store();
  const attestId = namedNode('http://example.com/attestations/example-attest');
  const timestamp = new Date().toISOString();
  
  // Main attestation
  store.addQuad(quad(
    attestId,
    namedNode(RDF + 'type'),
    namedNode(KGENATTEST + 'DeterministicAttestation')
  ));
  
  store.addQuad(quad(
    attestId,
    namedNode(KGENATTEST + 'attestedAt'),
    literal(timestamp, namedNode(XSD + 'dateTime'))
  ));
  
  store.addQuad(quad(
    attestId,
    namedNode(KGENATTEST + 'generationTool'),
    literal('kgen-cli')
  ));
  
  // Signature
  const sigId = namedNode(attestId.value + '#signature');
  store.addQuad(quad(
    attestId,
    namedNode(KGENATTEST + 'hasSignature'),
    sigId
  ));
  
  store.addQuad(quad(
    sigId,
    namedNode(RDF + 'type'),
    namedNode(CRYPTO + 'Signature')
  ));
  
  store.addQuad(quad(
    sigId,
    namedNode(CRYPTO + 'signatureAlgorithm'),
    literal('ed25519')
  ));
  
  console.log(`✅ Created attestation: ${store.size} triples`);
  return store;
}

function serializeExample(store) {
  console.log('📝 Serializing to Turtle format:');
  console.log('---');
  
  const writer = new Writer({
    prefixes: {
      kgen: KGEN,
      kgenattest: KGENATTEST,
      crypto: CRYPTO,
      rdf: RDF,
      xsd: XSD
    }
  });
  
  writer.addQuads([...store]);
  writer.end((error, result) => {
    if (error) {
      console.error('❌ Serialization error:', error);
    } else {
      console.log(result);
      console.log('---');
      console.log(`✅ Total: ${store.size} triples`);
    }
  });
}

function demonstrateOntologies() {
  console.log('🚀 KGEN Ontology Demonstration');
  console.log('===============================\n');
  
  // Create examples
  const artifactStore = createArtifactExample();
  const attestStore = createAttestationExample();
  
  // Combine stores
  const combined = new Store();
  for (const q of artifactStore) combined.addQuad(q);
  for (const q of attestStore) combined.addQuad(q);
  
  console.log('\n📊 Combined Results:');
  console.log(`   Artifacts: ${artifactStore.size} triples`);
  console.log(`   Attestations: ${attestStore.size} triples`);
  console.log(`   Total: ${combined.size} triples`);
  
  // Serialize combined result
  console.log('\n');
  serializeExample(combined);
  
  console.log('\n🎉 Demo complete!');
  console.log('\n💡 Ontology Benefits:');
  console.log('   - Semantic artifact metadata');
  console.log('   - Cryptographic attestations');
  console.log('   - SHACL validation ready');
  console.log('   - CLI integration prepared');
}

// Run demo
demonstrateOntologies();