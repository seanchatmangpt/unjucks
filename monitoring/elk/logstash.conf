# Logstash Configuration for KGEN Log Processing

input {
  # KGEN Application Logs
  beats {
    port => 5044
    type => "kgen-logs"
  }
  
  # Docker Container Logs
  beats {
    port => 5045
    type => "docker-logs"
  }
  
  # Syslog for System Events
  syslog {
    port => 5514
    type => "syslog"
  }
  
  # HTTP Input for Custom Metrics
  http {
    port => 8080
    type => "kgen-metrics"
  }
  
  # File input for structured logs
  file {
    path => "/var/log/kgen/*.log"
    start_position => "beginning"
    type => "kgen-structured"
    codec => "json"
  }
}

filter {
  # KGEN Application Log Processing
  if [type] == "kgen-logs" {
    # Parse JSON logs
    json {
      source => "message"
    }
    
    # Extract timestamp
    date {
      match => [ "timestamp", "ISO8601" ]
    }
    
    # Parse log levels
    if [level] {
      mutate {
        uppercase => [ "level" ]
      }
    }
    
    # Extract operation metadata
    if [operation] {
      mutate {
        add_field => { "operation_type" => "%{operation}" }
      }
    }
    
    # Parse generation metrics
    if [generation_time] {
      mutate {
        convert => { "generation_time" => "float" }
      }
    }
    
    # Security event processing
    if [security_event] == "true" {
      mutate {
        add_tag => [ "security" ]
      }
      
      # Extract IP addresses
      grok {
        match => { "message" => "%{IP:client_ip}" }
      }
    }
    
    # Error processing
    if [level] == "ERROR" {
      mutate {
        add_tag => [ "error" ]
      }
      
      # Parse stack traces
      if [stack_trace] {
        mutate {
          add_field => { "has_stack_trace" => "true" }
        }
      }
    }
  }
  
  # Docker Container Log Processing
  if [type] == "docker-logs" {
    # Parse container metadata
    if [docker][container][name] {
      mutate {
        add_field => { "container_name" => "%{[docker][container][name]}" }
      }
    }
    
    # KGEN-specific container processing
    if [container_name] =~ /kgen/ {
      mutate {
        add_tag => [ "kgen-container" ]
      }
    }
  }
  
  # Performance Metrics Processing
  if [type] == "kgen-metrics" {
    # Parse performance data
    if [response_time] {
      mutate {
        convert => { "response_time" => "float" }
      }
    }
    
    if [memory_usage] {
      mutate {
        convert => { "memory_usage" => "integer" }
      }
    }
    
    if [cpu_usage] {
      mutate {
        convert => { "cpu_usage" => "float" }
      }
    }
  }
  
  # Anomaly Detection
  if [type] == "kgen-logs" {
    # Detect unusual response times
    if [generation_time] and [generation_time] > 30.0 {
      mutate {
        add_tag => [ "slow_generation" ]
      }
    }
    
    # Detect memory spikes
    if [memory_usage] and [memory_usage] > 1000000000 {
      mutate {
        add_tag => [ "high_memory" ]
      }
    }
    
    # Detect error patterns
    if [message] =~ /timeout/i or [message] =~ /connection refused/i {
      mutate {
        add_tag => [ "connectivity_issue" ]
      }
    }
  }
  
  # GeoIP for security analysis
  if [client_ip] {
    geoip {
      source => "client_ip"
    }
  }
  
  # Add common fields
  mutate {
    add_field => {
      "environment" => "${ENVIRONMENT:production}"
      "service" => "kgen"
      "version" => "${KGEN_VERSION:1.0.0}"
    }
  }
}

output {
  # Main Elasticsearch index
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "kgen-logs-%{+YYYY.MM.dd}"
    template_name => "kgen-template"
    template => "/usr/share/logstash/templates/kgen-template.json"
    template_overwrite => true
  }
  
  # Security events to separate index
  if "security" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "kgen-security-%{+YYYY.MM.dd}"
    }
  }
  
  # Error logs to separate index for alerting
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "kgen-errors-%{+YYYY.MM.dd}"
    }
  }
  
  # Performance metrics to time-series index
  if [type] == "kgen-metrics" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "kgen-metrics-%{+YYYY.MM.dd}"
    }
  }
  
  # Real-time alerting for critical events
  if [level] == "ERROR" or "security" in [tags] {
    http {
      url => "http://alertmanager:9093/api/v1/alerts"
      http_method => "post"
      format => "json"
      mapping => {
        "alerts" => [{
          "labels" => {
            "alertname" => "KgenLogAlert"
            "severity" => "%{level}"
            "service" => "kgen"
            "instance" => "%{host}"
          }
          "annotations" => {
            "summary" => "KGEN Log Alert: %{message}"
            "description" => "%{message}"
          }
          "generatorURL" => "http://kibana:5601"
        }]
      }
    }
  }
  
  # Debug output (remove in production)
  if [environment] == "development" {
    stdout {
      codec => rubydebug
    }
  }
}