const StructuredLogger = require('./logging/structured-logger');\nconst DistributedTracer = require('./tracing/distributed-tracer');\nconst CustomMetrics = require('./metrics/custom-metrics');\nconst AlertManager = require('./alerting/alert-manager');\nconst SLISLOTracker = require('./sli-slo/sli-slo-tracker');\nconst HealthMonitor = require('./health-checks/health-monitor');\nconst MonitoringConfig = require('./config/monitoring-config');\n\nclass MonitoringStack {\n  constructor(options = {}) {\n    this.environment = options.environment || process.env.NODE_ENV || 'development';\n    this.config = options.config || new MonitoringConfig(this.environment);\n    \n    this.components = {};\n    this.initialized = false;\n  }\n\n  async initialize() {\n    if (this.initialized) return;\n\n    console.log(`Initializing monitoring stack for ${this.environment} environment...`);\n\n    // Validate configuration\n    const validation = this.config.validate();\n    if (!validation.isValid) {\n      console.error('Configuration validation failed:', validation.errors);\n      throw new Error('Invalid monitoring configuration');\n    }\n\n    if (validation.warnings.length > 0) {\n      console.warn('Configuration warnings:', validation.warnings);\n    }\n\n    // Initialize components based on configuration\n    await this.initializeComponents();\n    \n    // Set up component interactions\n    this.setupComponentInteractions();\n    \n    // Start monitoring\n    this.startMonitoring();\n    \n    this.initialized = true;\n    console.log('Monitoring stack initialized successfully');\n  }\n\n  async initializeComponents() {\n    const globalConfig = this.config.getGlobalConfig();\n\n    // Initialize structured logging\n    if (globalConfig.enabledFeatures.logging) {\n      const loggingConfig = this.config.getComponentConfig('logging');\n      this.components.logger = new StructuredLogger({\n        serviceName: globalConfig.serviceName,\n        environment: globalConfig.environment,\n        version: globalConfig.serviceVersion,\n        level: loggingConfig.level\n      });\n      console.log('✓ Structured logging initialized');\n    }\n\n    // Initialize distributed tracing\n    if (globalConfig.enabledFeatures.tracing) {\n      const tracingConfig = this.config.getComponentConfig('tracing');\n      this.components.tracer = new DistributedTracer({\n        serviceName: globalConfig.serviceName,\n        serviceVersion: globalConfig.serviceVersion,\n        environment: globalConfig.environment,\n        jaegerEndpoint: tracingConfig.exporters.jaeger.endpoint\n      });\n      await this.components.tracer.initialize();\n      console.log('✓ Distributed tracing initialized');\n    }\n\n    // Initialize custom metrics\n    if (globalConfig.enabledFeatures.metrics) {\n      const metricsConfig = this.config.getComponentConfig('metrics');\n      this.components.metrics = new CustomMetrics({\n        prefix: metricsConfig.prefix\n      });\n      console.log('✓ Custom metrics initialized');\n    }\n\n    // Initialize alert manager\n    if (globalConfig.enabledFeatures.alerting) {\n      const alertingConfig = this.config.getComponentConfig('alerting');\n      this.components.alertManager = new AlertManager({\n        email: alertingConfig.channels.email,\n        slack: alertingConfig.channels.slack,\n        webhook: alertingConfig.channels.webhook,\n        pagerduty: alertingConfig.channels.pagerduty,\n        escalationRules: alertingConfig.escalation.levels,\n        suppressionRules: [],\n        enabledChannels: Object.keys(alertingConfig.channels).filter(\n          channel => alertingConfig.channels[channel].enabled\n        )\n      });\n      console.log('✓ Alert manager initialized');\n    }\n\n    // Initialize SLI/SLO tracker\n    if (globalConfig.enabledFeatures.sliSlo) {\n      const sliSloConfig = this.config.getComponentConfig('sliSlo');\n      this.components.sliSloTracker = new SLISLOTracker({\n        evaluationInterval: sliSloConfig.evaluationInterval,\n        retentionPeriod: sliSloConfig.retentionPeriod,\n        alertThreshold: sliSloConfig.alertThreshold\n      });\n      console.log('✓ SLI/SLO tracker initialized');\n    }\n\n    // Initialize health monitor\n    if (globalConfig.enabledFeatures.healthChecks) {\n      const healthConfig = this.config.getComponentConfig('healthChecks');\n      this.components.healthMonitor = new HealthMonitor({\n        checkInterval: healthConfig.globalInterval,\n        timeout: healthConfig.timeout,\n        retryAttempts: healthConfig.retryAttempts,\n        retryDelay: healthConfig.retryDelay,\n        enableAutoRecovery: healthConfig.autoRecovery.enabled,\n        alertOnFailure: true\n      });\n      console.log('✓ Health monitor initialized');\n    }\n  }\n\n  setupComponentInteractions() {\n    // Connect logger to other components\n    if (this.components.logger) {\n      // Log tracing events\n      if (this.components.tracer) {\n        this.components.tracer.on('spanStarted', (data) => {\n          this.components.logger.logEvent('span_started', data);\n        });\n      }\n\n      // Log alert events\n      if (this.components.alertManager) {\n        this.components.alertManager.on('alert', (alert) => {\n          this.components.logger.logSecurity(\n            'alert_triggered',\n            'system',\n            'monitoring',\n            'triggered',\n            { alert }\n          );\n        });\n      }\n\n      // Log SLO violations\n      if (this.components.sliSloTracker) {\n        this.components.sliSloTracker.on('sloViolation', (data) => {\n          this.components.logger.logEvent('slo_violation', data);\n        });\n      }\n\n      // Log health check failures\n      if (this.components.healthMonitor) {\n        this.components.healthMonitor.on('criticalCheckFailed', (data) => {\n          this.components.logger.logError(\n            new Error(`Critical health check failed: ${data.name}`),\n            { healthCheck: data }\n          );\n        });\n      }\n    }\n\n    // Connect metrics to other components\n    if (this.components.metrics) {\n      // Record alert metrics\n      if (this.components.alertManager) {\n        this.components.alertManager.on('alert', (alert) => {\n          this.components.metrics.recordBusinessEvent('alert_triggered', 'triggered');\n        });\n      }\n\n      // Record SLI/SLO metrics\n      if (this.components.sliSloTracker) {\n        this.components.sliSloTracker.on('sliMeasured', (data) => {\n          this.components.metrics.recordOperation(\n            `sli_${data.sliName}`,\n            data.measurement.value\n          );\n        });\n      }\n    }\n\n    // Connect alert manager to SLI/SLO tracker\n    if (this.components.alertManager && this.components.sliSloTracker) {\n      this.components.sliSloTracker.on('sloViolation', (data) => {\n        this.components.alertManager.emit('alert', {\n          name: `SLO Violation: ${data.sloName}`,\n          description: `SLO ${data.sloName} is being violated`,\n          severity: 'high',\n          source: 'sli-slo-tracker',\n          tags: ['slo', 'violation'],\n          metadata: data\n        });\n      });\n\n      this.components.sliSloTracker.on('errorBudgetAlert', (data) => {\n        this.components.alertManager.emit('alert', {\n          name: `Error Budget Alert: ${data.sloName}`,\n          description: `Error budget for ${data.sloName} is running low`,\n          severity: 'critical',\n          source: 'sli-slo-tracker',\n          tags: ['error-budget', 'alert'],\n          metadata: data\n        });\n      });\n    }\n\n    // Connect alert manager to health monitor\n    if (this.components.alertManager && this.components.healthMonitor) {\n      this.components.healthMonitor.on('criticalCheckFailed', (data) => {\n        this.components.alertManager.emit('alert', {\n          name: `Critical Health Check Failed: ${data.name}`,\n          description: `Critical health check ${data.name} has failed`,\n          severity: 'critical',\n          source: 'health-monitor',\n          tags: ['health-check', 'critical'],\n          metadata: data\n        });\n      });\n    }\n  }\n\n  startMonitoring() {\n    // Start health monitoring\n    if (this.components.healthMonitor) {\n      this.components.healthMonitor.start();\n    }\n\n    // Start SLI/SLO evaluation (already started in constructor)\n    // Alert manager is event-driven, no need to start\n  }\n\n  // Express middleware factory\n  createMiddleware() {\n    return (req, res, next) => {\n      const middlewares = [];\n\n      // Add logger middleware\n      if (this.components.logger) {\n        middlewares.push(this.components.logger.middleware());\n      }\n\n      // Add tracer middleware\n      if (this.components.tracer) {\n        middlewares.push(this.components.tracer.middleware());\n      }\n\n      // Add metrics middleware\n      if (this.components.metrics) {\n        middlewares.push(this.components.metrics.middleware());\n      }\n\n      // Execute middlewares in sequence\n      let index = 0;\n      const runMiddleware = (err) => {\n        if (err) return next(err);\n        \n        if (index >= middlewares.length) {\n          return next();\n        }\n        \n        const middleware = middlewares[index++];\n        middleware(req, res, runMiddleware);\n      };\n      \n      runMiddleware();\n    };\n  }\n\n  // Health endpoint middleware\n  createHealthEndpoint() {\n    if (!this.components.healthMonitor) {\n      return (req, res) => {\n        res.status(503).json({ error: 'Health monitoring not available' });\n      };\n    }\n    \n    return this.components.healthMonitor.middleware();\n  }\n\n  // Metrics endpoint middleware\n  createMetricsEndpoint() {\n    if (!this.components.metrics) {\n      return (req, res) => {\n        res.status(503).text('Metrics not available');\n      };\n    }\n    \n    return (req, res) => {\n      res.set('Content-Type', 'text/plain');\n      res.send(this.components.metrics.getMetrics());\n    };\n  }\n\n  // Manual SLI recording\n  recordSLI(sliName, data, timestamp) {\n    if (this.components.sliSloTracker) {\n      return this.components.sliSloTracker.recordSLI(sliName, data, timestamp);\n    }\n  }\n\n  // Manual alert triggering\n  triggerAlert(alert) {\n    if (this.components.alertManager) {\n      this.components.alertManager.emit('alert', alert);\n    }\n  }\n\n  // Get monitoring status\n  getStatus() {\n    const status = {\n      initialized: this.initialized,\n      environment: this.environment,\n      components: {},\n      uptime: process.uptime()\n    };\n\n    // Get component statuses\n    Object.keys(this.components).forEach(name => {\n      const component = this.components[name];\n      status.components[name] = {\n        initialized: true,\n        status: 'running'\n      };\n\n      // Add component-specific status\n      if (name === 'healthMonitor' && component.getOverallHealth) {\n        status.components[name].health = component.getOverallHealth();\n      }\n      \n      if (name === 'alertManager' && component.getAlertStats) {\n        status.components[name].alerts = component.getAlertStats();\n      }\n      \n      if (name === 'sliSloTracker' && component.getAllSLOStatuses) {\n        status.components[name].slos = component.getAllSLOStatuses();\n      }\n    });\n\n    return status;\n  }\n\n  // Store configuration in memory\n  storeConfigInMemory() {\n    const memoryStore = {\n      configuration: this.config.export(),\n      components: Object.keys(this.components),\n      initialized: this.initialized,\n      environment: this.environment,\n      timestamp: this.getDeterministicDate().toISOString()\n    };\n\n    // Store in memory for hive coordination\n    return memoryStore;\n  }\n\n  // Graceful shutdown\n  async shutdown() {\n    console.log('Shutting down monitoring stack...');\n\n    // Stop health monitoring\n    if (this.components.healthMonitor) {\n      this.components.healthMonitor.cleanup();\n    }\n\n    // Stop SLI/SLO tracker\n    if (this.components.sliSloTracker) {\n      this.components.sliSloTracker.cleanup();\n    }\n\n    // Clean up alert manager\n    if (this.components.alertManager) {\n      this.components.alertManager.removeAllListeners();\n    }\n\n    // Shutdown tracer\n    if (this.components.tracer) {\n      await this.components.tracer.shutdown();\n    }\n\n    this.initialized = false;\n    console.log('Monitoring stack shutdown complete');\n  }\n\n  // Test the monitoring stack\n  async test() {\n    console.log('Testing monitoring stack...');\n    \n    const results = {\n      logging: false,\n      tracing: false,\n      metrics: false,\n      alerting: false,\n      sliSlo: false,\n      healthChecks: false\n    };\n\n    // Test logging\n    if (this.components.logger) {\n      try {\n        this.components.logger.logEvent('monitoring_test', { component: 'logger' });\n        results.logging = true;\n      } catch (error) {\n        console.error('Logger test failed:', error);\n      }\n    }\n\n    // Test tracing\n    if (this.components.tracer) {\n      try {\n        await this.components.tracer.withSpan('monitoring_test', async () => {\n          // Test span\n        });\n        results.tracing = true;\n      } catch (error) {\n        console.error('Tracer test failed:', error);\n      }\n    }\n\n    // Test metrics\n    if (this.components.metrics) {\n      try {\n        this.components.metrics.recordBusinessEvent('monitoring_test');\n        results.metrics = true;\n      } catch (error) {\n        console.error('Metrics test failed:', error);\n      }\n    }\n\n    // Test alerting\n    if (this.components.alertManager) {\n      try {\n        this.components.alertManager.testAlert('low');\n        results.alerting = true;\n      } catch (error) {\n        console.error('Alert manager test failed:', error);\n      }\n    }\n\n    // Test SLI/SLO\n    if (this.components.sliSloTracker) {\n      try {\n        this.components.sliSloTracker.recordSLI('availability', {\n          successfulRequests: 100,\n          failedRequests: 0\n        });\n        results.sliSlo = true;\n      } catch (error) {\n        console.error('SLI/SLO tracker test failed:', error);\n      }\n    }\n\n    // Test health checks\n    if (this.components.healthMonitor) {\n      try {\n        const health = this.components.healthMonitor.getOverallHealth();\n        results.healthChecks = health !== null;\n      } catch (error) {\n        console.error('Health monitor test failed:', error);\n      }\n    }\n\n    console.log('Monitoring stack test results:', results);\n    return results;\n  }\n}\n\n// Factory function for easy setup\nfunction createMonitoringStack(options = {}) {\n  return new MonitoringStack(options);\n}\n\n// Export everything\nmodule.exports = {\n  MonitoringStack,\n  createMonitoringStack,\n  StructuredLogger,\n  DistributedTracer,\n  CustomMetrics,\n  AlertManager,\n  SLISLOTracker,\n  HealthMonitor,\n  MonitoringConfig\n};